<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>New structure for utility</title>
  
  
  <link href="http://yunminitools.cn/atom.xml" rel="self"/>
  
  <link href="http://yunminitools.cn/"/>
  <updated>2023-03-25T02:39:44.636Z</updated>
  <id>http://yunminitools.cn/</id>
  
  <author>
    <name>Richard Z.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>思考问题的工具和框架</title>
    <link href="http://yunminitools.cn/2023/03/25/Tools-for-better-thinking/"/>
    <id>http://yunminitools.cn/2023/03/25/Tools-for-better-thinking/</id>
    <published>2023-03-25T02:33:05.000Z</published>
    <updated>2023-03-25T02:39:44.636Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;网站特点&quot;&gt;网站特点&lt;/h2&gt;
&lt;p&gt;发现一个帮助更好思考问题的工具「&lt;a href=&quot;https://untools.co/&quot;&gt;untools&lt;/a&gt;」，收集了各种思维工具和框架，可以帮助我们更好地理解问题、分析、决策，包括有常用的金字塔、鱼骨图、二阶思维等，类似于选择不同的思维模型来解决不同的问题。&lt;br&gt;
&lt;img src=&quot;http://cdn.yunminitools.cn/blog/0325-untools.png&quot; alt=&quot;https://untools.co/&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;网站结构&quot;&gt;网站结构&lt;/h2&gt;
&lt;h3 id=&quot;系统思考&quot;&gt;系统思考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;概念地图（&lt;a href=&quot;https://untools.co/concept-map&quot;&gt;Concept map&lt;/a&gt;）: 形象地理解一个概念或系统，了解其实体之间的关系。&lt;/li&gt;
&lt;li&gt;连接圈（&lt;a href=&quot;https://untools.co/connection-circles&quot;&gt;Connection circles&lt;/a&gt;）:是一种将故事或系统中的关系可视化的工具。它们通过看到系统中的因果关系来帮助你理解复杂性。&lt;/li&gt;
&lt;li&gt;冰山模型(&lt;a href=&quot;https://untools.co/iceberg-model&quot;&gt;Iceberg Model&lt;/a&gt;):通过查看隐藏的抽象级别来发现事件的根本原因。&lt;/li&gt;
&lt;li&gt;平衡反馈回路(&lt;a href=&quot;https://untools.co/balancing-feedback-loop&quot;&gt;Balancing feedback loop&lt;/a&gt;):是一种机制，它抵制在一个方向的进一步变化。它以反方向的变化来对抗一个方向的变化。它试图稳定一个系统。&lt;/li&gt;
&lt;li&gt;强化反馈回路(&lt;a href=&quot;https://untools.co/reinforcing-feedback-loop&quot;&gt;Reinforcing feedback loop&lt;/a&gt;):了解指数（复利）变化背后的力量。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="工具框架" scheme="http://yunminitools.cn/tags/%E5%B7%A5%E5%85%B7%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>中台的设计挑战-3</title>
    <link href="http://yunminitools.cn/2023/03/24/Design-Challenges-for-the-Middle-Platform-3/"/>
    <id>http://yunminitools.cn/2023/03/24/Design-Challenges-for-the-Middle-Platform-3/</id>
    <published>2023-03-24T15:10:15.000Z</published>
    <updated>2023-03-24T15:10:50.441Z</updated>
    
    
    <summary type="html">&lt;p&gt;在做中台设计的过程中，发现中台体系庞大，链路错综复杂，问题也很多。不过这些页面之间都存有一些共性，通过对页面特征的分析，总结出了三种典型的业务场景类型：信息列表类、规则配置类、场景联动类。&lt;/p&gt;
&lt;h2 id=&quot;3-场景联动类&quot;&gt;&lt;strong&gt;3. 场景联动类&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在中台业务域中，有许多与C端紧密相关的场景，但我们似乎并未抓住这种适合互动的机会，前中后台之间缺乏沟通与联动。整个系统就像一座冰山，前台只是冰山一角，冰面之下隐藏着庞大的中台系统，这就形成了前后之间虽然关系紧密但彼此看不见的情况。&lt;br&gt;
&lt;img src=&quot;http://cdn.yunminitools.cn/blog/0322-Design-C1.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="UI设计" scheme="http://yunminitools.cn/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="产品管理" scheme="http://yunminitools.cn/tags/%E4%BA%A7%E5%93%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>中台的设计挑战-2</title>
    <link href="http://yunminitools.cn/2023/03/23/Design-Challenges-for-the-Middle-Platform-2/"/>
    <id>http://yunminitools.cn/2023/03/23/Design-Challenges-for-the-Middle-Platform-2/</id>
    <published>2023-03-23T14:53:36.000Z</published>
    <updated>2023-03-23T14:54:02.177Z</updated>
    
    
    <summary type="html">&lt;p&gt;在做中台设计的过程中，发现中台体系庞大，链路错综复杂，问题也很多。不过这些页面之间都存有一些共性，通过对页面特征的分析，总结出了三种典型的业务场景类型：信息列表类、规则配置类、场景联动类。&lt;/p&gt;
&lt;h2 id=&quot;2-规则配置类&quot;&gt;2. 规则配置类&lt;/h2&gt;
&lt;p&gt;规则配置类页面是中台业务域中另一种常见的场景，其特点是配置项繁多，且逻辑复杂。繁琐的配置加上复杂的逻辑无疑加重了用户的认知负荷，导致操作低效。&lt;br&gt;
复杂的规则让我们看不懂配置项背后的含义，这类现象统称为“看不懂”。针对该问题，我们意识到可以利用人眼对图形符号更为敏感这一特性，用图形符号代替文本描述，让抽象的概念和复杂的逻辑关系清晰可见，以此来降低理解门槛。&lt;br&gt;
为了更好的帮助我们理解图形符号映射法则，下面举个案例加以说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例  选品特征组合可视化&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="UI设计" scheme="http://yunminitools.cn/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="产品管理" scheme="http://yunminitools.cn/tags/%E4%BA%A7%E5%93%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>中台的设计挑战-1</title>
    <link href="http://yunminitools.cn/2023/03/22/Design-Challenges-for-the-Middle-Platform-1/"/>
    <id>http://yunminitools.cn/2023/03/22/Design-Challenges-for-the-Middle-Platform-1/</id>
    <published>2023-03-22T14:37:31.000Z</published>
    <updated>2023-03-22T14:38:10.837Z</updated>
    
    
    <summary type="html">&lt;p&gt;在做中台设计的过程中，发现中台体系庞大，链路错综复杂，问题也很多。不过这些页面之间都存有一些共性，通过对页面特征的分析，总结出了三种典型的业务场景类型：信息列表类、规则配置类、场景联动类。&lt;/p&gt;
&lt;h2 id=&quot;1-信息列表类&quot;&gt;1.信息列表类&lt;/h2&gt;
&lt;p&gt;列表是中后台最为常见的场景之一，传统的列表无非是字段的堆叠，大量相似信息的重复出现，降低了有效信息的捕获和整合效率，加重了认知负荷。大量列表让我们有种看不清重点的错觉，这种现象统称为“看不清”，为了解决这个问题，我们将列表按照其功能分成两大类：&lt;strong&gt;执行类&lt;/strong&gt;和&lt;strong&gt;看板类&lt;/strong&gt;。执行类列表目的是将所有字段展示完全，方便统一管理和操作；看板类则只要展示关键信息，起到快速查看和监控的作用。&lt;/p&gt;
&lt;h3 id=&quot;1-1-执行类列表&quot;&gt;&lt;strong&gt;1.1 执行类列表&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.yunminitools.cn/blog/0322-Design-01.png&quot; alt=&quot; &quot;&gt;&lt;br&gt;
这里举一个营销列表的例子，营销列表的作用是对所有的活动进行一个高效的管理。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="UI设计" scheme="http://yunminitools.cn/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="产品管理" scheme="http://yunminitools.cn/tags/%E4%BA%A7%E5%93%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于linux vim命令替换的使用</title>
    <link href="http://yunminitools.cn/2023/03/21/VIM-Replace-Command/"/>
    <id>http://yunminitools.cn/2023/03/21/VIM-Replace-Command/</id>
    <published>2023-03-21T15:35:49.000Z</published>
    <updated>2023-03-21T15:36:21.910Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;vim 中可以使用 ：s 命令来替换字符串。以前只会使用一种格式来全文替换，今天发现该命令有很多种写法（linux vi命令真是强大啊，还有很多需要学习），记录几种在此，方便以后查询。&lt;/p&gt;
&lt;p&gt;：s/vivian/sky/ 替换当前行第一个 vivian 为</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="http://yunminitools.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>聊聊企业服务产品</title>
    <link href="http://yunminitools.cn/2023/03/20/Talk-about-Enterprise-Services/"/>
    <id>http://yunminitools.cn/2023/03/20/Talk-about-Enterprise-Services/</id>
    <published>2023-03-20T15:11:50.000Z</published>
    <updated>2023-03-20T15:12:21.009Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;企业服务在解决什么问题？&quot;&gt;企业服务在解决什么问题？&lt;/h2&gt;
&lt;p&gt;按照亨利·法约尔的说法，无论哪种类型的企业，经营的过程中都会面临这6种活动：技术活动、财务活动、会计活动、商业活动、安全活动、管理活动。&lt;/p&gt;
&lt;p&gt;市场上主流的企业服务产品解决的问题分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Salesforce、纷享销客解决的是企业的商业活动，帮助企业把产品卖出去，或把产品（资源）买进来。&lt;/li&gt;
&lt;li&gt;金蝶、用友解决的是企业的会计活动，帮助企业把账记清楚，各项成本是多少、有多少负债与资产。&lt;/li&gt;
&lt;li&gt;Teambition解决的是企业的管理活动，帮助企业把事（项目）理清楚，提高团队协作效率。同样是解决管理活动，薪人薪事的不同点在于它解决的是人的问题，帮助企业把人员的管理变得更高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即便了解了这个理论，在对市场规模进行预判的时候我们还是会犯错，因为企业发展的不同阶段，每个经营活动的侧重点是不一样的。以互联网公司为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;早期，想法要落地首先需要启动资金，于是企业发展的第一步就是准备BP融点钱，然后开始招聘，租办公场地，购买服务器等设备，所有人的精力都扑在产品上，公司最重要的资产就是产品和技术人员，这个阶段企业最关注的是财务活动和技术活动。&lt;/li&gt;
&lt;li&gt;产品打磨的差不多了，下一步准备开始推向市场了，于是要开始考虑哪些渠道推广更有效，涉及到付费的话还要考虑定价策略，因此这个阶段企业最关注的是商业活动，即把产品更好地『卖出去』&lt;/li&gt;
&lt;li&gt;一旦产品被市场证明是有效的话，企业会开始考虑规模化复制以便迎来更快的增长。而随着规模的扩大，不可避免会出现组织的『熵增』，于是大家开始关注如何提高企业运转的效率，哪些关键岗位需要更专业的人，哪个环节的效率可以优化。这个阶段企业最关注的是商业活动和管理活动。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="产品管理" scheme="http://yunminitools.cn/tags/%E4%BA%A7%E5%93%81%E7%AE%A1%E7%90%86/"/>
    
    <category term="企业服务" scheme="http://yunminitools.cn/tags/%E4%BC%81%E4%B8%9A%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>推荐网站资源：B端观止</title>
    <link href="http://yunminitools.cn/2023/03/19/B-design-resource/"/>
    <id>http://yunminitools.cn/2023/03/19/B-design-resource/</id>
    <published>2023-03-19T15:19:16.000Z</published>
    <updated>2023-03-19T15:19:48.369Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;很久以前就注意到了这个网站：&lt;a</summary>
        
      
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="UI设计" scheme="http://yunminitools.cn/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>领域模型的应用</title>
    <link href="http://yunminitools.cn/2023/03/18/DDD-domain-model-1/"/>
    <id>http://yunminitools.cn/2023/03/18/DDD-domain-model-1/</id>
    <published>2023-03-18T14:05:23.000Z</published>
    <updated>2023-03-18T14:07:25.329Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;领域驱动设计DDD在战术建模（后文简称建模，除非特别说明）上提供了一个元模型体系（如下图），通过这个元模型我们会对战略建模过程中识别出来的问题子域进行抽象，而通过抽象来指导最后的落地实现。&lt;br&gt;
&lt;img src=&quot;http://cdn.yunminitools.cn/blog/DDD-model.png&quot; alt=&quot;DDD构建的元模型元素脑图&quot;&gt;&lt;br&gt;
这里我们谈的战术阶段实际就是这样一个抽象过程。这个抽象过程由于元模型的存在实际是一定程度模式化的。这样的好处是并非只能技术人员参与建模，业务人员经过一定的培训也是完全可以理解的。在带领不少团队实践建模的过程中，业务人员参与战术设计也是我要求的。&lt;br&gt;
由于已经有不少书籍介绍DDD的元模型，这里我们就不再赘述，转而谈谈这个抽象过程中大家经常遇到的一些困惑。这些比较常见的问题可能是DDD元模型未来演进需要解决的，但我们仍然要注意业务问题和架构设计的多样性，不要过度规范，以至于过犹不及。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="领域驱动" scheme="http://yunminitools.cn/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何实现系统解耦</title>
    <link href="http://yunminitools.cn/2023/03/17/How-to-system-decoupling/"/>
    <id>http://yunminitools.cn/2023/03/17/How-to-system-decoupling/</id>
    <published>2023-03-17T14:14:15.000Z</published>
    <updated>2023-03-17T14:18:07.506Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么要解耦&quot;&gt;为什么要解耦&lt;/h2&gt;
&lt;p&gt;在软件开发领域，&lt;strong&gt;解耦&lt;/strong&gt;这个词相信大家都不陌生。在面向对象的语境下，我们会应用&lt;a href=&quot;https://insights.thoughtworks.cn/understand-solid-principles/&quot;&gt;SOLID原则&lt;/a&gt;来构建高内聚低耦合的应用，实现模块间的解耦；在复杂业务系统分析和建模时，会通过DDD的战略和战术设计帮助划分领域并实现分布式系统中服务的解耦；当我们在组织大型敏捷开发团队协同工作时，通过组建自治团队来减少摩擦，从而实现团队级别的解耦。&lt;/p&gt;
&lt;p&gt;可以看到解耦无处不在，并且以此为目的投入，大家都会觉得是无比的政治正确，因为实现了解耦，我们的系统和应用就能更快速的扩展和演进，我们的团队就能更顺畅的合作并能更加快速的实现业务价值。&lt;/p&gt;
&lt;p&gt;但是，当我们暂时抛开将得到的种种好处，思考要如何去实现它时，却发现解耦这个词表达的意义过于抽象和模糊，它既没有描述最终的状态也没有提供实现的方法。那当我们谈解耦的时候，具体内容是什么呢？&lt;/p&gt;
&lt;p&gt;从字面上理解的所谓耦合，通常是指&lt;strong&gt;两个或两个以上的物体或者体系之间相互作用彼此影响&lt;/strong&gt;，对应到软件研发的以上场景，我们可以转换成是指&lt;strong&gt;两个或两个以上的模块/系统/团队之间相互作用彼此影响&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在软件需要解决的业务问题越来复杂的今天，单个的系统或者团队很难在不依赖外部的情况下去实现业务目标，所以我理解的&lt;strong&gt;解耦&lt;/strong&gt;并不是要消除耦合(彼此的作用和影响/依赖)，而是指我们应该如何通过一定的方式和规则，来设计和管理以上提到的多个元素之间的依赖，降低耦合程度来使整个系统有序顺畅的运转。&lt;/p&gt;
&lt;p&gt;本文将从服务间上下游的思维来讨论如何在系统架构演进过程中，持续的保持服务间的松耦合，实现解耦的目标。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="领域驱动" scheme="http://yunminitools.cn/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>图标设计素材网址收集</title>
    <link href="http://yunminitools.cn/2023/03/16/Icon-design-materials/"/>
    <id>http://yunminitools.cn/2023/03/16/Icon-design-materials/</id>
    <published>2023-03-16T05:18:48.000Z</published>
    <updated>2023-03-16T05:20:16.757Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;图标素材网站&quot;&gt;图标素材网站&lt;/h2&gt;
&lt;h3 id=&quot;Bootstrap-官方图标库&quot;&gt;&lt;strong&gt;&lt;strong&gt;Bootstrap 官方图标库&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;网址：&lt;a href=&quot;https://icons.bootcss.com/&quot;&gt;icons.bootcss.com&lt;/a&gt;&lt;br&gt;
&lt;img src=&quot;http://cdn.yunminitools.cn/blog/icons.bootcss.com-%E6%88%AA%E5%9B%BE.png&quot; alt=&quot;http://cdn.yunminitools.cn/blog/icons.bootcss.com-截图.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="UI设计" scheme="http://yunminitools.cn/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>DDD中的上下文映射</title>
    <link href="http://yunminitools.cn/2023/03/15/DDD-ContextMap/"/>
    <id>http://yunminitools.cn/2023/03/15/DDD-ContextMap/</id>
    <published>2023-03-15T14:28:30.000Z</published>
    <updated>2023-03-15T14:30:59.334Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是上下文映射&quot;&gt;什么是上下文映射&lt;/h2&gt;
&lt;p&gt;上下文映射，对应的英文单词是Context Map，代表的是领域驱动设计中，多个限界上下文之前的关系。方便设计者和开发者能够一目了然地看到每个限界上下文和其它限界上下文之间的关系，最终的产出可能是一张映射图，或者映射卡片。实际上的限界上下文映射的设计，不只是跟设计决策和技术实现有关，还跟企业文化、组织架构有关。&lt;/p&gt;
&lt;h2 id=&quot;有哪些上下文映射&quot;&gt;有哪些上下文映射&lt;/h2&gt;
&lt;h3 id=&quot;分离方式&quot;&gt;分离方式&lt;/h3&gt;
&lt;p&gt;分离方式（separate way），分离方式指的是两个限界上下文没有任何关系，没有关系其实就是一种非常好的设计，因为它们可以独立变化，互相影响。&lt;br&gt;
但在实际的开发过程中，可能两个限界上下文会有一些耦合。如果设计者认为这两个限界上下文解耦的价值远远大于复用的价值（比如分属于两个差异很大的团队），那可以通过引入少量的重复来彻底解耦开来。&lt;br&gt;
&lt;strong&gt;比如&lt;/strong&gt;：在电商场景中，支付上下文，就和库存上下文没有任何关系。&lt;/p&gt;
&lt;h3 id=&quot;客户-供应&quot;&gt;客户-供应&lt;/h3&gt;
&lt;p&gt;客户-供应（customer/supplier）是我们最中间的一种上下文映射方式。一方提供服务，另一方去调用服务。我们类比水流，上游发生变化可能会影响下游，所以我们把提供服务的一方称为“上游”，使用服务的一方称为“下游”。这与调用关系刚好是相反的。&lt;br&gt;
&lt;strong&gt;比如&lt;/strong&gt;：在电商场景中，订单上下文依赖库存上下文，所以库存上下文就是订单上下文的上游。&lt;/p&gt;
&lt;h3 id=&quot;发布-订阅&quot;&gt;发布-订阅&lt;/h3&gt;
&lt;p&gt;发布-订阅（publisher/subscriber）也是一种很常见的上下文映射方式，在实际的开发过程中往往是通过消息中间件来实现。&lt;br&gt;
发布-订阅模式源自于设计模式中的“观察者模式”，上下游通过消息去通信，下游注册观察者，上游作为发布者，如果上游发生了变化，会发布一个业务事件，下游收到这个事件后进行后续的操作。&lt;br&gt;
发布-订阅模式与客户-供应模式最大的不同，在于发布-订阅模式，是上游主动发起业务的变化，而不是被动等下游去调用上游。它相较于客户-供应模式而言，耦合程度会低一些。&lt;br&gt;
&lt;strong&gt;比如&lt;/strong&gt;：在电商场景中，订单上下文和物流上下文，就可以通过发布-订阅模式来做。订单完成后，发生订单完成事件，物流上下文监听事件开始物流配送。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="领域驱动" scheme="http://yunminitools.cn/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>什么是维度退化</title>
    <link href="http://yunminitools.cn/2023/03/14/Degenerate-Dimension/"/>
    <id>http://yunminitools.cn/2023/03/14/Degenerate-Dimension/</id>
    <published>2023-03-14T01:46:41.000Z</published>
    <updated>2023-03-14T02:08:01.022Z</updated>
    
    
    <summary type="html">&lt;h1&gt;概念：&lt;/h1&gt;
&lt;p&gt;维度退化（Degenerate-Dimension,DD）：将维度退化到事实表中，减少事实表和维度表的关联，在维度建模的数据仓库中，有一种维度叫Degenerate Dimension，中文一般翻译为“退化维度”。这种退化维度一般都是事务的编号，如订单编号、发票编号等。这类编号需要保存到事实表中，但是不需要对应的维度表，所以称为退化维度。&lt;/p&gt;
&lt;h2 id=&quot;特点-举例：&quot;&gt;特点/举例：&lt;/h2&gt;
&lt;p&gt;退化维度是维度建模领域中的一个非常重要的概念，它对理解维度建模有着非常重要的作用，尤其是对维度建模的入门者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有对应的维度表的维度。&lt;/li&gt;
&lt;li&gt;存储在事实表中&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="数据管理" scheme="http://yunminitools.cn/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>维度表设计注意事项</title>
    <link href="http://yunminitools.cn/2023/03/13/Dimension-Table-Design-1/"/>
    <id>http://yunminitools.cn/2023/03/13/Dimension-Table-Design-1/</id>
    <published>2023-03-13T08:08:23.000Z</published>
    <updated>2023-03-13T08:16:53.263Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1、什么是维度表？&quot;&gt;1、什么是维度表？&lt;/h2&gt;
&lt;p&gt;维度是维度建模的基础和灵魂。在维度建模中，将度量称为“事实” ，</summary>
        
      
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="数据管理" scheme="http://yunminitools.cn/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于需求分析和客户沟通</title>
    <link href="http://yunminitools.cn/2023/03/12/The-iceberg-secret-revealed/"/>
    <id>http://yunminitools.cn/2023/03/12/The-iceberg-secret-revealed/</id>
    <published>2023-03-12T09:23:18.000Z</published>
    <updated>2023-03-12T09:23:47.396Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;关于需求分析和工期预估一直是老大难问题，Joel 的&lt;a href=&quot;https://www.joelonsoftware.com/2002/02/13/the-iceberg-secret-revealed/&quot;&gt;这篇文章&lt;/a&gt;谈到了这个问题，我挑一些记录下来。&lt;/p&gt;
&lt;h2 id=&quot;客户不知道他们想要什么是问题吗？&quot;&gt;客户不知道他们想要什么是问题吗？&lt;/h2&gt;
&lt;p&gt;通常，在定制项目中，最常见的超支、失败和悲剧的原因总是归结为，基本上，&amp;quot;客户不知道他们想要什么？”&lt;br&gt;
事实上，有一件事是每个初级BA都需要在开展工作前要知道的，那就是：&lt;strong&gt;客户其实不知道他们想要什么&lt;/strong&gt;。不要再期望客户知道他们想要什么。这是不可能发生的。忘掉它吧。&lt;br&gt;
相反，你要假设你将不得不制造一些东西，而客户将不得不喜欢它，但他们将有一点惊喜。你必须做研究，想出一个设计，以一种愉悦的方式解决客户的问题。&lt;br&gt;
设身处地为客户想想。想象一下，你决定装修你的厨房，因此，你聘请了一位专业的设计师，指示要把它弄得高大上一些。你不知道如何完成这个任务，你不知道那些事厨房中必须要装的，哪些事提升体验的，这些都不是你擅长的，你想让设计师帮你完成这个事情，这就是你雇用他的原因。&lt;br&gt;
有一种办法是让客户进入房间，让他们作为开发团队的成员参与到设计过程的每一步。我认为，这有点太 &amp;quot;极端 &amp;quot;了。这就好像我的设计师在设计厨房时让我出现，并要求我对每一个小细节提供意见。这对我来说很无聊，我会觉得这个设计师对我毫无价值。&lt;br&gt;
假设你的客户不知道他们想要什么。根据你对这个领域的理解，你自己设计它。如果你需要花一些时间来学习这个领域，或者你需要一个领域专家来帮助你，这很好，但软件的设计是你的工作。如果你做了领域方面的功课并创造了一个好的用户界面，客户会很高兴。&lt;/p&gt;
&lt;h2 id=&quot;冰山理论&quot;&gt;冰山理论&lt;/h2&gt;
&lt;p&gt;现在，我答应告诉你一个关于在你的软件的客户（或非技术经理）的语言和程序员的语言之间进行翻译的秘密。&lt;br&gt;
你知道一座冰山有90%在水下吗？那么，大多数软件也是这样的–有一个漂亮的用户界面，需要大约10%的工作，然后90%的编程工作是在盖子下面。如果你考虑到你大约一半的时间是用来修复bug的，那么用户界面只占5%的工作。如果你把自己限制在用户界面的视觉部分，即像素，也就是你在PowerPoint中看到的东西，现在我们说的是不到1%。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="需求分析" scheme="http://yunminitools.cn/tags/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客安装PlantUML</title>
    <link href="http://yunminitools.cn/2023/03/11/Hexo-plantuml-1/"/>
    <id>http://yunminitools.cn/2023/03/11/Hexo-plantuml-1/</id>
    <published>2023-03-11T08:54:13.000Z</published>
    <updated>2023-03-11T08:59:29.361Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Hexo 静态 blog 支持 markdown 绘制 plantuml。&lt;/p&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;安装步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进入hexo 目录&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;npm install --save</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="博客管理" scheme="http://yunminitools.cn/tags/%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>事实表设计注意事项</title>
    <link href="http://yunminitools.cn/2023/03/09/Fact-Table-Design-1/"/>
    <id>http://yunminitools.cn/2023/03/09/Fact-Table-Design-1/</id>
    <published>2023-03-09T02:58:56.000Z</published>
    <updated>2023-03-14T02:23:56.350Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;在设计事实表的时候，和设计普通的数据库有一些差异，有以下一些注意事项：&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;graph LR
B(包含完整业务事实)---A(事实表设计)
C(去除多余业务事实)---A
D(分解不可加事实)---A
E(先声明粒度)---A
A---F(避免不同粒度)
A---G(保持单位一致)
A---H(处理null 值)
A---I(退化维度)&lt;/pre&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="数据管理" scheme="http://yunminitools.cn/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>三种事实表</title>
    <link href="http://yunminitools.cn/2023/03/08/Three-Fact-Table/"/>
    <id>http://yunminitools.cn/2023/03/08/Three-Fact-Table/</id>
    <published>2023-03-08T07:19:04.000Z</published>
    <updated>2023-03-08T07:23:35.748Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;什么是事实表？&quot;&gt;什么是事实表？&lt;/h2&gt;
&lt;p&gt;事实表作为数据仓库维度建模的核心，紧紧围绕着业务过程来设计，通过获取描述业务过程的度量来表达业务过程，包含了引用的维度</summary>
        
      
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="数据管理" scheme="http://yunminitools.cn/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>业务数据治理实施流程-1</title>
    <link href="http://yunminitools.cn/2023/03/07/business-data-governance-1/"/>
    <id>http://yunminitools.cn/2023/03/07/business-data-governance-1/</id>
    <published>2023-03-07T15:23:54.000Z</published>
    <updated>2023-03-07T15:26:13.205Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;数据治理实施流程，是我们依据业务数据治理标准化框架在实施解决具体数据问题时，总结抽象出来的一套适用于大多数治理场景解决问题的通用标准流程。标准流程的好处在于更加规范化数据治理工程师的操作流程，来保证实施的质量。流程一共包含5个步骤：&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="数据管理" scheme="http://yunminitools.cn/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>反思：那些你不该做的事情</title>
    <link href="http://yunminitools.cn/2023/03/06/Things-you-should-never-do-1/"/>
    <id>http://yunminitools.cn/2023/03/06/Things-you-should-never-do-1/</id>
    <published>2023-03-06T15:58:15.000Z</published>
    <updated>2023-03-06T15:58:55.693Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近在重新看 &lt;strong&gt;Joel on Software&lt;/strong&gt; 的blog，时隔二十年，很多错误还在重复发生，很有感触，比如&lt;a</summary>
        
      
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="复盘反思" scheme="http://yunminitools.cn/tags/%E5%A4%8D%E7%9B%98%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>SIKT模型构建的用户画像</title>
    <link href="http://yunminitools.cn/2023/03/05/User-Profile-2/"/>
    <id>http://yunminitools.cn/2023/03/05/User-Profile-2/</id>
    <published>2023-03-05T12:32:50.000Z</published>
    <updated>2023-03-05T12:35:19.313Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;SIKT模型原理&quot;&gt;&lt;strong&gt;&lt;strong&gt;SIKT模型原理&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;SIKT模型是一套梳理标签的方法。标签是用户画像的基础，是构建画像体系的砖石。想让用户画像系统有用，标签本身得是有价值的。这就要求，在做标签的时候，不能凭着数据人员的直觉，像说贯口一样把“性别、年龄”胡乱怼进系统，而是从业务场景出发，层层递进。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Scene 场景&lt;/td&gt;
&lt;td&gt;具体的业务场景&lt;/td&gt;
&lt;td&gt;业务主导&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Index 指标&lt;/td&gt;
&lt;td&gt;该场景要达成的目标&lt;/td&gt;
&lt;td&gt;业务主导&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key Behavior 关键行为&lt;/td&gt;
&lt;td&gt;达成目标要做的行动&lt;/td&gt;
&lt;td&gt;业务主导&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tag 标签&lt;/td&gt;
&lt;td&gt;为了提升效率所需标签&lt;/td&gt;
&lt;td&gt;数据主导&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;梳理业务场景。使用方先思考：我要解决什么问题？&lt;/li&gt;
&lt;li&gt;梳理关键指标。使用方再思考：用什么指标衡量问题解决？&lt;/li&gt;
&lt;li&gt;梳理关键行动。使用方再思考：我做什么事能解决问题？&lt;/li&gt;
&lt;li&gt;筛选有用标签。数据协助思考：用什么标签能提升行动效率。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;如何进行关键行动&quot;&gt;如何进行关键行动&lt;/h2&gt;
&lt;p&gt;可以从以下行动入手：&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;graph LR
A(认知现状)--&gt;B(制定策略)--&gt;C(选择方法)--&gt;D(监控执行)--&gt;E(复盘效果)&lt;/pre&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="用户画像" scheme="http://yunminitools.cn/tags/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/"/>
    
  </entry>
  
</feed>

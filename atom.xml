<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>New structure for utility</title>
  
  
  <link href="http://yunminitools.cn/atom.xml" rel="self"/>
  
  <link href="http://yunminitools.cn/"/>
  <updated>2024-02-26T13:33:37.908Z</updated>
  <id>http://yunminitools.cn/</id>
  
  <author>
    <name>Richard Z.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Window上用包管理应用安装软件 — Chocolatey</title>
    <link href="http://yunminitools.cn/2024/02/26/windows-package-management-chocolatey/"/>
    <id>http://yunminitools.cn/2024/02/26/windows-package-management-chocolatey/</id>
    <published>2024-02-26T13:32:55.000Z</published>
    <updated>2024-02-26T13:33:37.908Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在经历了多次重装系统、重新安装各种常用软件后，我突然萌生了一个想法，难道 Window 就没有一个像 Linux 一样可以使用一行命令安装软件的包管理器吗？&lt;/p&gt;
&lt;p&gt;答案是：有的。&lt;/p&gt;
&lt;p&gt;这里主要是介绍</summary>
        
      
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Windows" scheme="http://yunminitools.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>查看和清理Linux日志文件</title>
    <link href="http://yunminitools.cn/2024/02/21/linux-commands-collection-1/"/>
    <id>http://yunminitools.cn/2024/02/21/linux-commands-collection-1/</id>
    <published>2024-02-21T14:15:10.000Z</published>
    <updated>2024-02-21T14:18:01.880Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1、查看目录大小&quot;&gt;&lt;strong&gt;1、查看目录大小&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;du，下面命令显示当前文件夹下各个文件及文件夹大小（汇总）&quot;&gt;du，下面命令显示当前文件夹下各个文件及文件夹大小（汇总）&lt;/h3&gt;
&lt;figure</summary>
        
      
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Linux" scheme="http://yunminitools.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker安装MySQL主从复制</title>
    <link href="http://yunminitools.cn/2024/02/21/master-slave-replication-docker-install/"/>
    <id>http://yunminitools.cn/2024/02/21/master-slave-replication-docker-install/</id>
    <published>2024-02-21T14:12:19.000Z</published>
    <updated>2024-02-21T14:13:26.800Z</updated>
    
    
    <summary type="html">&lt;p&gt;以下是步骤：&lt;/p&gt;
&lt;h2 id=&quot;1-拉取MySQL的镜像&quot;&gt;&lt;strong&gt;1.拉取MySQL的镜像&lt;/strong&gt;&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo docker pull mysql:8.0.25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-新建MySQL主服务器的容器实例，端口为3307&quot;&gt;2.新建MySQL主服务器的容器实例，端口为3307&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo docker run -p 3501:3306 --name mysql-master \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /mnt/n1/data/mysql-master/log:/var/log/mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /mnt/n1/data/mysql-master/data:/var/lib/mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /mnt/n1/data/mysql-master/conf:/etc/mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /mnt/n1/data/mysql-master/mysql-files:/var/lib/mysql-files \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e MYSQL_ROOT_PASSWORD=123456 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-d mysql:8.0.25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令解读：&lt;br&gt;
docker run ：创建并运行一个容器&lt;br&gt;
–name : 给容器起一个名字，比如叫做 mysql-master&lt;br&gt;
-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口&lt;br&gt;
-d：后台运行容器&lt;br&gt;
-e：环境变量，如密码什么的&lt;br&gt;
-v：挂载一个数据卷到某个容器内目录，上面分别配置了日志、数据、配置的数据卷&lt;/p&gt;</summary>
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="http://yunminitools.cn/tags/Docker/"/>
    
    <category term="Linux" scheme="http://yunminitools.cn/tags/Linux/"/>
    
    <category term="Mysql" scheme="http://yunminitools.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Windows命令-域内信息收集</title>
    <link href="http://yunminitools.cn/2024/02/20/windows-domain-commands-collection-1/"/>
    <id>http://yunminitools.cn/2024/02/20/windows-domain-commands-collection-1/</id>
    <published>2024-02-20T14:03:02.000Z</published>
    <updated>2024-02-20T14:03:49.301Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;判断是否存在域&quot;&gt;判断是否存在域&lt;/h2&gt;
&lt;h3 id=&quot;ipconfig&quot;&gt;ipconfig&lt;/h3&gt;
&lt;p&gt;查看网关 IP 地址、DNS 的 IP 地址、域名、本机是否和 DNS 服务器处于同一网段。&lt;/p&gt;
&lt;figure</summary>
        
      
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Windows" scheme="http://yunminitools.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Mac brew安装tmux报错“no bottle available!“</title>
    <link href="http://yunminitools.cn/2024/02/18/mac-brew-install-tmux-error/"/>
    <id>http://yunminitools.cn/2024/02/18/mac-brew-install-tmux-error/</id>
    <published>2024-02-18T14:14:03.000Z</published>
    <updated>2024-02-18T14:17:51.073Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;在Mac M1安装tmux时，老是报错，根据报错提示无法解决。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;执行以下命令，再安装就可以了。&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="Mac" scheme="http://yunminitools.cn/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>一次Docker应用排查过程</title>
    <link href="http://yunminitools.cn/2024/02/18/docker-debug-test-1/"/>
    <id>http://yunminitools.cn/2024/02/18/docker-debug-test-1/</id>
    <published>2024-02-18T14:11:46.000Z</published>
    <updated>2024-02-18T14:12:31.709Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;重新发布了一个应用，发现无法访问，把排查过程记录一下。&lt;/p&gt;
&lt;h2 id=&quot;检查docker程序和开放端口&quot;&gt;检查docker程序和开放端口&lt;/h2&gt;
&lt;p&gt;运行下面语句：&lt;/p&gt;
&lt;figure</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="http://yunminitools.cn/tags/Docker/"/>
    
    <category term="Linux" scheme="http://yunminitools.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Django 的日志机制-4</title>
    <link href="http://yunminitools.cn/2024/02/16/Django-Logging-4/"/>
    <id>http://yunminitools.cn/2024/02/16/Django-Logging-4/</id>
    <published>2024-02-16T12:19:13.000Z</published>
    <updated>2024-02-16T12:48:17.053Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;进阶&quot;&gt;进阶&lt;/h2&gt;
&lt;p&gt;其实，如果只是为了排错方便，记录一些日志，自定义类基本可以满足要求。但如果要记录访问系统的所有请求日志，那就无能为力了，因为不可能手动在每个接口代码加日志，也没必要。&lt;/p&gt;
&lt;p&gt;这个时候，很自然就能想到 Django 中间件了。&lt;/p&gt;
&lt;h2 id=&quot;Django-中间件&quot;&gt;Django 中间件&lt;/h2&gt;
&lt;p&gt;定义中间件类，包括  &lt;strong&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/strong&gt; 代码和 &lt;strong&gt;&lt;code&gt;middleware&lt;/code&gt;&lt;/strong&gt; 代码，在本地app文件夹中创建目录：&lt;code&gt;middlewares&lt;/code&gt;，目录下创建文件 &lt;code&gt;LogMiddleware.py&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.utils.deprecation &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MiddlewareMixin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; logging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;local = threading.local()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;RequestLogFilter&lt;/span&gt;(logging.Filter):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    日志过滤器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, record&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.sip = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;sip&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.dip = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;dip&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.body = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;body&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.path = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.method = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;method&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.username = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;username&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.status_code = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;status_code&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        record.reason_phrase = &lt;span class=&quot;built_in&quot;&gt;getattr&lt;/span&gt;(local, &lt;span class=&quot;string&quot;&gt;&amp;#x27;reason_phrase&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;RequestLogMiddleware&lt;/span&gt;(&lt;span class=&quot;title class_ inherited__&quot;&gt;MiddlewareMixin&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    将request的信息记录在当前的请求线程上。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, get_response=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.get_response = get_response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.apiLogger = logging.getLogger(&lt;span class=&quot;string&quot;&gt;&amp;#x27;web.log&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, request&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            body = json.loads(request.body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            body = &lt;span class=&quot;built_in&quot;&gt;dict&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;string&quot;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            body.update(&lt;span class=&quot;built_in&quot;&gt;dict&lt;/span&gt;(request.GET))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            body.update(&lt;span class=&quot;built_in&quot;&gt;dict&lt;/span&gt;(request.POST))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.body = body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.path = request.path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.method = request.method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.username = request.user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.sip = request.META.get(&lt;span class=&quot;string&quot;&gt;&amp;#x27;REMOTE_ADDR&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.dip = socket.gethostbyname(socket.gethostname())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        response = self.get_response(request)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.status_code = response.status_code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local.reason_phrase = response.reason_phrase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.apiLogger.info(&lt;span class=&quot;string&quot;&gt;&amp;#x27;system-auto&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="Django" scheme="http://yunminitools.cn/tags/Django/"/>
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Python" scheme="http://yunminitools.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>算法练习：BM1 反转链表</title>
    <link href="http://yunminitools.cn/2024/02/13/nowcoder-algorithm-test-bm1/"/>
    <id>http://yunminitools.cn/2024/02/13/nowcoder-algorithm-test-bm1/</id>
    <published>2024-02-13T13:32:49.000Z</published>
    <updated>2024-02-13T13:33:30.373Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;题目内容&quot;&gt;题目内容&lt;/h2&gt;
&lt;p&gt;给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。&lt;/p&gt;
&lt;p&gt;数据范围： 0 ≤ &lt;em&gt;n&lt;/em&gt; ≤1000&lt;/p&gt;
&lt;p&gt;要求：空间复杂度 &lt;em&gt;O&lt;/em&gt;(1) ，时间复杂度 &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) 。&lt;/p&gt;
&lt;p&gt;如当输入链表{1,2,3}时，&lt;/p&gt;
&lt;p&gt;经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。&lt;/p&gt;
&lt;h2 id=&quot;我的思路&quot;&gt;我的思路&lt;/h2&gt;
&lt;p&gt;在遍历链表时，将当前节点的next 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用。借用网上一个图解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.yunminitools.cn/blog/02_13_bm1_test.gif&quot; alt=&quot; &quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Python" scheme="http://yunminitools.cn/tags/Python/"/>
    
    <category term="算法" scheme="http://yunminitools.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>牛客网 面试必刷TOP101 算法题</title>
    <link href="http://yunminitools.cn/2024/02/12/nowcoder-algorithm-test-101/"/>
    <id>http://yunminitools.cn/2024/02/12/nowcoder-algorithm-test-101/</id>
    <published>2024-02-12T15:48:40.000Z</published>
    <updated>2024-02-22T07:20:08.020Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;发现一个除了Leecode以外比较好的刷算法的网站：&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Python" scheme="http://yunminitools.cn/tags/Python/"/>
    
    <category term="算法" scheme="http://yunminitools.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>mermaid 插件语法错误解决</title>
    <link href="http://yunminitools.cn/2024/02/05/mermaid-Syntax-error-in-graph/"/>
    <id>http://yunminitools.cn/2024/02/05/mermaid-Syntax-error-in-graph/</id>
    <published>2024-02-05T14:47:37.000Z</published>
    <updated>2024-02-05T14:49:12.713Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;之前安装的mermaid插件，用下来一直很好，但最近出了问题，脚本无法运行，报错：&lt;br&gt;
Syntax error in graph mermaid version 8.14.0&lt;br&gt;
&lt;img</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="博客管理" scheme="http://yunminitools.cn/tags/%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Django 的日志机制-3</title>
    <link href="http://yunminitools.cn/2024/02/05/Django-Logging-3/"/>
    <id>http://yunminitools.cn/2024/02/05/Django-Logging-3/</id>
    <published>2024-02-05T14:18:12.000Z</published>
    <updated>2024-02-16T12:25:04.837Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;实现方式&quot;&gt;实现方式&lt;/h2&gt;
&lt;p&gt;其实最简单的方式就是直接在文件开头 &lt;strong&gt;&lt;code&gt;import&lt;/code&gt;&lt;/strong&gt;，然后程序中调用，像下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# import the logging library&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; logging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Get an instance of a logger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging.basicConfig(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;%(asctime)s - %(pathname)s[%(lineno)d] - %(levelname)s: %(message)s&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    level=logging.INFO)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger = logging.getLogger(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;my_view&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, arg1, arg&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; bad_mojo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Log an error message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	logger.error(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Something went wrong!&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但这种方式并不好，如果在每个文件开头都这样写一遍，第一是麻烦，第二是如果哪天要改变输出日志格式，那每个文件都要改一遍，还不累死。&lt;/p&gt;
&lt;p&gt;很显然，如果能封装成一个类，用的时候调用这个类，修改的时候也只需要修改这一个地方:&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="Django" scheme="http://yunminitools.cn/tags/Django/"/>
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Python" scheme="http://yunminitools.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django 的日志机制-2</title>
    <link href="http://yunminitools.cn/2024/02/04/Django-Logging-2/"/>
    <id>http://yunminitools.cn/2024/02/04/Django-Logging-2/</id>
    <published>2024-02-04T13:55:49.000Z</published>
    <updated>2024-02-16T12:24:36.397Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;logging-结构&quot;&gt;logging 结构&lt;/h2&gt;
&lt;p&gt;在 Django 中使用 Python 的标准库 logging 模块来记录日志，关于 logging 的配置，我这里不做过多介绍，只写其中最重要的四个部分：&lt;code&gt;Loggers&lt;/code&gt;、&lt;code&gt;Handlers&lt;/code&gt;、&lt;code&gt;Filters&lt;/code&gt; 和 &lt;code&gt;Formatters&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Loggers&quot;&gt;Loggers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Logger&lt;/code&gt; 即&lt;strong&gt;记录器&lt;/strong&gt;，是日志系统的入口。它有三个重要的工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向应用程序（也就是你的项目）公开几种方法，以便运行时记录消息&lt;/li&gt;
&lt;li&gt;根据传递给 &lt;code&gt;Logger&lt;/code&gt; 的消息的严重性，确定消息是否需要处理&lt;/li&gt;
&lt;li&gt;将需要处理的消息传递给所有感兴趣的处理器 &lt;code&gt;Handler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一条写入 &lt;code&gt;Logger&lt;/code&gt; 的消息都是一条日志记录，每一条日志记录都包含级别，代表对应消息的严重程度。常用的级别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DEBUG&lt;/code&gt;：排查故障时使用的低级别系统信息，通常开发时使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INFO&lt;/code&gt;：一般的系统信息，并不算问题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WARNING&lt;/code&gt;：描述系统发生小问题的信息，但通常不影响功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ERROR&lt;/code&gt;：描述系统发生大问题的信息，可能会导致功能不正常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CRITICAL&lt;/code&gt;：描述系统发生严重问题的信息，应用程序有崩溃的风险&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 &lt;code&gt;Logger&lt;/code&gt; 处理一条消息时，会将自己的日志级别和这条消息配置的级别做对比。如果消息的级别匹配或者高于 &lt;code&gt;Logger&lt;/code&gt; 的日志级别，它就会被进一步处理，否则这条消息就会被忽略掉。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;Logger&lt;/code&gt; 确定了一条消息需要处理之后，会把它传给 &lt;code&gt;Handler&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="Django" scheme="http://yunminitools.cn/tags/Django/"/>
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Python" scheme="http://yunminitools.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>远程开发的VS Code方法</title>
    <link href="http://yunminitools.cn/2024/02/03/VS-Code-Remote-Development/"/>
    <id>http://yunminitools.cn/2024/02/03/VS-Code-Remote-Development/</id>
    <published>2024-02-03T12:07:20.000Z</published>
    <updated>2024-02-03T12:09:38.321Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;远程开发并非仅仅是直接在服务器上编辑代码，远程开发侧重的不应该是是“远程”，而是“开发”，至于“远程”对用户而言应该是无感的，除了代码是在远程服务器上存储和运行，其他体验应该和本地开发一致，撰写代码时能享受到 IDE 带来的便利，运行代码时不必额外去上传下载——这似乎看起来很容易，但在VS Code Remote 出现之前，没有工具能做到。&lt;/p&gt;
&lt;p&gt;使用 VS Code Remote，你可以无缝的从一台设备切换到另一台设备，开会前在台式机上写代码，开会时拿起笔记本连上远程服务器就能继续，下班可以直接关掉公司的电脑，回到家打开家里的电脑就可以继续，设备切换从来没有如此方便，你不必关心这一切是如何实现的，只要使用就好，因为大部分时间你并不会觉得这和以前的本地开发有什么区别。&lt;/p&gt;
&lt;h2 id=&quot;安装及配置流程&quot;&gt;安装及配置流程&lt;/h2&gt;
&lt;h3 id=&quot;远程开发必备扩展安装&quot;&gt;远程开发必备扩展安装&lt;/h3&gt;
&lt;p&gt;在扩展中搜索 remote ，找到 Remote Development，安装即可，会为你安装包括 Remote-SSH 等全部远程开发使用的扩展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.yunminitools.cn/blog/0203-remote_dev_0.png&quot; alt=&quot; &quot;&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，你会发现左下角多了一个小图标，点击就可以看到用来连接远程开发的菜单了。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>免密远程登录Linux服务方法</title>
    <link href="http://yunminitools.cn/2024/02/03/SSH-Key-Based-Authentication-on-a-Linux-Server/"/>
    <id>http://yunminitools.cn/2024/02/03/SSH-Key-Based-Authentication-on-a-Linux-Server/</id>
    <published>2024-02-03T12:03:23.000Z</published>
    <updated>2024-02-03T12:04:05.769Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;经常需要访问Linux服务器，每次都要输密码很麻烦，查询了资料，可以通过密钥对配置来实现免密登录，每次都查完就忘，这次记录一下。&lt;/p&gt;
&lt;h2 id=&quot;客户端配置&quot;&gt;客户端配置&lt;/h2&gt;
&lt;p&gt;如果你使用的是</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="http://yunminitools.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Django 的日志机制-1</title>
    <link href="http://yunminitools.cn/2024/02/03/Django-Logging-1/"/>
    <id>http://yunminitools.cn/2024/02/03/Django-Logging-1/</id>
    <published>2024-02-03T09:56:23.000Z</published>
    <updated>2024-02-16T12:25:44.241Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2</summary>
        
      
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="Django" scheme="http://yunminitools.cn/tags/Django/"/>
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Python" scheme="http://yunminitools.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>50个常见的认知偏差</title>
    <link href="http://yunminitools.cn/2023/12/01/50-Cognitive-Biases/"/>
    <id>http://yunminitools.cn/2023/12/01/50-Cognitive-Biases/</id>
    <published>2023-12-01T14:38:41.000Z</published>
    <updated>2024-01-16T12:59:21.516Z</updated>
    
    
    <summary type="html">&lt;p&gt;马斯克点赞的50个常见的认知偏差，快来学习一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;权威偏见&lt;br&gt;
典型表现：专家说可以这么做…&lt;/li&gt;
&lt;li&gt;聚类错误&lt;br&gt;
典型表现：你看那朵云好像你家的猫。&lt;/li&gt;
&lt;li&gt;偏见盲点&lt;br&gt;
典型表现：我没有偏见。&lt;/li&gt;
&lt;li&gt;乐观偏见&lt;br&gt;
典型表现：水还有一半，一切都好好起来的。&lt;/li&gt;
&lt;li&gt;潜隐记忆&lt;br&gt;
典型表现：Greg以为去过墓地是他的一个梦，其实他真的去过。&lt;br&gt;
&lt;img src=&quot;https://cdn.yunminitools.cn/blog/50Cognitive-Biases-1.jpeg&quot; alt=&quot; &quot;&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="有趣资源" scheme="http://yunminitools.cn/categories/%E6%9C%89%E8%B6%A3%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="思维框架" scheme="http://yunminitools.cn/tags/%E6%80%9D%E7%BB%B4%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>设置ssh代理解决git pull慢的问题</title>
    <link href="http://yunminitools.cn/2023/11/05/ssh-proxy-github-slow-resolve/"/>
    <id>http://yunminitools.cn/2023/11/05/ssh-proxy-github-slow-resolve/</id>
    <published>2023-11-05T02:34:08.000Z</published>
    <updated>2023-11-05T02:35:56.372Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近Github特别慢，应该和网络关系比较大，查了一下，用设置代理方式搞定，具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;搭建代理服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装ncat 使用以下命令&lt;/p&gt;
 &lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="http://yunminitools.cn/tags/Linux/"/>
    
    <category term="Github" scheme="http://yunminitools.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Taylor Swift 纽约大学演讲（节选）</title>
    <link href="http://yunminitools.cn/2023/09/17/Taylor-Swift-NYC-Speech/"/>
    <id>http://yunminitools.cn/2023/09/17/Taylor-Swift-NYC-Speech/</id>
    <published>2023-09-17T10:40:04.000Z</published>
    <updated>2023-09-17T10:40:59.209Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;Taylor Swift（泰勒·斯威夫特），1989年12月13日出生于美国宾夕法尼亚州，美国女歌手、词曲作者、音乐制作人、演员、纽约大学荣誉博士。&lt;br&gt;
2022年5月19日，泰勒于纽约大学2022届毕业典礼发表演讲并被授予 “艺术博士” 荣誉学位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;荣誉博士学位（Honorary Doctoral Degree），也叫名誉博士学位，是世界多数国家通行授予的一种名誉性学术称号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;演讲稿&quot;&gt;演讲稿&lt;/h2&gt;
&lt;p&gt;You went to NYU during a global pandemic, being essentially locked into your dorms and having to do classes over Zoom. Everyone in college during normal times stresses of about test scores. But on top of that, you also had to pass like a thousand COVID tests. I imagine the idea of a normal college experience was all you wanted to. But in this case, you and I both learned that you don’t always get all the things in the bag that you selected from the menu in the delivery surface. That is life. You get what you get.&lt;br&gt;
你们在全球大流行期间去了纽约大学，基本上被困在宿舍里，不得不通过Zoom上课。在正常时期上大学的人都会担心考试成绩，但除此之外，你们还必须通过数以千次的核酸检测。我可以想象，你们也渴望能够拥有正常的大学经历。但在这种情况下，你和我都学到了，很多时候你难以获得你所选择的。这就是生活。你得到的仅仅是你所能够得到的。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="英语学习" scheme="http://yunminitools.cn/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VUE页面刷新实战</title>
    <link href="http://yunminitools.cn/2023/09/13/vue-refresh-page-route/"/>
    <id>http://yunminitools.cn/2023/09/13/vue-refresh-page-route/</id>
    <published>2023-09-13T14:18:39.000Z</published>
    <updated>2023-09-13T14:19:18.388Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;在进行VUE开发时，往往会出现需要实现当前页面操作完毕后，返回一个列表页面，如果用 this.$router.go(-1)</summary>
        
      
    
    
    
    <category term="日常练习" scheme="http://yunminitools.cn/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="编程技巧" scheme="http://yunminitools.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="VUE" scheme="http://yunminitools.cn/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>建立个人和组织的声望（转）</title>
    <link href="http://yunminitools.cn/2023/09/10/Building-personal-prestige/"/>
    <id>http://yunminitools.cn/2023/09/10/Building-personal-prestige/</id>
    <published>2023-09-10T06:06:40.000Z</published>
    <updated>2023-09-10T06:07:13.645Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;品牌-VS-声望&quot;&gt;品牌 VS 声望&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Brand&lt;/strong&gt; as a deliberately crafted, sustained narrative that is actively known about you. You don’t have to research Google engineering to have an opinion about Google engineering. In your career and as an engineering leader, you will likely be given the advice that it’s &lt;em&gt;very important&lt;/em&gt; to build a brand.&lt;br&gt;
品牌是一个经过精心打造、持续传播的叙事，它是人们主动了解你的方式。你不必研究谷歌的工程技术，就能对谷歌的工程技术有所见解。在你的职业生涯中，作为一名工程领导者，你很有可能会被建议：建立自己的品牌非常重要。&lt;br&gt;
If you participate frequently in social media, it’s easy to get sucked into its reality distortion field. When you spend a lot of time in a given online community, being well-known in that community feels equivalent to professional credibility. However, my experience is that few of the most successful folks I know are well-known online, and many of the most successful folks I know don’t create content online at all. Maybe they have an Instagram account, but it focuses on their family and non-professional interests.&lt;br&gt;
如果你经常参与社交媒体，很容易陷入其现实扭曲力场。当你在一个特定的在线社区花费大量时间时，在那个社区中广为人知似乎等同于专业信誉。然而，根据我的经验，我认识的许多最成功的人在线并不广为人知，而我认识的许多最成功的人根本不在线上创作内容。也许他们有一个Instagram账号，但它关注的是他们的家庭和非职业兴趣。&lt;br&gt;
Enough folks find this &lt;strong&gt;counter-intuitive&lt;/strong&gt; that I’ll emphasize this theme a bit. The majority of successful executives I’ve worked with don’t write online. They won’t post on Twitter or Mastodon. They haven’t written a book. They don’t speak at conferences. They don’t have a YouTube channel. They don’t stream on Twitch. In your engineering leadership career, you will at times be immersed in the message that you need to be creating content to be successful, but there’s abundant evidence to the contrary. You absolutely don’t have to do this sort of thing.&lt;br&gt;
足够多的人认为这一点与直觉相悖，因此我将强调这个主题。我与之合作过的大多数成功高管并不在网上写作。他们不会在Twitter或Mastodon上发帖。他们没有写过书。他们不会在会议上演讲。他们没有YouTube频道。他不在Twitch上直播。在你的工程领导生涯中，你有时会沉浸在这样一种信息中，即你需要创造内容才能成功，但有大量证据表明相反。你绝对不必做这种事情。&lt;br&gt;
Similarly, most Engineering organizations spend little time developing their external brand, and are not externally well-known. For every &lt;a href=&quot;https://engineering.fb.com/&quot;&gt;Meta Engineering blog&lt;/a&gt; or &lt;a href=&quot;https://netflixtechblog.com/&quot;&gt;Netflix Engineering blog&lt;/a&gt;, you’ll find hundreds of engineering organizations with limited public visibility around their work. Many of those silent organizations are doing very interesting work, they just don’t spend much time talking about it publicly. You can, without a doubt, be a successful engineering organization without ever doing any external communication to build your brand.&lt;br&gt;
同样，大多数工程组织很少花时间发展他们的外部品牌，也不为外界所熟知。在每一个Meta工程博客或Netflix工程博客之后，你会发现数百个工程组织几乎没有公开可见性。许多这些低调的组织正在做非常有趣的工作，只是他们不花太多时间公开谈论。毫无疑问，你可以在不做任何外部沟通来建立品牌的情况下成为一家成功的工程组织。&lt;/p&gt;</summary>
    
    
    
    <category term="当日所学" scheme="http://yunminitools.cn/categories/%E5%BD%93%E6%97%A5%E6%89%80%E5%AD%A6/"/>
    
    
    <category term="公司文化" scheme="http://yunminitools.cn/tags/%E5%85%AC%E5%8F%B8%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
</feed>

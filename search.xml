<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub Pages 强制使用HTTPS协议访问</title>
    <url>/2023/02/18/Add-Https-1/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>在上一篇文章《<a href="https://www.yunminitools.cn/2023/02/12/Add-Https/">实现自定义域名Github Page网站Https访问</a>》,我们实现了网站的https协议的添加，但有一个小问题，用户依然可以通过http协议访问网站。现在大部分网站都实现了强制跳转https网站的功能，以提高网站安全性，那基于github page的网站如何实现这个功能呢？</p>
<h2 id="设置步骤">设置步骤</h2>
<p>其实只要在github上进行简单的配置就可以实现了，以下是配置过程：</p>
<ol>
<li>在 GitHub 上，导航到站点的仓库，在存储库名称下，单击 “Setting”。<br>
<img src="http://cdn.yunminitools.cn/blog/Https0218-1.png" alt="HTTPS访问1"></li>
<li>在边栏的“Code and automation”部分，单击“Pages”。</li>
</ol>
<div style="width: 40%; margin: 10px">
   <img src="http://cdn.yunminitools.cn/blog/Https0218-2.png">
</div>
3. 在 GitHub Pages 下，选择“Enforce HTTPS”。
![HTTPS访问3](http://cdn.yunminitools.cn/blog/Https0218-3.png)
<p>设置好了以后，再用http访问网站，自动跳到的https的网址，设置成功。</p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
      </tags>
  </entry>
  <entry>
    <title>实现自定义域名Github Page网站Https访问</title>
    <url>/2023/02/12/Add-Https/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>博客搭建好了以后，发现通过自定义域名访问自己的github page时，浏览器提示该网址不安全，没有合格的安全证书，不能通过https(密文传输)访问。有些手机会强制使用https协议访问网站，会导致一些错误，今天尝试解决一下。<br>
参考了 CSDN博主「yucicheung」的<a href="https://blog.csdn.net/yucicheung/article/details/79560027">文章</a></p>
<h2 id="原理">原理</h2>
<h3 id="HTTP与HTTPS">HTTP与HTTPS</h3>
<p>HTTP是明文传输协议，传输内容容易被嗅探和篡改。<br>
而HTTPS，即HTTP over SSL/TLS,是添加了一层SSL(Secure Sockets Layer，安全套接层)，或者是TLS(Transport Layer Security,传输层安全协议)，所以HTTPS就可以视为HTTP和SSL/TLS协议的组合。<br>
HTTPS能做到良好的保密性(防嗅探)，真实性(防篡改)，完整性(防域名劫持和域名欺骗)。</p>
<h3 id="SSL证书">SSL证书</h3>
<p>SSL是TLS的前身，但TLS通常也被标志为SSL。<br>
SSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息(会话秘钥)，服务器收到密文后，用自己的私钥解密。<br>
这个公钥就放在数字证书中。只要证书是可信的，公钥就是可信的。</p>
<p>SSL证书由你的NS(Name Server，域名服务商)颁发，从速度和操作性考虑，我选择了Cloudflare，免费，操作也比较方便。</p>
<span id="more"></span>
<h2 id="操作">操作</h2>
<p>进行以下3步操作，就可以让网站支持https访问。</p>
<h3 id="1-申请SSL证书">1.申请SSL证书</h3>
<ul>
<li>到<a href="https://www.cloudflare.com">Cloudflare官网</a>注册,用邮箱就可以注册成功。</li>
<li>选择免费计划</li>
<li>根据指引点击Add Site，添加你的网站自定义域名，会自动开始扫描DNS解析记录</li>
<li>Cloudflare会选择给我们分配两个NS地址，复制这两个地址，供下一个步骤使用。</li>
</ul>
<h3 id="2-在域名操作后台修改NS地址">2.在域名操作后台修改NS地址</h3>
<ul>
<li>登陆你的域名注册服务商网站，修改域名解析，将NS对应的地址（一般有两个），改为Cloudflare 分配的新地址。</li>
<li>我使用是腾讯云的服务，NS不能直接改，研究了一下，要在选项 “更多” 里选择 “修改DNS服务器“，才能修改。</li>
<li>等待1个小时左右，需要同步新的DNS服务器</li>
</ul>
<h3 id="3-在Cloudflare修改SSL状态">3.在Cloudflare修改SSL状态</h3>
<ul>
<li>回到Cloudflare的管理后台，在Cloudflare上检查自己网站的状态，显示为Active时表示NS更改成功；</li>
<li>在Cloudflare将自己网站的SSL状态改变为Full状态，等待Status变为Active Certificate，通常生效需要十几分钟。</li>
</ul>
<p>以上操作全部完成后，用https访问网站，浏览器就会出现小锁，说明配置成功：<br>
<img src="http://cdn.yunminitools.cn/blog/Https0212.png" alt="HTTPS网站"></p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐网站资源：B端观止</title>
    <url>/2023/03/19/B-design-resource/</url>
    <content><![CDATA[<h2 id="介绍">介绍</h2>
<p>很久以前就注意到了这个网站：<a href="https://www.yuque.com/u1003394/fn574a">B端观止</a>,有很多有关于B端设计的文章，对于产品设计也很有借鉴意义。最近又看了一下，比较可贵的是，一直在更新。推荐查看。</p>
<h2 id="推荐文章">推荐文章</h2>
<ul>
<li><a href="https://www.yuque.com/u1003394/fn574a/21f9947a-55da-498d-b6c1-d56ea5f399ab">权限设计指南</a></li>
<li><a href="https://www.yuque.com/u1003394/fn574a/72a18cdb-2b55-4c35-aeaf-18a5f840700a">低代码开发平台设计初探索</a></li>
<li><a href="https://www.yuque.com/u1003394/fn574a/8af44d16-241e-40f0-a034-25f1ae5d3887">场景理解模糊？看完这篇就够了！</a></li>
</ul>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>UI设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Collaboration Approach of Elite Organizations</title>
    <url>/2023/02/11/Collaboration-Approach/</url>
    <content><![CDATA[<h2 id="Background">Background</h2>
<p>I read a <a href="https://presence.feishu.cn/docs/doccn6VdWfAzbXe4gICEb3oj8CF">note</a> from Max,CEO of Precence, which about collabration. There were a lot of great points that resonated with me. I wanted to highlight that stood out to me.</p>
<h2 id="Outline：">Outline：</h2>
<p><strong>Who makes the decisions?</strong><br>
<strong>How is it done?</strong><br>
<strong>How are they communicated?</strong></p>
<ul>
<li>What are the prerequisites for making decisions?<br>
Highly Aligned, Loosely Coupled</li>
<li>Who makes the decisions?<br>
Informed Captains</li>
<li>How is it done?<br>
Context not Control</li>
<li>Who is responsible for the results？<br>
Freedom and Responsibility</li>
</ul>
<span id="more"></span>
<h3 id="Highly-Aligned-Loosely-Coupled">Highly Aligned, Loosely Coupled</h3>
<p>As companies grow, they often become highly centralized and inflexible. Symptoms include:</p>
<ul>
<li>Senior management is involved in many small decisions</li>
<li>There are numerous cross-departmental buy-in meetings to socialize tactics</li>
<li>Pleasing other internal groups takes precedence over pleasing customers</li>
<li>The organization is <strong>highly coordinated and less prone to error</strong>, but slow and frustrating<br>
How to Avoid it？</li>
</ul>
<ol>
<li>Spend lots of time debating strategy together, and then trust each other to execute on tactics without <strong>prior approvals</strong></li>
<li>If, later, the activities don’t seem right, we have a <strong>candid discussion</strong>.</li>
<li>We discuss generally how we can <strong>do better</strong> in the future.</li>
</ol>
<p>Ultimately, the end goal is to grow the business for bigger impact while increasing flexibility and agility.</p>
<h3 id="Informed-Captains">Informed Captains</h3>
<p>For every significant decision there is a <strong>responsible captain of the ship</strong> who makes a judgment call after sharing and digesting others’ views.</p>
<ul>
<li>We <strong>avoid committees</strong> making decisions because that would slow us down, and diffuse responsibility and accountability.</li>
<li>We <strong>farm for dissent</strong>; dissent is not natural or easy, which is why we make a concerted effort to stimulate it.</li>
<li>Small decisions may be shared just by email, larger ones will merit a memo, usually in an <strong>open shared document</strong>.</li>
<li>We don’t <strong>wait for consensus</strong>, nor do we drive to rapid, uninformed decision making.</li>
<li>As the impact becomes clearer, we reflect on the decision, and see if we could do even better in the future.</li>
</ul>
<h3 id="Context-not-Control">Context not Control</h3>
<ul>
<li>We want employees to be great <strong>independent decision makers</strong>, and to only consult their manager when they are unsure of the right decision.</li>
<li>Each leader’s role is to teach, to <strong>set context</strong>, and to be highly informed of what is actually happening.</li>
<li>The goal of knowing those details is not to change certain small decisions, but to learn how to <strong>adjust context</strong> so more decisions are made well.</li>
<li>We tell people not to seek to please their boss. Instead, seek to serve the business.</li>
</ul>
<h3 id="Freedom-and-Responsibility">Freedom and Responsibility</h3>
<ul>
<li>Our goal is to inspire people more than manage them.</li>
<li>We believe that people thrive on being <strong>trusted</strong>, on <strong>freedom</strong>, and on being able to <strong>make a difference</strong>. So we foster freedom and empowerment wherever we can.</li>
<li>We work to have a company of self-disciplined people who discover and fix issues without being told to do so.</li>
<li>In general, freedom and rapid recovery is better than trying to prevent error.</li>
<li>Our big threat over time is lack of innovation, so we should be relatively error tolerant.</li>
<li>The seduction is that error prevention just sounds so good, even if it is often ineffective.</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>公司文化</tag>
        <tag>团队协作</tag>
      </tags>
  </entry>
  <entry>
    <title>创新型垄断企业的特点</title>
    <url>/2023/03/03/Creative-Monopolies/</url>
    <content><![CDATA[<h2 id="创新型垄断的特点是什么呢？">创新型垄断的特点是什么呢？</h2>
<p>在 Peter Thiel <a href="https://athenarium.com/peter-thiel-creative-monopoly/#durability-and-the-long-game">看来</a>，垄断往往具有四个特征：</p>
<ul>
<li>1️⃣ 专有技术；</li>
<li>2️⃣ 网络效应；</li>
<li>3️⃣ 规模经济；</li>
<li>4️⃣ 品牌。</li>
</ul>
<h3 id="专有技术">专有技术</h3>
<p>公司需要一个优势，使得现有企业和新进入者难以复制或模仿。以谷歌的搜索算法为例，Thiel的经验法则要求技术必须比最接近的替代品“<strong>好10倍</strong>”，才能构成“真正的垄断优势”。</p>
<h3 id="网络效应">网络效应</h3>
<p>网络效应使人们在更多人使用产品或服务时获得更大的价值。Facebook或LinkedIn是典型的例子。当所有朋友或同事都在现有网络上时，很难切换社交网络。</p>
<h3 id="规模经济">规模经济</h3>
<p>当企业的销售和生产增长时，他们的成本每个产品会下降，这就是规模经济。Microsoft等软件公司是常见的例子。由于每次附加软件销售的边际成本非常低，因此它们享受着更高的规模经济。即使年轻的新秀拥有更优秀的产品，由于高成本和价格差异，通常也难以取代具有规模经济的大企业。</p>
<h3 id="品牌">品牌</h3>
<p>强大的品牌可以帮助创造性垄断。但品牌并不仅仅是营销和销售的结果。它需要培养、持续执行和注意细节。正如史蒂夫·乔布斯所说，有效的品牌来自于公司对质量和体验的不懈追求。一旦建立了良好的品牌，就能对创造性垄断的良性循环做出巨大贡献：更高的愿意支付、更低的交易和信息成本、更大的口碑等等。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>投资管理</tag>
      </tags>
  </entry>
  <entry>
    <title>DDD中的上下文映射</title>
    <url>/2023/03/15/DDD-ContextMap/</url>
    <content><![CDATA[<h2 id="什么是上下文映射">什么是上下文映射</h2>
<p>上下文映射，对应的英文单词是Context Map，代表的是领域驱动设计中，多个限界上下文之前的关系。方便设计者和开发者能够一目了然地看到每个限界上下文和其它限界上下文之间的关系，最终的产出可能是一张映射图，或者映射卡片。实际上的限界上下文映射的设计，不只是跟设计决策和技术实现有关，还跟企业文化、组织架构有关。</p>
<h2 id="有哪些上下文映射">有哪些上下文映射</h2>
<h3 id="分离方式">分离方式</h3>
<p>分离方式（separate way），分离方式指的是两个限界上下文没有任何关系，没有关系其实就是一种非常好的设计，因为它们可以独立变化，互相影响。<br>
但在实际的开发过程中，可能两个限界上下文会有一些耦合。如果设计者认为这两个限界上下文解耦的价值远远大于复用的价值（比如分属于两个差异很大的团队），那可以通过引入少量的重复来彻底解耦开来。<br>
<strong>比如</strong>：在电商场景中，支付上下文，就和库存上下文没有任何关系。</p>
<h3 id="客户-供应">客户-供应</h3>
<p>客户-供应（customer/supplier）是我们最中间的一种上下文映射方式。一方提供服务，另一方去调用服务。我们类比水流，上游发生变化可能会影响下游，所以我们把提供服务的一方称为“上游”，使用服务的一方称为“下游”。这与调用关系刚好是相反的。<br>
<strong>比如</strong>：在电商场景中，订单上下文依赖库存上下文，所以库存上下文就是订单上下文的上游。</p>
<h3 id="发布-订阅">发布-订阅</h3>
<p>发布-订阅（publisher/subscriber）也是一种很常见的上下文映射方式，在实际的开发过程中往往是通过消息中间件来实现。<br>
发布-订阅模式源自于设计模式中的“观察者模式”，上下游通过消息去通信，下游注册观察者，上游作为发布者，如果上游发生了变化，会发布一个业务事件，下游收到这个事件后进行后续的操作。<br>
发布-订阅模式与客户-供应模式最大的不同，在于发布-订阅模式，是上游主动发起业务的变化，而不是被动等下游去调用上游。它相较于客户-供应模式而言，耦合程度会低一些。<br>
<strong>比如</strong>：在电商场景中，订单上下文和物流上下文，就可以通过发布-订阅模式来做。订单完成后，发生订单完成事件，物流上下文监听事件开始物流配送。</p>
<span id="more"></span>
<h3 id="开放主机服务和发布语言">开放主机服务和发布语言</h3>
<p>开放主机服务（open host service, OHS），指的是上游提供一些公开的服务，包括它们的通信方式、数据格式等，并且<strong>承诺这些服务不会轻易做出变化</strong>。<br>
发布语言（published language）通常和开放主机服务一起配合使用，主要用于两个限界上下文之间的模型转换。<br>
开放主机服务和客户-供应最大的区别在于，它承诺了服务不会轻易变化。那下游服务就可以不用做专门的防御措施来抵抗上游的变化（也就是下面会介绍的防腐层）。<br>
而发布语言在开放主机服务上，本质上就是开放主机服务定义的协议、request、response、服务名唯一名字等。因为开放服务不可能将上下文内部的领域模型暴露出去，所以会需要对外定义一些数据传输模型（DTO）来提供服务。<br>
<strong>比如</strong>：在电商业务中，财务系统就是一个相对稳定的业务，可以高度抽象为几个原子的财务操作，比如：资金的申请，占用，扣减，核销等。</p>
<h3 id="防腐层">防腐层</h3>
<p>防腐层（anti corruption layer, ACL）是应对上游服务变化的利器。尤其是当下游限界上下文有多个地方依赖某一个上游时，一旦上游服务发生变化，下游服务如果不做防腐措施，就会面临大面积的修改。<br>
如果上游限界上下文存在多个下游时，倘若都需要隔离变化，每个下游都做防腐层成本比较大，可以考虑单独抽一个只有防腐功能的限界上下文，避免代码重复。<br>
<strong>比如</strong>：在电商业务中，可能订单上下文、售后上下文都会涉及到支付功能，如果支付功能是对接了大量的第三方支付，每个上下文自己去做防腐层就会有一些代码重复。那可以把支付上下文单独抽出来做为一个上游的防腐层。在面对“大泥球”一样错综复杂调用关系的老系统中，防腐层就是可以才帮助遗留系统迁移的利器。</p>
<h3 id="遵奉者">遵奉者</h3>
<p>前面也提到了，有时候限界上下文之间关系的设计，还会受到企业文化和团队协作的影响。当上游服务不积极响应下游服务的需求时，会有三种方式来解决：</p>
<ul>
<li>分离方式：下游服务切断上游服务的依赖，自己来实现</li>
<li>防腐层：复用上游的服务，但领域模型由下游团队自己来开发，然后用防腐层实现上下游领域模型之间的转换。</li>
<li>遵奉者：严格遵从上游团队的模型，以消除复杂的模型转换逻辑<br>
遵奉者（conformist）就是一种妥协，当下游团队选择遵奉上游团队设计的模型时，意味着它对上游产生了模型上的强依赖。<br>
<strong>比如</strong>：在电商场景中，财务上下文是一个比较稳定的业务，在电商活动立项的时候，可能需要申请一笔预算，但这笔预算应该是有一个有效期的，也就是活动的起止时间，活动结束后是不能使用预算的。但财务团队拒绝为了活动这个特殊的场景，在他们的上下文内部的领域模型增加“预算有效期”这个字段。<br>
活动上下文可以选择上面的三种方式之一来解决这个问题：</li>
<li>可以自己实现一套财务模型，</li>
<li>复用财务上下文的占用、扣减等服务，防腐层转换为活动上下文内部的带有预算有效期的内部模型；</li>
<li>遵循财务上下文的模型。在其它上下文（比如流量投放上下文）使用预算的时候，再通过通过调用活动上下文去校验活动时间。</li>
</ul>
<h3 id="共享内核">共享内核</h3>
<p>共享内核（Shared Kernel），指的是将一个限界上下文将自己的领域模型暴露出去，给其它的限界上下文使用。共享内核不能像其它的限界上下文那样，自由地更改，但共享内核也会造成耦合。因此我们只可能把那些非常稳定且具有复用价值的领域模型封装到共享内核上下文中。<br>
共享内核通常以库的形式（比如Java的jar包）被其它限界上下文复用，它本身不提供远程服务。所以可以理解为它是一种特殊的进程内通信。<br>
耦合的代价是巨大的，笔者个人不是建议使用共享内核这种模式，除非真的重复的代价远远大于耦合。</p>
<h3 id="合作者">合作者</h3>
<p>合作者（partnership），指的是两个或多个限界上下文彼此依赖，联系紧密。具体表现出来的可能就是循环依赖，两个限界上下文形成了强耦合关系。团队之间的良好协作是好事，但强耦合会带来一系列的问题。要解决这种强耦合，通常有三种方式：</p>
<ul>
<li>合并：既然分不开，说明当时拆分得可能不合理，他们本质上也许可以合并为一个限界上下文。</li>
<li>重新分配：理清楚为什么相互依赖，尝试把一些功能或服务重新分配，尽量减少上下文之间的依赖。</li>
<li>抽取：如果实在不能合又分配不清楚，那可以考虑重新抽取为一个新的限界上下文，然后之前的两个限界上下文去依赖这个新的限界上下文。<br>
如果上述几种方法都不使用当前的团队和场景，那就只能允许合作者模式存在了。需要在限界上下文中特别标识出来，这里存在高耦合，变动会比较容易引发风险。</li>
</ul>
<h2 id="总结">总结</h2>
<p>如果说我们在上下文映射设计时，要尽量做到低耦合，那分离方式、发布-订阅、客户-供应防腐层是比较推荐的模式。<br>
而遵奉者、共享内核、合作者是需要尽量去避免的。避免的方式大多都是重复或者冗余，这个时候就要去衡量是否值得了。<br>
软件设计就是这样，可能没有完美的方案，总是在各方面权衡利弊得失，有所取舍，最终力求得到一个最优的解决方案，这就是软件设计很难的原因，也是它的魅力所在。<br>
任何决策都应该考虑收益和成本，只有收益大于成本，决策才有可能是合理的。<br>
虽然是限界上下文之间的映射，但其实落地下来，咱们不使用领域驱动设计的微服务拆分也可以参考这几种模型，尽量使微服务做到“高内聚，低耦合”。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>领域驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>领域模型的应用</title>
    <url>/2023/03/18/DDD-domain-model-1/</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>领域驱动设计DDD在战术建模（后文简称建模，除非特别说明）上提供了一个元模型体系（如下图），通过这个元模型我们会对战略建模过程中识别出来的问题子域进行抽象，而通过抽象来指导最后的落地实现。<br>
<img src="http://cdn.yunminitools.cn/blog/DDD-model.png" alt="DDD构建的元模型元素脑图"><br>
这里我们谈的战术阶段实际就是这样一个抽象过程。这个抽象过程由于元模型的存在实际是一定程度模式化的。这样的好处是并非只能技术人员参与建模，业务人员经过一定的培训也是完全可以理解的。在带领不少团队实践建模的过程中，业务人员参与战术设计也是我要求的。<br>
由于已经有不少书籍介绍DDD的元模型，这里我们就不再赘述，转而谈谈这个抽象过程中大家经常遇到的一些困惑。这些比较常见的问题可能是DDD元模型未来演进需要解决的，但我们仍然要注意业务问题和架构设计的多样性，不要过度规范，以至于过犹不及。</p>
<span id="more"></span>
<h2 id="业务对象的抽象">业务对象的抽象</h2>
<p>通过对业务问题的子域划分，我们找到了一些关键的业务对象。在开始进行抽象前一个必须的步骤就是“<strong>讲故事</strong>”！<br>
讲什么故事呢？关于这个子域解决的业务问题或者提供的业务能力的故事。既然是故事，就必须有清晰的业务场景和业务对象之间的交互。这件事情看起来是如此自然和简单，然则一个团队里能够站起来有条不紊陈述清楚的却没有几人。读到这里的读者不妨停下来试试，你是否能够把现在你所做的业务在两三分钟内场景化地描述出来？<br>
这么做显然目的是让我们能够比较完整地思考我们所要提炼和抽象的业务对象有哪些。只有当我们能够“讲”清楚业务场景的时候，才应该开始抽象的步骤。对于一个业务对象，我们常见的抽象可以是“实体”（Entity）和“值对象”（Value Object）。<br>
这两个抽象方式在定义上的区别是，实体需要给予一个<strong>唯一标识</strong>，而值对象不需要（可以通过属性集合标识）。当然另外一个经常引用的区别是，实体应该是有一个连续的生命周期的，比如我们在一个订单跟踪领域里抽象订单为一个实体，那么每个订单应该有一个唯一识别号，订单也应该有从下单创建到最后交货完成的生命周期。<br>
显然，如果不增加其它约束条件，值对象的抽象是没有意义的，都用实体不就行了？但如果我们稍微思考一下一个实体的管理成本，比如需要保证生命周期中实体状态的一致性，那么我们就会发现值对象变得很简单很可爱。当一个对象在我们（抽象）的世界里不能改变的时候，一切都变得简单了，这个对象<strong>被创建后只能被引用</strong>，当没有引用时我们可以把它交给垃圾回收自动处理。<br>
随着高并发、分布式系统的普及，实际上我们在对业务对象抽象的<strong>第一步思考是能否用值对象</strong>。如果大家实现的技术架构采用函数范式的语言（类似Closure），那么首先考虑值对象抽象可能就是一个建模原则了。<br>
对象抽象初步完成后，一定要再重复一次之前的故事来审视一下我们的建模。经历这个抽象过程后，参与讨论的每个人都应该发现自己更清晰业务的需求和需要提供的能力了。</p>
<h2 id="聚合的封装">聚合的封装</h2>
<p>DDD元模型中一个核心概念叫“聚合”（Aggregate）。这个从建筑学来的名词非常形象，建筑学上我们翻译为“骨料”，是形成混凝土的重要元素，也是为什么混凝土如此坚固的基础。同理，在DDD建模中，聚合也是我们构建领域模型的基础，并且每个聚合都是内聚性很高的组合。聚合本身完成了我们对骨干业务规则的封装，减小了我们实现过程中出错的可能。<br>
以上面那个订单跟踪领域为例，假设我们允许一个订单下存在多个子订单，而每个子订单也是可以独立配送的，这种情况下我们抽象出“子订单”这个实体。显然订单和子订单存在业务逻辑上的一致性，没有订单的时候不应该创建子订单，更新子订单的时候应该同时“通知”所属的订单。这个时候如果采用把订单和子订单聚合起来的封装就很有必要了。<br>
采用聚合抽象的结果就是访问每个子订单都需要从相关的订单入口（i.e., 订单为聚合根），存取时我们都是以这个聚合为基本单位，即包含了订单和订单下面的所有子订单。显然这样的好处是在订单跟踪这个领域模型里，订单作为一个聚合存在，我们只需要一次性梳理清楚订单和子订单的逻辑关系，就不需要在未来每次引用时都考虑这里面的业务规则了。<br>
<img src="http://cdn.yunminitools.cn/blog/DDD-Aggregate.png" alt="（订单跟踪领域的订单聚合）"><br>
在建模过程中，很多团队并没有努力思考聚合的存在。封装这个在技术实现领域的基本原则在建模时却很少被重视起来。开篇提到在战术建模过程中强调业务领域人员的参与也是为了解决这个问题，聚合的识别实际是针对业务规则的封装，当我们不理解业务规则的时候是无法做出是否封装的判断的。<br>
一言以蔽之，识别聚合是认知潜在核心业务规则的过程，而定义出来的聚合是在大家共识基础上对核心业务规则的封装。</p>
<h2 id="领域服务的定义">领域服务的定义</h2>
<p>在最初的元模型定义里，领域服务让不少人纠结，一个经典的例子是在账户管理领域里对“转账”这个业务行为的抽象。由于转账本身是作用在至少两个账户上的，所以把转账作为一个账户的行为显然是不合适的。那么如果我们把转账名词化抽象成一个实体呢？感觉也是比较别扭，毕竟转账是依附于账户存在的。<br>
这个时候DDD在元模型里提出了服务（Service）这个抽象，转账被抽象为一个服务感觉就顺畅多了。同样道理，在我们上面的订单跟踪领域里，如果跟踪的过程中需要进行短信的通知，一个比较好的建模就是抽象出一个“通知”服务来完成。<br>
我经常会用静态方法来帮助技术人员理解服务的抽象（虽然服务并不一定用静态方法来实现）。服务本身就像一个<strong>静态方法</strong>一样，拥有一定的逻辑但不持有任何的信息，从整个领域来看也不存在不同“版本”的同一个服务。<br>
一个经常困扰大家的问题是对Service这个词语的限定，有的分层架构设计里会出现领域服务（Domain Service）和应用服务（Applicaiton Service）。大多数时候应用服务在领域服务的上层，直接对外部提供接口。如果存在这样的分层，那么领域服务就不应该直接对外，而应该通过应用服务。<br>
举个例子，前面的订单消息通知如果是一个领域服务，在完成订单状态变化时创建通知消息，而最后的通知以短信的方式发给设定的人群，这样就应该有一个相应的应用服务，包含了具体的业务场景处理逻辑。之后也可能有一个邮件通知的应用服务，同样调用了这个通知领域服务，但通过邮件渠道来完成最终的业务场景。<br>
由于微服务架构的流行，每个子领域的粒度已经相当细了，很多时候已经没有这样的领域服务和应用服务的区分了。当然从简单性角度出发这是好事情。在整个建模过程中，服务的抽象往往是最不确定的，也是最值得大家反复斟酌的地方。</p>
<h2 id="Repositories的使用">Repositories的使用</h2>
<p>Repositories这个抽象概念实际可以追溯到Martin Fowler的<a href="https://martinfowler.com/eaaCatalog/queryObject.html">Object Query</a>模式。另外一个相关概念是DAO（<a href="https://en.wikipedia.org/wiki/Data_access_object">Data Access Object</a>），都是用来简化需要存储的数据和对应的业务对象之间的映射关系。不同的是Repositories针对更加粗颗粒度的抽象，在DDD这个方法里我们可以认为映射对象是我们的聚合。针对每个实体在实现时候也可能创造出对应的DAO（比如采用Hibernate这样的ORM框架），但显然在建模过程中不是我们需要关注的。<br>
那么Repositories的抽象为什么是必要的呢？让我们再回到订单跟踪这个例子，通知订单状态发生变化的服务在发出通知前，需要定位到订单的信息（可能包括订单的相关干系人和子订单的信息）。通知作为一个服务是不应该持有具体订单信息的，这个时候我们就需要通过Repositories的抽象来建立对订单这个聚合的查询，即有一个订单的repo，而具体的查询逻辑应该在这个repo中。<br>
这样的抽象在需要存储和查询值对象的时候也是必要的。假设我们分析订单查询这个领域，在这个领域里订单记录显然已经不允许修改了，自然的抽象方式就是值对象。同时一个查询的服务来持有具体的查询逻辑（比如按时间或用户）是合理的。外部应用直接调取了查询服务（接口）并给出规定的参数，我们就需要一个订单记录的repo来持有跟存储相关的查询逻辑。当然这并不是说有一个查询就一定有一个repo与之对应，如果查询的逻辑非常简单，未尝不可以让服务直接针对数据存储实现。记住我们抽象的目标是让建模更简单，抽象过程中应该保持灵活。</p>
<h2 id="限界上下文的意义">限界上下文的意义</h2>
<p>经过最近10多年的演进，我们在如何支撑一个组织的规模化上达成了一些基本的共识。我们知道微服务架构（Microservices）能够帮助我们把成百上千的工程师们组织起来，而小团队的自组织性是至关重要的。我们也逐步就如何能够在技术和业务团队之间明确沟通“架构”这个难题上找到了DDD。那么DDD和微服务架构的关系是什么呢？很多人会提到限界上下文（Bounded Context）。<br>
一个限界上下文封装了一个相对<strong>独立子领域的领域模型和服务</strong>。限界上下文地图描述了各个子领域之间的集成调用关系。这个定义某种意义上和我们的微服务划分不谋而合：以提供业务能力为导向的、自治的、独立部署单元。所以虽然我们不能百分百依据限界上下文划分服务，但限界上下文，或者说是DDD，绝对是我们设计微服务架构的重要方法之一。<br>
如果我们再追溯到DDD的战略设计，我们会发现在问题域上，DDD通过子问题域（subdomain）的划分就已经进行了针对业务能力的分解，而限界上下文在解决方案域中完成了进一步分解。当然我们不能完全认为子问题域和限界上下文有严格意义上的一对一关系，但大多数情况下一个子问题域是会被设计成一个或多个限界上下文的。子域subdomain和限界上下文某种意义上是互相印证的，重点在区分问题域和解决方案域，这是落地DDD最困难的地方，也是判断一个架构师能力进阶的分水岭。</p>
<h2 id="小结">小结</h2>
<p>DDD的建模元素比较简洁，本文中叙述的元模型应该是满足了大多数场景下的建模。在领域驱动的架构设计方面，咱们需要的是“战略上要重视朋友，战术上要简化建模”。希望这句话能够帮助正在实践DDD的团队重新思考自己在战略问题域的投入和重视程度，不要挥舞着战术模型的大锤到处寻找实际不存在的钉子。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>领域驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是维度退化</title>
    <url>/2023/03/14/Degenerate-Dimension/</url>
    <content><![CDATA[<h1>概念：</h1>
<p>维度退化（Degenerate-Dimension,DD）：将维度退化到事实表中，减少事实表和维度表的关联，在维度建模的数据仓库中，有一种维度叫Degenerate Dimension，中文一般翻译为“退化维度”。这种退化维度一般都是事务的编号，如订单编号、发票编号等。这类编号需要保存到事实表中，但是不需要对应的维度表，所以称为退化维度。</p>
<h2 id="特点-举例：">特点/举例：</h2>
<p>退化维度是维度建模领域中的一个非常重要的概念，它对理解维度建模有着非常重要的作用，尤其是对维度建模的入门者。</p>
<p><strong>特点：</strong></p>
<ol>
<li>没有对应的维度表的维度。</li>
<li>存储在事实表中</li>
</ol>
<span id="more"></span>
<p>退化维度经常会和其他一些维度一起组合成事实表的主键。在Kimball提出的维度建模中，事实表应该保存最细粒度的数据。所以对于象销售单这样的事实表来说，需要销售单编号和产品来共同作为主键，而不能用销售日期、商场、产品等用来分析的维度共同作为主键。</p>
<p>退化维度在分析中可以用来做分组使用。它可以将同一个事务中销售的产品集中在一起。因为事实表主键的成员一般都是维度值所组成,但退化维度虽然也属于主键值,但没有单独的维度表,所以叫退化维度。</p>
<p><strong>例子：</strong><br>
维度退化是指对于简单的维度来说，不创建自己的维表，例如，下面的事实表：</p>
<table>
<thead>
<tr>
<th>product_id</th>
<th>time_id</th>
<th>payment_method</th>
<th>customer_id</th>
<th>store_id</th>
<th>item_count</th>
<th>dollars</th>
</tr>
</thead>
<tbody>
<tr>
<td>55</td>
<td>20040106</td>
<td>Credit</td>
<td>123</td>
<td>22</td>
<td>3</td>
<td>$3.54</td>
</tr>
<tr>
<td>78</td>
<td>20040106</td>
<td>Cash</td>
<td>89</td>
<td>22</td>
<td>1</td>
<td>$20.00</td>
</tr>
<tr>
<td>199</td>
<td>20040107</td>
<td>ATM</td>
<td>3</td>
<td>22</td>
<td>2</td>
<td>$2.99</td>
</tr>
<tr>
<td>55</td>
<td>20040106</td>
<td>Cash</td>
<td>122</td>
<td>22</td>
<td>1</td>
<td>$1.18</td>
</tr>
</tbody>
</table>
<p>对于其中的维度支付方式，假设我们创建了一个维表，这个维表几乎是没有意义的。如果单独增加了这样一个维表，那么可能会导致一定的连接成本。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>维度表设计注意事项</title>
    <url>/2023/03/13/Dimension-Table-Design-1/</url>
    <content><![CDATA[<h2 id="1、什么是维度表？">1、什么是维度表？</h2>
<p>维度是维度建模的基础和灵魂。在维度建模中，将度量称为“事实” ， 将环境描述为“维度”。<br>
维度表包含了事实表中指定属性的相关详细信息，最常用的维度表有日期维度、城市维度等。</p>
<p>例如：日期维表：</p>
<table>
<thead>
<tr>
<th>num</th>
<th>字段名</th>
<th>字段中文名</th>
<th>描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>date</td>
<td>日期</td>
<td>日期 yyyMMdd格式</td>
<td>bigint</td>
</tr>
<tr>
<td>2</td>
<td>week</td>
<td>星期，数字型</td>
<td>星期，数字型 0-6</td>
<td>bigint</td>
</tr>
<tr>
<td>3</td>
<td>week_cn</td>
<td>星期中文名</td>
<td>星期中文名 星期一……</td>
<td>string</td>
</tr>
<tr>
<td>4</td>
<td>year_weeks</td>
<td>一年中的第几周</td>
<td>一年中的第几周 1 2 3……</td>
<td>bigint</td>
</tr>
<tr>
<td>5</td>
<td>mon_dt</td>
<td>本周周一日期</td>
<td>本周周一日期</td>
<td>bigint</td>
</tr>
<tr>
<td>6</td>
<td>sun_dt</td>
<td>本周周日日期</td>
<td>本周周日日期</td>
<td>bigint</td>
</tr>
<tr>
<td>7</td>
<td>month</td>
<td>年月</td>
<td>年月，yyyyMM格式</td>
<td>bigint</td>
</tr>
<tr>
<td>8</td>
<td>month_short</td>
<td>月份简写</td>
<td>月份简写，MM格式1~12</td>
<td>bigint</td>
</tr>
<tr>
<td>9</td>
<td>month_cn</td>
<td>月份中文名</td>
<td>月份中文名 一月……</td>
<td>string</td>
</tr>
<tr>
<td>10</td>
<td>quarter</td>
<td>季度</td>
<td>季度，yyyyQ1\2\3\4</td>
<td>string</td>
</tr>
<tr>
<td>11</td>
<td>quarter_short</td>
<td>季度 数字型</td>
<td>季度 数字型 1-4</td>
<td>bigint</td>
</tr>
<tr>
<td>12</td>
<td>quarter_cn</td>
<td>季度中文名</td>
<td>季度中文名 第一季度……</td>
<td>string</td>
</tr>
<tr>
<td>13</td>
<td>year</td>
<td>年份</td>
<td>年份，yyyy格式</td>
<td>bigint</td>
</tr>
</tbody>
</table>
<h2 id="2、维度表设计原则">2、维度表设计原则</h2>
<p>维度的作用一般是查询约束、分类汇总以及排序等，我们在进行维度表设计时，应当提前考虑：</p>
<h3 id="（1）维度属性尽量丰富，为数据使用打下基础">（1）维度属性尽量丰富，为数据使用打下基础</h3>
<p>比如淘宝商品维度有近百个维度属性，为下游的数据统计、分析、探查提供了良好的基础。</p>
<h3 id="（2）给出详实的、富有意义的文字描述">（2）给出详实的、富有意义的文字描述</h3>
<p>属性不应该是编码，而应该是真正的文字。在阿里巴巴维度建模中， 一般是编码和文字同时存在，比如商品维度中的商品 ID 和商品标题、 类目 ID 和 类目名称等。 ID 一 般用于不同表之间的关联，而名称一般用 于报表标签</p>
<h3 id="（3）区分数值型属性和事实">（3）区分数值型属性和事实</h3>
<p>数值型宇段是作为事实还是维度属性，可以参考字段的一般用途。 如果通常用于查询<strong>约束条件或分组统计</strong>，则是作为<strong>维度属性</strong>;如果通常用于<strong>参与度量的计算</strong>， 则是作为<strong>事实</strong>。比如商品价格，可以用于查询约 束条件或统计价格区间 的商品数量，此时是作为维度属性使用的;也可 以用于统计某类目 下商品的平均价格，此时是作为事实使用的。另外， 如果数值型字段是离散值，则作为维度属性存在的可能性较大;如果数 值型宇段是连续值 ，则作为度量存在的可能性较大，但并不绝对，需要 同时参考宇段的具体用途。</p>
<h3 id="（4）沉淀出通用的维度属性，为建立一致性维度做好铺垫">（4）沉淀出通用的维度属性，为建立一致性维度做好铺垫</h3>
<p>有些维度属性获取需要进行比较复杂的逻辑处理，有些需要通过多表关联得到，或者通过单表 的不同宇段混合处理得到，或者通过对单表 的某个字段进行解析得到。此时，需要将尽可能多的通用的维度属性进 行沉淀。一方 面，可以提高下游使用的方便性，减少复杂度;另一方面，可以避免下游使用解析时由于各自逻辑不同而导致口径不 一致。</p>
<h3 id="（5）退化维度（DegenerateDimension）">（5）退化维度（DegenerateDimension）</h3>
<p>在维度类型中，有一种重要的维度称作为退化维度。这种维度指的是直接把一些简单的维度放在事实表中。退化维度是维度建模领域中的一个非常重要的概念，它对理解维度建模有着非常重要的作用，退化维度一般在分析中可以用来做分组使用。</p>
<h3 id="（6）缓慢变化维（Slowly-Changing-Dimensions）">（6）缓慢变化维（Slowly Changing Dimensions）</h3>
<p>维度的属性并不是始终不变的，它会随着时间的流逝发生缓慢的变化，这种随时间发生变化的维度我们一般称之为缓慢变化维（SCD），<strong>缓慢变化维一般使用代理健作为维度表的主健。</strong></p>
<p><strong>缓慢变化维的三种处理方式：</strong></p>
<p>① <strong>TYPE1</strong> 直接覆盖原值<br>
适用于：不看历史数据，简单粗暴</p>
<p>② <strong>TYPE2</strong> 拉链表<br>
需要在维度行再增加三列：有效日期、截止日期、行标识（可选）。<br>
在旧的一行数据增加关链时间（end_date），新的一行数据增加<strong>开链时间</strong>和**关链时间，**多条数据加起来是一个完整的时间周期。</p>
<p>③ <strong>TYPE3</strong> 增加属性列<br>
保留老字段，把新增的属性放到新的字段。比如 department 变成 old_department and new_department.</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>防御性：如何理解企业护城河</title>
    <url>/2023/02/27/Enterprise-security-perimeter/</url>
    <content><![CDATA[<h2 id="为什么需要护城河">为什么需要护城河</h2>
<p>企业成功主导一个山头，成为行业领导品牌，要随时审视竞争环境的变化，快速转变战略节奏，从进攻战切换为防御战。</p>
<p>商业竞争是无情的，竞争的环境总是在变化，行业领先者需要不断审视和调整战略，从进攻转为防御。新进入的企业总是企图挑战行业领导者的地位，从不同角度对其发起攻击。为了保持领先地位，领导品牌需要采取各种手段来封杀竞争对手。</p>
<p>领导品牌必须高筑墙，广积粮，构筑防御工事，在优势位置上持续巩固自身的竞争壁垒，不断拓宽自身的护城河，以抵御竞争对手的攻击，有护城河的企业才能享受行业长期增长带来的红利。</p>
<h2 id="五种护城河">五种护城河</h2>
<pre class="mermaid">graph LR
A(企业护城河)-->B3(无形资产门槛)
B3-->B31(专利)
B3-->B32(创新)
B3-->B33(监管)
B3-->B34(标准)
A-->B2(转换成本高)
B2-->B21(依托大公司的相互依存)
B2-->B22(复杂的程序转换)
B2-->B23(数据绑定生态)
A-->B4(网络效应形成)
B4-->B41(双边网络-平台)
B4-->B42(三边网络-渠道)
B4-->B43(通讯网络)
B4-->B44(内容网络)
B4-->B45(本地网络)
A-->B1(成本优势)
B1-->B11(规模优势)
B1-->B13(经验优势)
B1-->B14(模式优势)
A-->B5(用户心智)
B5-->B51(品牌)
B5-->B52(特性)</pre>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>投资管理</tag>
      </tags>
  </entry>
  <entry>
    <title>事实表设计注意事项</title>
    <url>/2023/03/09/Fact-Table-Design-1/</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>在设计事实表的时候，和设计普通的数据库有一些差异，有以下一些注意事项：</p>
<pre class="mermaid">graph LR
B(包含完整业务事实)---A(事实表设计)
C(去除多余业务事实)---A
D(分解不可加事实)---A
E(先声明粒度)---A
A---F(避免不同粒度)
A---G(保持单位一致)
A---H(处理null 值)
A---I(退化维度)</pre>
<span id="more"></span>
<h2 id="原则-1：尽可能包含所有与业务过程相关的事实">原则 1：尽可能包含所有与业务过程相关的事实</h2>
<p>分析哪些事实与业务过程相关，是设计过程中非常重要的关注点；在事实表中，尽量包含所有与业务过程相关的事实，即使存在冗余，由于事实通常是数字型，存储开销不会太大；</p>
<h2 id="原则-2：只选择与业务过程相关的事实">原则 2：只选择与业务过程相关的事实</h2>
<p>订单的下单这个业务过程，事实表中不应该存在支付金额这个表示支付业务过程的事实；</p>
<h2 id="原则-3：分解不可加性事实为可加的组件">原则 3：分解不可加性事实为可加的组件</h2>
<p>如，订单的优惠率，应分解为订单原价金额与订单优惠金额两个事实存储在事实表中；</p>
<h2 id="原则-4：在选择维度和事实之前必须先声明粒度">原则 4：在选择维度和事实之前必须先声明粒度</h2>
<p>粒度用于确定事实表中一行所表示业务的细节层次，决定了维度模型的扩展性；<br>
每个维度和事实必须与所定义的粒度保持一致；<br>
设计事实表时，粒度定义越细越好，一般从最低级别的原子粒度开始；<br>
因为原子粒度提供了最大限度的灵活性，可以支持无法预期的各种细节层次的用户需求；</p>
<h2 id="原则-5：在同一个事实表中不能有多种不同粒度的事实">原则 5：在同一个事实表中不能有多种不同粒度的事实</h2>
<p>疑问：怎么判断不同事实的粒度是否相同？<br>
粒度为票一级；（实际业务中，一个订单可以同时支付多张票）<br>
票支付金额和票折扣金额，两个事实的粒度为 “票级”，与定义的粒度一致；<br>
订单支付金额和订单票数，两个事实的粒度为 “订单级”，属于上一层订单级数据，与 “票级” 事实表的粒度不一致，且不能进行汇总；<br>
如果，以订单金额和订单票数这两个维度汇总总金额和总票数，会造成大量的重复计算；</p>
<h2 id="原则-6：事实的单位要保持一致">原则 6：事实的单位要保持一致</h2>
<p>如，订单金额、订单优惠金额、订单运费这 3 个事实，应该采用统一的计量单位，统一为元或者分，以方便使用；</p>
<h2 id="原则-7：对事实的-null-值要处理">原则 7：对事实的 null 值要处理</h2>
<p>原因：在数据库中，null 值对常用数字型字段的 SQL 过滤条件都不生效；如，大于、小于、等于、大于或等于、小于或等于；<br>
处理：用 0 代替 null ；</p>
<h2 id="原则-8：使用退化维度提高事实表的易用性">原则 8：使用退化维度提高事实表的易用性</h2>
<p>事实表中存储各种类型的常用维度信息，较少下游用户使用时关联多个表的操作；通过<a href="https://www.yunminitools.cn/2023/03/14/Degenerate-Dimension/">退化维度</a>，可以实现对事实表的过滤查询、控制聚合层次、排序数据、定义主从关系等；</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是好的商业模式？</title>
    <url>/2023/02/26/Good-Business-Models/</url>
    <content><![CDATA[<h2 id="商业模式是什么？">商业模式是什么？</h2>
<p>商业模式是指企业如何创造和捕获价值，并将其转化为盈利的方式。一个好的商业模式应该能够产生持续的现金流和利润，并且能够与竞争对手区分开来。</p>
<p>例如，苹果公司的商业模式是基于高端硬件销售和软件服务的组合。他们通过不断创新和设计出高品质的产品，吸引了一大批忠实的用户，并提供了与之相配套的软件和服务。这种商业模式的成功在于他们不断创新和提供高品质产品的能力，以及对消费者需求的深刻理解。</p>
<p>另一个例子是Amazon的商业模式，它是基于在线销售和物流的组合。Amazon通过建立强大的物流网络和广泛的产品选择，吸引了大量的消费者和卖家。同时，他们提供了高水平的客户体验和优质的客户服务，让他们赢得了消费者的信任和忠诚度，从而成为全球最大的在线零售商之一。</p>
<h2 id="什么是好的商业模式">什么是好的商业模式</h2>
<p>好的商业模式很简单，就是利润和净现金流很好，竞争对手哪怕花很长时间也很难抢。“<strong>时间是平庸公司的敌人，是伟大公司的朋友</strong>”，所以说伟大的公司时间越长越可怕。</p>
<p>商业模式经常要看的东西是：</p>
<ul>
<li>护城河是否长期坚固。<strong>（<strong>产品的</strong>差异化的持续性，<strong>包括</strong>企业文化）</strong></li>
<li>长期毛利率是否合理。（产品的<strong>可替代性</strong>）</li>
<li>长期的净现金流是否满意。（长期而言其实就是净利润）</li>
</ul>
<p>判断是否是好的商业模式，可以从两个角度看：<strong>“定价权”<strong>和</strong>“防御性”</strong>。简而言之，只有拥有定价权、别人打价格战己方可以稳坐钓鱼台的，才是好的商业模式。有很高的防御性护城河，当竞争对手进入市场才不会太容易，这个和定价权也是有一定关联性的。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>投资管理</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo中插入Mermaid图表</title>
    <url>/2023/02/22/Hexo-Mermaid-1/</url>
    <content><![CDATA[<h2 id="Mermaid是什么？">Mermaid是什么？</h2>
<p>Mermaid是一个基于JavaScript的流程图、序列图、甘特图等图表生成工具。使用Mermaid可以方便地在Markdown文档中嵌入各种图表，而无需手动绘制或使用其他辅助工具。</p>
<p>Mermaid支持多种流程图、序列图、甘特图等图表类型，使用简单明了的语法来描述图表元素之间的关系。在插入Mermaid图表之前，需要在Hexo中安装相应的插件，如前面所述。</p>
<p>Mermaid提供了丰富的语法来绘制各种类型的图表，具体语法可以参考官方文档。在Hexo中插入Mermaid图表时，只需要在Markdown文档中使用Mermaid代码块即可。</p>
<h2 id="如何在Hexo中插入Mermaid图表">如何在Hexo中插入Mermaid图表</h2>
<h3 id="安装Mermaid插件">安装Mermaid插件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件">修改配置文件</h3>
<p>在hexo的<code>_config.yml</code>文件（根目录的并非主题的）中，添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mermaid chart</span><br><span class="line">mermaid: ## mermaid url https://github.com/knsv/mermaid</span><br><span class="line">  enable: true  # default true</span><br><span class="line">  version: &quot;7.1.2&quot; # default v7.1.2</span><br><span class="line">  options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span><br><span class="line">    #startOnload: true  // default true</span><br></pre></td></tr></table></figure>
<h3 id="修改主题">修改主题</h3>
<p>根据主题不同，修改方式不同，我使用的ayer主题，只要修改主题目录<code>themes/ayer</code>下的<code>_config.yml</code>文件，将Enable选项改为<strong>true</strong>即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn: https://cdn.staticfile.org/mermaid/8.14.0/mermaid.min.js</span><br><span class="line">  theme: forest</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="Mermaid图表演示">Mermaid图表演示</h2>
<p>下面是mermaid的图表描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(面试)--&gt;B(笔试)</span><br><span class="line">A--&gt;C(面试)</span><br><span class="line">C--&gt;C1(数据结构与算法*)</span><br><span class="line">C--&gt;C2(计算机网络)</span><br><span class="line">C--&gt;C3(操作系统Linux)</span><br><span class="line">B--&gt;B1(数据结构与算法*)</span><br></pre></td></tr></table></figure>
<p>会生成以下图表：</p>
<pre class="mermaid">graph LR
A(面试)-->B(笔试)
A-->C(面试)
C-->C1(数据结构与算法*)
C-->C2(计算机网络)
C-->C3(操作系统Linux)
B-->B1(数据结构与算法*)</pre>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
        <tag>Mermaid</tag>
        <tag>Theme_ayer</tag>
      </tags>
  </entry>
  <entry>
    <title>解决ayer主题下Mermaid图表背景太暗的问题</title>
    <url>/2023/02/23/Hexo-Mermaid-2/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>配好Mermaid图表后，我发现自动生成的图表背景太暗，和线的颜色混在了一起。刚开始我的思路是换Mermaid图表主题颜色，后来发现换主题只能修改线和图形的样式，不能改背景。经过研究网页CSS结构，我发现主要由于这个主题所有的代码块的背景是深色的，导致Mermaid图表的背景也是继承下来了。</p>
<h2 id="解决方案">解决方案</h2>
<p>找到原因，解决方案也就呼之欲出了，找到主题路径：<code>themes/ayer/layout/_partial/</code> 下，修改 <code>head.ejs</code> 文件，找到 <code>&lt;!-- mermaid --&gt;</code> 标签，在<code>&lt;style&gt;&lt;/style&gt;</code> 代码块内添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pre.mermaid &#123;</span><br><span class="line">   background: #dedede;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>含义为指定mermaid的div的背景，#dedede为背景色，比较浅。<br>
清缓存，重新发布，搞定。</p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
        <tag>Theme_ayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中使用emoji表情</title>
    <url>/2023/02/26/Hexo-Use-emoji/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>上一篇文章我想在文章中使用emoj来丰富页面，发现Hexo默认的markdown渲染引擎不支持将Github emoji渲染到静态的html页面。我们需要换一个支持emoji的引擎，再增加一个emoji插件即可。</p>
<h2 id="Markdown-引擎安装">Markdown 引擎安装</h2>
<p>命令行如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-**it** --save</span><br><span class="line">npm install markdown-**it**-emoji --save</span><br></pre></td></tr></table></figure>
<h2 id="Markdown-引擎配置">Markdown 引擎配置</h2>
<p>完成插件安装后还需要修改Hexo站点配置文件<code>_config.yml</code>(不是主题配置)</p>
<p>加入下列代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## markdown 渲染引擎配置，默认是hexo-renderer-marked，这个插件渲染速度更快，且有新特性</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">¶</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意<code>render:</code>下的<code>html:</code>配置项，它的作用是控制<code>Markdown</code>渲染引擎是否转移文档中出现的<code>html</code>标签，默认为<code>false</code>，这里要设置为<code>true</code>，否则会导致<code>&lt;!--more--&gt;</code>渲染失败。</p>
<p><code>plugins:</code>中的最后一项<code>- markdown-it-emoji</code>是手动添加的，官方Github Wiki中给出的配置不包含这一项，其他配置参照的Github Wiki中的默认配置。</p>
<h2 id="使用方法">使用方法</h2>
<p>输入对应的emoji编码</p>
<p>例如：输入笑脸对应的emoji编码<code>:smile:</code>就可以得到😄</p>
<h2 id="emoji编码合集"><strong><strong>emoji编码合集</strong></strong></h2>
<p>可以查阅这篇<a href="https://dognew0126.github.io/2022/05/22/Hexo%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/#emoji%E7%BC%96%E7%A0%81%E5%90%88%E9%9B%86">文章</a>。</p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客插入图片后如何控制图片大小和样式</title>
    <url>/2023/02/19/Hexo-image-1/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>在用Hexo写博客时，发现有时原始图片过大，直接引用不太美观，需要缩小一下，研究了一下，Hexo md语法并不支持这样的功能，我在网上找到了方法，纪录一下。</p>
<h2 id="方法">方法</h2>
<p>有两个方法：</p>
<ol>
<li>使用img 标记来控制图片显示大小：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;/images/xxx.png&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用div 加上css 来控制图片的显示和大小：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;width: 40%; margin: 10px&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;/images/xxx.png“&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>其中<code>/images/xxx.png</code>为图片实际地址。经过试用，我选择了方法2，原因是用css可以控制的属性更多，后续也可以做统一的美化修改。关于CSS样式的说明，可以参考<a href="https://www.w3school.com.cn/css/css3_images.asp">这篇文章</a></p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客安装PlantUML</title>
    <url>/2023/03/11/Hexo-plantuml-1/</url>
    <content><![CDATA[<p>Hexo 静态 blog 支持 markdown 绘制 plantuml。</p>
<h2 id="安装步骤">安装步骤</h2>
<ul>
<li>进入hexo 目录</li>
<li>安装 <code>npm install --save hexo-tag-plantuml</code></li>
</ul>
<h2 id="使用示例">使用示例</h2>
<p>简单时序图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">Alice -&gt; &quot;Bob()&quot; : Hello</span><br><span class="line">&quot;Bob()&quot; -&gt; &quot;This is very\nlong&quot; as Long</span><br><span class="line">&#x27; You can also declare:</span><br><span class="line">&#x27; &quot;Bob()&quot; -&gt; Long as &quot;This is very\nlong&quot;</span><br><span class="line">Long --&gt; &quot;Bob()&quot; : ok</span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果：</p>
<img  src=http://www.plantuml.com/plantuml/svg/Syp9J4vLqBLJK7BAJzBGL5AmKl18pSd9vuBnGL8X6Pd52a1KbbfK6PENav-NhgIGMApW0sHmgIj4vfSg92VcAIJc5EShfAGcvoGMfLe1nP5C0Aa4wS1c4XTOKXV52VdP0000>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做好需求评审？</title>
    <url>/2023/03/01/How-to-Requirements-Review/</url>
    <content><![CDATA[<p>作为一个产品经理，准备需求评审是产品设计开发的一个重要环节。那么如何做好需求评审呢？</p>
<h2 id="一、原型准备阶段"><strong>一、原型准备阶段</strong></h2>
<h3 id="1-需求细节尽量描述详细">(1) 需求细节尽量描述详细</h3>
<p>详细即逻辑清晰、无遗漏、页面整洁、表达清晰等。最好能做到不清楚需求的人，通过文档也能理解要完成的任务。</p>
<h3 id="2-对以前有的功能的修改要说明功能差异">(2) 对以前有的功能的修改要说明功能差异</h3>
<p>如果是该功能迭代优化，那涉及其相关的需求要在会上说明：原先功能整套流程是怎么样的，现在针对哪个环节进行升级迭代。</p>
<h3 id="3-设计功能或者逻辑一定要有根据有思考">(3) 设计功能或者逻辑一定要有根据有思考</h3>
<p>记住我们设计的每个功能都要有理有据，不能想当然，不能做需求的搬运工。</p>
<h3 id="4-设计过程中遇到技术难点、技术知识盲区，一定要和技术去沟通">(4) 设计过程中遇到技术难点、技术知识盲区，一定要和技术去沟通</h3>
<p>当你遇到把握不准自家技术能不能实现自己功能，可以找到技术负责人把自己的想法提前说给他听，提前一起讨论实现过程，或许让他们评估且及时制定方案。</p>
<span id="more"></span>
<h2 id="二、评审前的准备"><strong>二、评审前的准备</strong></h2>
<h3 id="1-产品内部评审">(1) 产品内部评审</h3>
<p>如果是比较大的项目，可能是多个产品经理一起负责，那么最好是产品部门内部开一个小评审会，把大致逻辑、功能统统讲一遍，看看有没有遗留的，有没有补充的。</p>
<h3 id="2-业务部门会议">(2) 业务部门会议</h3>
<p>还是属于比较大的项目，跟业务部门开会主要目的是让他们了解产品部门做的东西是不是符合他们预期效果。</p>
<h3 id="3-提前把原型或者需求文档发给技术人员">(3) 提前把原型或者需求文档发给技术人员</h3>
<p>在需求评审会议的前一天，可以把原型和需求文档发送给参会的相关人员，目的是让他们提前熟悉需求。若有问题及时收集，在需求评审之前向提问者解答，能大大提高需求评审会的效率。</p>
<h2 id="三、评审中-控制节奏、应万变"><strong>三、评审中 - 控制节奏、应万变</strong></h2>
<p>需求评审的过程，本质上就是沟通，用语言配合原型文档的方式，将需求、逻辑清晰的表述出来，然后和所有人基本达成一致意见。</p>
<p>注意不要忽略以下方面：</p>
<h3 id="1-项目背景">(1)项目背景</h3>
<p>需求来自哪个人或者哪个部门等，他们遇到什么问题了？【现状】，针对这些问题，采用什么方案或者增加什么功能，来解决他们遇到的问题或提升什么体验及指标等；【预期】</p>
<h3 id="2-收集合理的意见、想法">(2) 收集合理的意见、想法</h3>
<p>针对于这种意见，可能会给我们后续迭代有一定的启发，但是不一定要放在本次需求内。需求总有优先级排序的，应当先解决眼前紧急的问题。</p>
<h3 id="3-不要过度纠结细节讨论">(3) 不要过度纠结细节讨论</h3>
<p>细节是永远都扣不完的，如果在会议上陷入细节的讨论，不仅浪费大家时间，而且对于产品经理来说也会非常痛苦。这时候你可以制止那人，让你把这块功能讲完，再让大家提问题，实在有人要聊细节，建议在会后和他单独好好讨论，产品经理始终要记住把控会议时间和节奏。</p>
<h3 id="4-发现逻辑漏洞后及时修正">(4) 发现逻辑漏洞后及时修正</h3>
<p>如果对业务了解不够深入，思考不周全，很容易被其他人发现逻辑或功能遗漏等问题，这对产品经理来说是属于比较严重的评审事故了，错了就要挨打。一般不是较大的逻辑问题，评审会议还是能继续开下去的，会后应当及时补充内容。</p>
<h3 id="5-不要把会评审成技术方案讨论会议">(5) 不要把会评审成技术方案讨论会议</h3>
<p>每当遇到某些功能，对于技术来说实现比较有挑战性或者很感兴趣的时候，他们就会不知不觉的开始讨论用什么方法实现好，该如何如何去操作，留下一脸懵逼的你。这时候你要打住他们，如果逻辑没问题，怎么实现是技术的问题，不允许在会议上占用太多时间来讨论具体方案。</p>
<h3 id="6-如果技术说“这个实现不了”">(6) 如果技术说“这个实现不了”</h3>
<p>技术们这样的回应时，想必大家也遇到过，不要慌，之所以这么回应，绝大情况下是背后有一个巨大的开发量，或者是时间紧张。</p>
<p>首先呢，我们要确认技术们的难点在哪里，是需要更多的开发时间呢，还是真的有一定开发难度。综合各方面因素，考虑是否值得这样的投入？如果真的是一个很重要的功能点，可以说清楚该功能对整个业务的重要性，就算开发复杂、难度高，需要较多的时间也可以接受。如果还是争论不止，那把这问题暂时放一下，会后叫上技术负责人和该项目开发人员一起在讨论，切记也不能占用要多时间。</p>
<h2 id="四、评审后-查缺补漏、保持跟进"><strong>四、评审后 - 查缺补漏、保持跟进</strong></h2>
<p>需求评审会议结果后，我们还不能如释重负，还有事情要做呢:</p>
<h3 id="1-及时修改问题">(1) 及时修改问题</h3>
<h3 id="2-督促排期，跟踪进度">(2) 督促排期，跟踪进度</h3>
<h3 id="3-需求评审复盘">(3) 需求评审复盘</h3>
<h2 id="五、总结"><strong>五、总结</strong></h2>
<p>在会议中，产品经理被针对是很正常的情况，做好充分的准备，才能应对各种突发事件。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>产品管理</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做可用性测试？-1</title>
    <url>/2023/03/02/How-to-do-usability-test-1/</url>
    <content><![CDATA[<h2 id="什么是可用性？"><strong><strong>什么是可用性？</strong></strong></h2>
<p>一个产品可以被特定的用户在特定的场景中，有效、高效并且满意得达成特定目标的程度。<br>
包括：</p>
<ul>
<li><strong>可学习性</strong>：初次接触这个设计时，用户完成基本任务的难易程度？</li>
<li><strong>效率</strong>：用户了解了设计之后，能多快地完成任务？</li>
<li><strong>可记忆性</strong>：当用户一段时间没有使用产品后，是否能轻松地恢复到之前的熟练程度？</li>
<li><strong>错误</strong>：用户犯了多少错误，错误严重程度如何？用户能否从错误中轻易地复原？</li>
<li><strong>满意度</strong>：用户对产品的主观满意度，这个设计让用户感觉如何？</li>
</ul>
<h2 id="什么是可用性测试？"><strong><strong>什么是可用性测试？</strong></strong></h2>
<p>可用性测试就是通过观察用户使用产品完成典型任务，发现产品中存在的效率与满意度相关问题的方法。</p>
<span id="more"></span>
<h2 id="可用性测试方法"><strong>可用性测试方法</strong></h2>
<p>产品可用性测试方法分为分析法和实验法。</p>
<h3 id="1-分析法"><strong>1. 分析法</strong></h3>
<p>让产品可用性工程师及用户界面设计师等专家，基于自身专业知识和经验进行评价的一种方法。</p>
<p>例如：<br>
<strong>认知走查</strong>：设计师模拟用户在使用产品过程中的每个操作步骤所遇到的问题，检查用户的任务目标和心理认知是否可以顺利执行下一步操作？</p>
<p>针对每步操作提出四个问题：</p>
<ol>
<li>用户是否知道自己要做什么？</li>
<li>用户在探索用户界面的过程中是否注意到操作方法？</li>
<li>用户是否把自己的目的和正确的操作方法关联到一起？</li>
<li>用户能否从系统的反馈中判断出任务是否在顺利进行？<br>
通过回答每个操作步骤的问题，就能发现可用性问题。</li>
</ol>
<h3 id="2-实验法"><strong><strong>2. 实验法</strong></strong></h3>
<p>收集真实的用户使用数据，分析后发现可用性问题。</p>
<p>常见的实验法包括但不限于：</p>
<ul>
<li><strong>卡片分类</strong>：通常用于测试分类或导航结构，让用户将一组写有信息的卡片分组，并为其分配名称或标签。卡片分类有助于了解用户如何看待内容以及他们如何组织信息，从而决定在每个页面放置什么，对于页面或功能分类很有帮助。</li>
<li><strong>操作测试</strong>：由一个或多个观察者在诸如会议室的固定环境中运行，或者与小团体或个人进行。要求用户完成一组任务，观察者可以随时与他们交互以提出问题或进一步探究。</li>
<li><strong>A / B测试</strong>：为网站或应用程序的界面或流程制作两个（A/B）或多个（A/B/n）版本，在同一时间维度，分别让组成成分相同（相似）的访客群组随机的访问这些版本，收集各群组的用户体验数据和业务数据，最后分析评估出最好版本正式采用。</li>
<li><strong>走廊测试</strong>：使用随机的人来测试网站，而不是那些在测试网站方面训练有素和经验丰富的人。这种方法对于在开发过程中首次测试新网站特别有效。</li>
<li><strong>纸张原型测试</strong>：创建一个粗糙的，甚至是手绘的界面图形以用作设计的原型。让用户通过原型来执行任务，该方法能以极低的成本在编码完成之前对设计进行测试。</li>
<li><strong>问卷调查</strong>：问卷的优势在于可以收集结构化的数据，且价格低廉，不需要检测设备，结果反映了用户的意见。</li>
</ul>
<h2 id="总结：">总结：</h2>
<p>分析法与实验法的主要区别在于：是否有用户参与其中？分析法的参与者是具备可用性知识的设计师与工程师；而实验法的参与者是目标用户或小白用户。从某种程度而言，分析法和实验法是一种互补的关系。<br>
一般，在设计用户测试时，先在可用性检查阶段通过分析法去排查可用性问题，把排查出的问题按重要程度排序，然后在可用性测试阶段通过用户测试去重点观察和验证。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>产品管理</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现系统解耦</title>
    <url>/2023/03/17/How-to-system-decoupling/</url>
    <content><![CDATA[<h2 id="为什么要解耦">为什么要解耦</h2>
<p>在软件开发领域，<strong>解耦</strong>这个词相信大家都不陌生。在面向对象的语境下，我们会应用<a href="https://insights.thoughtworks.cn/understand-solid-principles/">SOLID原则</a>来构建高内聚低耦合的应用，实现模块间的解耦；在复杂业务系统分析和建模时，会通过DDD的战略和战术设计帮助划分领域并实现分布式系统中服务的解耦；当我们在组织大型敏捷开发团队协同工作时，通过组建自治团队来减少摩擦，从而实现团队级别的解耦。</p>
<p>可以看到解耦无处不在，并且以此为目的投入，大家都会觉得是无比的政治正确，因为实现了解耦，我们的系统和应用就能更快速的扩展和演进，我们的团队就能更顺畅的合作并能更加快速的实现业务价值。</p>
<p>但是，当我们暂时抛开将得到的种种好处，思考要如何去实现它时，却发现解耦这个词表达的意义过于抽象和模糊，它既没有描述最终的状态也没有提供实现的方法。那当我们谈解耦的时候，具体内容是什么呢？</p>
<p>从字面上理解的所谓耦合，通常是指<strong>两个或两个以上的物体或者体系之间相互作用彼此影响</strong>，对应到软件研发的以上场景，我们可以转换成是指<strong>两个或两个以上的模块/系统/团队之间相互作用彼此影响</strong>。</p>
<p>在软件需要解决的业务问题越来复杂的今天，单个的系统或者团队很难在不依赖外部的情况下去实现业务目标，所以我理解的<strong>解耦</strong>并不是要消除耦合(彼此的作用和影响/依赖)，而是指我们应该如何通过一定的方式和规则，来设计和管理以上提到的多个元素之间的依赖，降低耦合程度来使整个系统有序顺畅的运转。</p>
<p>本文将从服务间上下游的思维来讨论如何在系统架构演进过程中，持续的保持服务间的松耦合，实现解耦的目标。</p>
<span id="more"></span>
<h2 id="上下游思维定义">上下游思维定义</h2>
<p>关于服务的上下游的定义，在DDD建模方法中，在确定了限界上下文（bounded context）后通过在上下文映射（context mapping）中使用上下游来表示上下文依赖的方向，其确定的依据是下游需要了解上游的领域知识实现业务，反之则不会。引申的含义就是上游的业务能力可以不用关心下游业务的存在，下游业务的开展依赖于上游提供的业务能力。下图是限界上下文映射的一个例子：</p>
<p><img src="https://insights.thoughtworks.cn/wp-content/uploads/2022/08/Picture1-3.png" alt="例子"></p>
<p>当我们基于以上的限界上下文设计领域模型并落地时，理想的情况是一个限界上下文对应一个应用服务。参考限界上下文的上下游关系，我把上下游思维定义为：<strong>上游服务不受下游服务的业务能力和可用性影响，反之则相反</strong>。我们会发现服务间的上下游关系比限界上下文中领域知识的上下游关系更复杂，而且上下游关系也会随着集成方式的不同而变化。</p>
<h2 id="基于上下游思维的耦合级别">基于上下游思维的耦合级别</h2>
<p>基于服务上下游的思维，我把服务间依赖按以下维度进行耦合度分级：</p>
<ul>
<li><strong>Level4</strong>: 领域知识互为上下游，业务可用性互为上下游</li>
<li><strong>Level3</strong>: 领域知识互为上下游, 业务可用性为单向上下游</li>
<li><strong>Level2</strong>: 领域知识为单向上下游，业务可用性互为上下游</li>
<li><strong>Level1</strong>: 领域知识为单向上下游，业务可用性为单向上下游</li>
</ul>
<p>由于松耦合的业务模型利于松耦合的架构设计和业务的演进，同时松耦合的架构也利于组建松耦合的团队结构。业务模型作为松耦合设计的基础，以上的级别依据于这个思路定义的。</p>
<p>一种常见的<strong>Level4</strong>级别的情况是处于伙伴关系的上下文。比如订单服务与派送服务之间通过同步API的方式进行通信，用户订单下单成功，通知派送服务，派送服务完成，更新订单状态。两个服务通过API进行集成，服务需要相互知道对方的部分领域知识来完成API的调用以实现功能，同时业务的可用性互相关联，一方服务不可用，导致整个业务的中断。</p>
<p>如果希望耦合度向<strong>level3</strong>演进，不希望服务的可用性产生直接的依赖，我们通常会通过引入消息中间件来进行解耦，服务间通过消息的方式进行集成，由于某些原因，它们都按照对方的领域模型定义的消息结构进行通信。那么这种情况下，服务间的领域知识相互耦合，业务可用性与具体的服务解耦，与消息中间件的可用性耦合，我们需要关注如何提高消息中间件的可用性来保障业务的高可用。</p>
<p><strong>Level2</strong>级别的耦合度是建立在清晰的领域限界上下文边界基础上的，在上面包含的订单服务和派送服务的业务中，派送服务作为上游在完成派送进行订单更新这个业务时，它将派送更新的内容发送至订单服务，订单服务再解析派送更新内容并更新关联的订单状态。那么在通过API的方式进行集成时，它们就处于领域知识的单向上下游和业务可用性互为上下游的状态。具体构建服务时，根据团队的组织结构和话语权的大小，又可以通过不同的方式来进行服务的集成。上游服务通常使用<a href="http://ddd.fed.wiki.org/open-host-service.html">Open Host Service</a>(OHS) / Published Language(PL)来提供业务能力，下游服务通过遵循上游的领域模型或者通过防腐层（Anti Cruption Layer - ACL）来完成领域模型的转换。处于这个级别耦合度的上下游服务在开放主机接口不变的情况下可以独立的进行迭代更新，否则需要通知下游服务评估影响并同步进行变更。</p>
<p>接下来可以更近一步，我们通常会通过引入消息中间件来对服务可用性依赖进行解耦来达到<strong>Level1</strong>的级别。处在这一级别的服务之间，由于有明确的上下文边界和依赖关系，消息的结构也是上游系统来定义和维护的。那么如何基于业务场景来设计消息结构、集成规则，以及支持兼容性的消息格式更新方式是这一级别需要关注的问题。</p>
<p>四种耦合级别中，从高到低对团队的业务建模和技术能力要求越来越高，也随着耦合度的减轻对新业务的适应能力越来越强。</p>
<h2 id="通过耦合级别来做出架构上的权衡">通过耦合级别来做出架构上的权衡</h2>
<p>那么基于上述耦合级别的区分，如何在设计架构时进行取舍呢？</p>
<p>对于处在<strong>level4</strong>级别的系统，如果服务都在团队的职责范围内，在保证高可用的前提下，在业务需求变化不频繁的情况下，它暂时可以工作。如果系统由不同的团队维护，或者需求变更频繁的情况下，需要对业务模型进行优化，通过定义清楚的上下游关系以达到<strong>level2</strong>级别以增强架构的适应性。</p>
<p>对于处在<strong>level3</strong>级别的系统，由于领域知识的耦合，服务都需要有其它领域的知识来完成自己的业务能力，随着服务的增多很容易退化成网状的依赖，通常新的业务变更需要同时修改多个服务，异步的集成方式也增加了扩展和维护的难度。处在这一层级的系统，优先级还是通过优化业务模型，定义清楚的上下游关系，至于是否需要使用异步的方式集成，需要综合权衡业务的实时性和一致性要求来进行权衡是过度到<strong>level2</strong>还是<strong>level1</strong>。</p>
<p>对于处在<strong>level2</strong>级别的系统，由于系统的上下游关系相对清晰，重点可以放在采用合适的方式来完成上下游系统的集成上以实现。一般上游系统通过OHS/PL在保证发布语言不变化的情况下，可以独立的进行迭代更新；下游系统是通过跟随或者添加防腐层来屏蔽上游业务模型变化带来的影响，取决于业务模型变化的频繁程度和添加新一层的成本。通常在绿地项目中，由于能从零开始进行业务建模和组建开发团队，在统一业务语言和明确上下游团队遵从关系的基础上，采用新的服务构建技术和实践，在上下游服务间同时使用OHS/PL和ACL会比较好的隔离相互之间的影响。上游服务专注于领域能力的迭代并通过OHS/PL来发布功能，下游服务通过ACL来隔离上游变化对自身领域模型的影响，同时也可以按需来使用上游提供的新的功能。</p>
<p>对于处在<strong>level1</strong>级别的系统，在业务和技术上都具备了松耦合的基础，但是此时需要警惕一种新的依赖产生。由于上游系统在消息格式的设计时没有按照使用场景来设计，或者消息格式不能很好的在向前兼容的情况下进行更新，这带来的后果是上游系统会成为下游新增业务的强依赖，因为任何的新需求可能需要上游系统定义新的消息格式来支持，上游系统会成为响应变化的瓶颈。如果服务在不同的团队中进行维护，那么带来的后果就是团队间的冲突。在这个级别的依赖关系中，合理的消息模式以及兼容性设计是迭代演进的关键。</p>
<p>消息集成通常分为两种风格Event Notification和Event-carried State Transfer,具体又可扩展为以下几种模式：</p>
<ol>
<li>消息体包含领域事件发生后领域模型的最新状态和变更内容</li>
<li>消息体包含领域事件发生后领域模型的最新状态</li>
<li>消息体包含领域事件发生后领域模型的变更内容</li>
<li>消息体只包含领域事件发生后领域模型的标识，需要消费者按需通过API来获取相关信息</li>
</ol>
<h2 id="最后">最后</h2>
<p>以上是对于分布式系统中关于服务解耦的一些思考，希望上下游的思维能够在做设计和系统开发时给大家提供对照参考，帮助我们实现松耦合的目标，同时也有助于减小团队之间的依赖和摩擦。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>领域驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>图标设计素材网址收集</title>
    <url>/2023/03/16/Icon-design-materials/</url>
    <content><![CDATA[<h2 id="图标素材网站">图标素材网站</h2>
<h3 id="Bootstrap-官方图标库"><strong><strong>Bootstrap 官方图标库</strong></strong></h3>
<p>网址：<a href="https://icons.bootcss.com/">icons.bootcss.com</a><br>
<img src="http://cdn.yunminitools.cn/blog/icons.bootcss.com-%E6%88%AA%E5%9B%BE.png" alt="http://cdn.yunminitools.cn/blog/icons.bootcss.com-截图.png"></p>
<span id="more"></span>
<h3 id="Ikonate"><strong>Ikonate</strong></h3>
<p>网址：<a href="https://ikonate.com/">https://ikonate.com/</a><br>
<img src="http://cdn.yunminitools.cn/blog/ikonate.com-%E6%88%AA%E5%9B%BE.png" alt="http://cdn.yunminitools.cn/blog/ikonate.com-截图.png"></p>
<h3 id="ionic-io"><a href="http://ionic.io">ionic.io</a></h3>
<p>网址：<a href="https://ionic.io/ionicons">https://ionic.io/ionicons</a><br>
<img src="http://cdn.yunminitools.cn/blog/ionic.io-%E6%88%AA%E5%9B%BE.png" alt="http://cdn.yunminitools.cn/blog/ionic.io-截图.png"></p>
<h3 id="Healthicons-org"><a href="http://Healthicons.org">Healthicons.org</a></h3>
<p>网址：<a href="https://healthicons.org/">https://healthicons.org/</a><br>
<img src="http://cdn.yunminitools.cn/blog/www.healthicons.org-%E6%88%AA%E5%9B%BE.png" alt="http://cdn.yunminitools.cn/blog/www.healthicons.org-截图.png"></p>
<h3 id="Remixicon">Remixicon</h3>
<p>网址：<a href="https://www.remixicon.com/">https://www.remixicon.com/</a><br>
<img src="http://cdn.yunminitools.cn/blog/www.remixicon.com-%E6%88%AA%E5%9B%BE.png" alt="http://cdn.yunminitools.cn/blog/www.remixicon.com-截图.png"></p>
<h3 id="Reshot">Reshot</h3>
<p>网址：<a href="https://www.reshot.com/free-svg-icons/">https://www.reshot.com/free-svg-icons/</a><br>
<img src="http://cdn.yunminitools.cn/blog/www.reshot.com-%E6%88%AA%E5%9B%BE.png" alt="http://cdn.yunminitools.cn/blog/www.reshot.com-截图.png"></p>
<h3 id="Shareicon-net"><a href="http://Shareicon.net">Shareicon.net</a></h3>
<p>网址：<a href="https://www.shareicon.net/">https://www.shareicon.net</a><br>
<img src="http://cdn.yunminitools.cn/blog/www.shareicon.net-%E6%88%AA%E5%9B%BE.png" alt="http://cdn.yunminitools.cn/blog/www.shareicon.net-截图.png"></p>
<h3 id="Svgrepo-com"><a href="http://Svgrepo.com">Svgrepo.com</a></h3>
<p>网址：<a href="https://www.svgrepo.com/">https://www.svgrepo.com/</a><br>
<img src="http://cdn.yunminitools.cn/blog/www.svgrepo.com-%E6%88%AA%E5%9B%BE.PNG" alt="http://cdn.yunminitools.cn/blog/www.svgrepo.com-截图.PNG"></p>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>UI设计</tag>
      </tags>
  </entry>
  <entry>
    <title>知识管理之收集灵感</title>
    <url>/2023/02/23/KM-gather-ideas/</url>
    <content><![CDATA[<h2 id="来源">来源</h2>
<p>来自于小报童的<a href="https://xiaobot.net/p/card?refer=d71223b1-9994-4950-b872-ea0a9371fd06">知识资产专栏</a>，做一些整理。</p>
<h2 id="知识管理循环">知识管理循环</h2>
<p>知识管理应该是一个循环：</p>
<pre class="mermaid">graph LR
A(卡片收集)-->B(卡片组织)
B-->C(应用卡片)
C-->D(维护卡片)
D-->A</pre>
<p>这一篇主要讲一下收集。</p>
<span id="more"></span>
<h2 id="如何收集灵感">如何收集灵感</h2>
<p>做到以下3个方面：</p>
<h3 id="1-留出富裕时间">1.留出富裕时间</h3>
<p>在繁忙的工作生活中，留出时间来做这个事情，而不是想起来再做，以下是一些技巧，此外，还可以参考时间管理的一些书籍：</p>
<h4 id="学会说不，保护时间">学会说不，保护时间</h4>
<p>尝试思考「立即说是」后马上就去执行，如果感觉到痛苦，那么这个选项就应该选「不」。</p>
<h4 id="固定时间，持续投资">固定时间，持续投资</h4>
<p>我们想积累自己的知识资产时，应该划出一块固定的时间来做知识的积累。</p>
<h4 id="好奇驱动，乐在其中">好奇驱动，乐在其中</h4>
<p>想要捕捉到自己的灵感和想法，一个关键的技巧在于，由问题来驱动，但不着急立即获得答案。在找到答案的过程中积累知识。</p>
<h3 id="2-用不同角度观察">2.用不同角度观察</h3>
<ul>
<li>跳出问题本身，看看周边和上下游，往往能得到不同的思考</li>
<li>看看其他地方行业或领域中的事物，尝试将其和自己在思考的事情进行结合，或许就会有了新的灵感值得记录</li>
<li>许多时候我们对一些事物过于熟悉，就会忽略掉其中的细节。当我们跃入其中仔细观察时，往往就能发现许多不合理的地方，也就有了值得记录的思考</li>
</ul>
<h3 id="3-在日常生活中捕捉">3.在日常生活中捕捉</h3>
<h4 id="自己做事时">自己做事时</h4>
<p>记录：</p>
<ul>
<li>解决问题的步骤</li>
<li>事实结果</li>
<li>自身状态和情绪</li>
<li>决策过程和结论</li>
</ul>
<h4 id="和他人交流时">和他人交流时</h4>
<p>记录：</p>
<ul>
<li>他在关注什么问题</li>
<li>他在做什么尝试</li>
<li>他的学习方向</li>
</ul>
<h4 id="自己学习时">自己学习时</h4>
<p>记录：</p>
<ul>
<li>全新视角</li>
<li>具体建议</li>
<li>感触思考</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
      </tags>
  </entry>
  <entry>
    <title>知识管理之记录知识</title>
    <url>/2023/02/24/KM-write-down/</url>
    <content><![CDATA[<h2 id="记录原则">记录原则</h2>
<p>记录知识有很多目的，但在知识管理里，记录的原则是，把今天的知识传递给未来的自己，让他可以快速掌握你今天学到的东西。</p>
<p>为什么这么说呢？因为原来我们记笔记，往往没想清楚自己是为什么记笔记。就会出现以下一些现象：</p>
<ul>
<li>笔记比较零散，没有体系，记了再也没看过</li>
<li>一些重要内容即使做了整理和标记，时间长了也很难记清楚<strong>当时关注的重点是什么</strong>，大概率找到笔记还要重新熟悉原始资料后才知道它有没有用</li>
<li>随着时间的积累，很可能已经忘了当时对这篇文章的理解以及收藏它的初衷</li>
</ul>
<p>未来我做的笔记，有着一个明确的读者，甚至是唯一读者，即未来的我。我写的每一条笔记，都是为了「未来的我」在需要时能更方便地查阅和调用。这样，写的笔记的好坏也很容易判断，即是否对未来的自己有帮助。</p>
<h2 id="记录方法">记录方法</h2>
<h3 id="记录打破思维惯性的想法">记录打破思维惯性的想法</h3>
<p>也就是说，当你听到这个想法，和你通常认为的完全不同，这个时候，需要尽快记录下来，然后仔细思考这个想法的来源，合理性及如何与自己认知进行整合。在这个过程中，不要被 <strong>自尊心，懒惰，安全感</strong> 等天然的反应支配，接纳新知识。以下这些场景都可能会有可能得到这样的想法：</p>
<ul>
<li><strong>反直觉的观点或事实</strong></li>
<li><strong>负面的观点</strong></li>
<li><strong>改变解读过去经验的视角</strong></li>
<li><strong>能把复杂东西简化的视角</strong></li>
<li><strong>意料之外但情理之中的视角</strong></li>
</ul>
<h3 id="用自己的话写">用自己的话写</h3>
<p>只有用自己的话来写，才能在写的过程中引起思考，然后将知识内化为自己的。大量复制别人的观点，并不能使自己得到提高，时间一长，就完全忘记了。</p>
<p>但我们刚开始接触到一个新的领域时，可能没有办法一下子有自己的想法，我的实际是，先试图用自己的话重复同样的意思，然后加上一些自己想到的案例，再想想是否有反面的例子，试着做一些推理。</p>
<p>不用担心做不好，记住是为自己来记录，只要坚持做，在过程中反复推敲，会让理解加深，最终掌握知识。</p>
<h3 id="精炼知识点">精炼知识点</h3>
<p>为了未来的自己能快速得到知识的要点，我们需要在理解内容的基础中做精炼。方法是：</p>
<ul>
<li>先理解知识的结构，从结构中提取要点</li>
<li>反复删除，减少冗余</li>
<li>隐藏细节，保留出处</li>
<li>将大的内容拆成原子化内容</li>
</ul>
<h3 id="定期整理和归纳">定期整理和归纳</h3>
<p>定期整理知识，继续做知识的归纳/精炼，同时找到知识点之间的关系，建立网状知识，同时提炼关键字和标签，方便未来的自己查。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
      </tags>
  </entry>
  <entry>
    <title>知识管理相关-知识管理误区</title>
    <url>/2023/02/07/Knowledge-Management-1/</url>
    <content><![CDATA[<h2 id="来源">来源</h2>
<p>来自于小报童的<a href="https://xiaobot.net/p/card?refer=d71223b1-9994-4950-b872-ea0a9371fd06">知识资产专栏</a>，做一些整理：</p>
<h2 id="知识管理概念">知识管理概念</h2>
<p>管理的本质是“提高效率和效益”， 知识管理可以简单的理解为帮助我们更高效的获取/组织/有效利用知识的一套流程。<br>
我的理解应该包括以下几个方面：</p>
<ul>
<li>收集（从有效途径收集知识）</li>
<li>处理（将零散的知识连接起来）</li>
<li>输出（从知识网络中提取知识，写作或行动）</li>
</ul>
<h2 id="主要误区">主要误区</h2>
<ol>
<li>信息成瘾</li>
<li>收集癖</li>
<li>知识不成体系</li>
<li>只追新，不回顾</li>
<li>迷信工具</li>
<li>输出不只是写文章</li>
</ol>
<h2 id="1-信息成瘾">1.信息成瘾</h2>
<p>简单来说，获取新信息可以让我们大脑产生多巴胺，形成一种类似于抽烟喝酒一样的成瘾行为。成瘾一样不断获取信息而不去消化，对我们的大脑并无益处。</p>
<p>因此，理解了这个误区，我们在获取信息的时候就要对获取的信息的时间/质量和数量进行控制，控制总消耗量。</p>
<p>总之，需要我们把自己<strong>从被动获取信息中解放出来，主动寻找自己需要的信息</strong>，避免FOMO。</p>
<h2 id="2-收集癖">2.收集癖</h2>
<p>我们喜欢囤积信息，还在低速网络时代，我就经常挂机下载各种学习资料。后来网速快了，我也是Verycd的常客，我囤积过光盘/课程/网盘，资料一大堆。潜意识里认为我收集了它，以后就可以看，但往往大部分时间这些资源都是积灰的，N年也不会去看。</p>
<p>因为收藏行为<strong>门槛低，可衡量，虚假进步</strong>，给人带来愉悦感，但也要清醒的意识到，收藏信息并不代表知道信息/理解信息，并不能让我们得到更多知识，而是成为了<strong>信息的备份者</strong>。</p>
<p>所以，在面对海量信息时，正确的做法是：</p>
<ul>
<li>用自己的话记录，留下原文链接。（<strong>存储与提取负相关</strong>）</li>
<li>为消化信息留出时间，在学习更多知识前，先确保已经收藏的知识已经掌握。</li>
</ul>
<h2 id="3-知识不成体系">3.知识不成体系</h2>
<p>在误区1我们知道，不能海量的收集信息，那样基本就会被信息淹没。必须主动收集对自己有用的信息。<br>
那什么是对自己有用的信息呢？<br>
总的来说，应该有两类信息是有用的：</p>
<ol>
<li>
<p>专业领域，主要是指对日常工作学习有帮助，做错了自己要承担责任的事情，比如本职工作，或者投资等。在这些领域，我们需要持续不断的精进，持续积累，才能有所收获。比如我的专业领域有 产品设计/需求风险/数据分析/营销与推广/行为经济学…</p>
</li>
<li>
<p>兴趣，自己持续感兴趣，但对别人没影响,别人也不在乎的事情。比如说对我来说，历史/博弈论/智能硬件等，都是我持续感心情的东西，但及时一段时间没有关注学习，也没有什么问题，积累这些知识可以令人愉悦，但并非是最高优先级的。</p>
</li>
</ol>
<p>当然，专业领域和兴趣可以有交集，但大多数人往往是分裂的，我们需要：<br>
<strong>面对内心需要，寻找自己的北极星，构筑独特知识体系</strong></p>
<h2 id="4-只追新，不回顾">4.只追新，不回顾</h2>
<p>岁月是最大的小偷。缺少回顾会让我们的知识资产价值，会随着时间流逝而消逝。并且，当我们从记忆中回顾并使用某些信息时，可能会出现新的信息：它可能是一个问题的答案、附加信息，甚至仅仅是确认我们所检索的信息是正确的。</p>
<p>我理解回顾有两个作用：</p>
<ol>
<li>通过对知识的反复调用和使用，加深对知识的理解和记忆</li>
<li>通过回顾建立知识点的关联，通过知识网络来形成牢固的概念并有可能的产生新信息</li>
</ol>
<p><strong>为回顾留出专门时间</strong></p>
<h2 id="5-迷信工具">5.迷信工具</h2>
<p>我们都会迷信使用了一个超级牛的工具后，就可以得到完整的知识管理体验。事实证明这是根本不可能的，随着技术发展，永远有新的工具产生，但我们好像依然没有很好的管理知识。</p>
<p>那是因为，<strong>我们可能没有想清楚我们需要什么样的工具</strong>。 我们希望通过研究工具来逃避现实，因为学习了最新的知识管理工具，我们似乎变为了“更好的自己”，但真是这样的吗？</p>
<p>在建立真正的知识管理流程前，工具都是无用的。<br>
<strong>先建立自己的流程，再关注工具本身是否匹配</strong></p>
<h2 id="6-输出不只是写文章">6.输出不只是写文章</h2>
<p>将输出简单的理解为写文章或整理好资料，因为有了“输出”作为明确的目标，输入会有选择性，吸收会更有效，<strong>以输入倒逼输出</strong></p>
<p>但这样的理解是片面的，我们做知识管理不应该只是为了做写手，做自媒体。但这样的做法回避了一个问题：如何有效的吸收知识并实践使用。如果只是说，时间长了并没有说服力，自己总结的知识由于缺乏实践，很有可能也是错的。</p>
<p>所以，<strong>输出不仅仅是写文章，而是影响现实世界</strong><br>
比如：</p>
<ul>
<li>用来作为工作中决策思考的演练</li>
<li>用来作为未来决策复盘的依据</li>
</ul>
<p>同时，在实践中丰富和迭代自己的知识体系。</p>
<p>专栏中的内容比较丰富，这只是我的一点理解，欢迎大家自己订阅：小报童的<a href="https://xiaobot.net/p/card?refer=d71223b1-9994-4950-b872-ea0a9371fd06">知识资产专栏</a></p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
      </tags>
  </entry>
  <entry>
    <title>有了这个网站，Linux命令就不需要到处搜索了</title>
    <url>/2023/02/17/Linux-Command-1/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>与服务器打交道，免不了和Linux命令打交道，虽然常用的都会，但遇上一些特殊情况，就需要查手册，在系统里查太麻烦，网上搜索效率比较低，今天看到一个<a href="https://github.com/jaywcjlove/linux-command">github项目</a>解决了这个问题，分享纪录一下。</p>
<h2 id="演示">演示</h2>
<p>可以用短地址：<a href="https://git.io/linux">https://git.io/linux</a> 访问网站：<br>
<img src="http://cdn.yunminitools.cn/blog/Linux0217-1.png" alt="演示1"></p>
<span id="more"></span>
<p>输入命令，查询：<br>
<img src="http://cdn.yunminitools.cn/blog/Linux0217-2.png" alt="演示2"></p>
<p>选择需要查询命令：<br>
<img src="http://cdn.yunminitools.cn/blog/Linux0217-3.png" alt="演示3"></p>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Midjourney 极简入门（1）</title>
    <url>/2023/02/09/Midjourney-Getting-Started-1/</url>
    <content><![CDATA[<h2 id="背景介绍">背景介绍</h2>
<p>Midjourney可以算是一款AI绘图工具，只要輸入你想到的文字，就通过AI生成图片，化抽象为具体，成品很美，感觉可以替代插画师的部分工作了。</p>
<h2 id="使用心得">使用心得</h2>
<p>Midjourney 注册比较简单，这里就略过了，重点讲一下它的prompt，也就是提升词。<br>
Midjourney 的 prompt 的结构可以拆分成三个基础组成部分：</p>
<ol>
<li>
<p>内容描述：就是主体内容，表达我们到底想画什么。是骡子是马，是猴子是兔。他们是什么形象、穿着什么衣服、在干什么，等等。</p>
</li>
<li>
<p>风格描述：包括曾经讲过的艺术家、画笔风格、艺术风格等等，甚至包括打光、视角、拍照相机的牌子等等。</p>
</li>
<li>
<p>属性描述：最基本的图片属性，比如尺寸、使用的 Midjourney 版本。</p>
</li>
</ol>
<p>这次重点讲一下 属性相关：</p>
<h3 id="版本号-v-1-2-3-4">版本号 --v 1/2/3/4</h3>
<p>默认都用 v4 即可，效果是最好，也比较写实。但在画不同艺术风格的图片时，用一下 v2、v3 画抽象的风格，可能会有帮助。</p>
<h3 id="扩幅相关-upscale">扩幅相关 --upscale</h3>
<p>upscale 是把 4 in 1 的 demo 图片扩大篇幅成为更高清的图片。默认的扩幅一般就能用了。<br>
还有一个特殊的指令：<br>
–upbeta 增加更多额外的细节，图像像素大小也会翻一倍</p>
<h3 id="负面提示词-no">负面提示词 --no</h3>
<p>不要出现什么， 比如 no people，不要出现人。</p>
<h3 id="质量-q-25-5-1-2">质量 --q .25/.5/1/2</h3>
<p>图片渲染时间，默认是 1。如果用更短的时间，消耗的额度更少，图片效果可能略差；反之亦然。</p>
<h3 id="图片比例-ar-2-3-3-2">图片比例 --ar 2:3/3:2</h3>
<p>v4 版本只支持三种比例：<br>
默认的 1:1，2:3 和 3:2 需要指定： --ar 2:3  --ar 3:2</p>
<h3 id="动漫风格-niji">动漫风格 --niji</h3>
<p>动漫风格</p>
<h3 id="更多相关的属性描述词">更多相关的属性描述词</h3>
<p>可以参考<a href="https://docs.midjourney.com/docs/parameter-list">官方手册</a></p>
<p>下面是几个例子：</p>
<span id="more"></span>
<p>bear --niji<br>
<img src="http://cdn.yunminitools.cn/blog/Midjourney0209_bear_niji.png" alt="Midjourney例子1"></p>
<p>cyberpunk david --niji<br>
<img src="http://cdn.yunminitools.cn/blog/Midjourney0209_cyberpunk_david.png" alt="Midjourney例子2"></p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
        <tag>绘画</tag>
      </tags>
  </entry>
  <entry>
    <title>Midjourney 提示词(prompt)分析（1）</title>
    <url>/2023/02/16/Midjourney-prompt-1/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>画好一个AI画，从分析一个成功的图片提示词(prompt), 今天看到一个还不错的图片:<br>
<img src="http://cdn.yunminitools.cn/blog/Midjourney0216-1.png" alt="AI画图1"><br>
提示词(prompt)：<br>
A hypsolebias fish jumping out of a pond, trying to catch a bug in the air. The pond is surrounded by tall grass and a few trees, with the sun setting in the background. The fish is caught mid-jump, with its mouth wide open and eyes focused on the bug. The atmosphere is playful and peaceful. Digital artwork with a cartoonish style, using warm and pastel colors to evoke the sunset’s warmth. --ar 16:9 --niji</p>
<h2 id="分析">分析</h2>
<p>翻译和归类：<br>
一条 Hypsolebias鱼（画面主体） 跳出池塘（主体动作），试图在空中捉住一只虫子（主体动作），池塘周围是高高的草丛和几棵树（环境描写），夕阳在背景中落下（环境描写），这只鱼在跳跃时被捕捉到（细节描写），嘴巴张得很大（细节描写），眼睛专注于虫子（细节描写），整幅画的氛围是欢快和平静的（氛围描写），卡通风格绘制的数字艺术作品（艺术风格），使用温暖和柔和的色彩来唤起日落的温暖感（光线描写）</p>
<p>可以看到，一个好的提升词还是有规律可循的。</p>
<span id="more"></span>
<h2 id="依葫芦画瓢">依葫芦画瓢</h2>
<p>我修改了一下，去掉了一些细节描写，看看结果如何。<br>
提示词(prompt)：<br>
a hypsolebias fish jumping out of sea. The pond is surrounded by tall grass and a few trees, with the sun setting in the background，The atmosphere is playful and peaceful. Digital artwork with a cartoonish style, using warm and pastel colors to evoke the sunset’s warmth   --ar 16:9 --niji</p>
<p>结果还不错：<br>
<img src="http://cdn.yunminitools.cn/blog/Midjourney0216-2.png" alt="AI画图2"></p>
<p>但好像没有原图好看，看来还是要多试试才行。</p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
        <tag>绘画</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是网络效应？</title>
    <url>/2023/02/28/Network-Effects/</url>
    <content><![CDATA[<h2 id="网络效应的特点">网络效应的特点</h2>
<p>有网络效应的伟大产品有什么共同之处？<br>
网络效应的最大价值在于<strong>获客</strong>。任何公司最重要的任务之一都是获客。没有用户和收入，公司就会倒闭。而网络效应和“病毒传播”是用户增长的两个关键战略。<br>
对于一般公司，随着市场饱和，<strong>CAC</strong> （用户获取成本）会进一步上升。而对于拥有网络效应的公司来说，情况刚好相反，随着网络的不断延展，所有参与者都能受益，<strong>CAC</strong> 保持不变，甚至可能会下降。</p>
<h2 id="网络效应的类型">网络效应的类型</h2>
<p>总的来看，网络效应可以分为以下五种（每一种都有长处和短处），它们是：</p>
<h3 id="1-双边网络（平台）">1.<strong>双边网络（平台）</strong></h3>
<p>这是一种最明显的网络效应。本质上是<strong>交易平台：</strong><br>
有人想卖东西，有人想买东西，平台围绕人类的需求和欲望而出现。</p>
<p><strong>优势</strong>：</p>
<blockquote>
<p>① 达到临界规模之后容易<strong>自行正向增长</strong>。</p>
<p>② 垄断带来了<strong>定价权</strong>，于是可以抽取更多佣金。</p>
<p>③ 一旦建立，<strong>维护和运营成本低</strong>（除非像 Amazon 一样，做物流）。</p>
<p>④ 估值倍数很高。</p>
</blockquote>
<p><strong>劣势</strong>：</p>
<blockquote>
<p>① 一开始很难获得客户/用户。</p>
<p>② 需要实现供求的动态平衡。</p>
<p>③ 很烧钱。</p>
<p>④ 收入增长往往比较滞后</p>
</blockquote>
<span id="more"></span>
<h3 id="2-三边网络（渠道）">2.<strong>三边网络（渠道）</strong></h3>
<p>三边网络是指产品通过渠道从卖家到买家，即：<br>
<strong>卖家</strong>→<strong>渠道</strong>→<strong>买家</strong><br>
这里渠道可能是经销商，可能是商超或者分销商。</p>
<p><strong>优势</strong>：</p>
<blockquote>
<p>① 外包采购意味着<strong>资本支出少</strong>。</p>
<p>② 具备<strong>快速扩大</strong>销售网络的能力。</p>
<p>③ 一旦建立，<strong>维护和运营成本低</strong>。</p>
<p>④ 更<strong>专注</strong>于核心产品。</p>
</blockquote>
<p><strong>劣势</strong>：</p>
<blockquote>
<p>① 销售<strong>周期长</strong>。</p>
<p>② <strong>较低</strong>的利润。</p>
<p>③ 和终端客户的联系<strong>不够紧密</strong>。</p>
<p>⑤ <strong>更依赖</strong>合作伙伴，因此风险更大。</p>
</blockquote>
<h3 id="3-通讯网络"><strong>3.通讯网络</strong></h3>
<p>即社交软件，社交是网络效应最真实的表现形式之一。每多一个新用户，社交网络的价值都会上升。而通讯网络的关键在于邀请所有朋友尽快加入 。<br>
鉴于这些特点，社交网络是一个赢家通吃的行业。这也证明了高估值的合理性。而且，在赢家通吃的市场中，用户可以呈指数性的增长。</p>
<p><strong>优势</strong>：</p>
<blockquote>
<p>① 随着用户加入，获得<strong>病毒式增长</strong>。</p>
<p>② 用户增速随着数量增加而增加。</p>
<p>③ 一旦建立，维护和运营<strong>成本低</strong>。</p>
<p>④ 离开网络的<strong>转换成本很高</strong>。</p>
</blockquote>
<p><strong>劣势</strong>：</p>
<blockquote>
<p>① 需要<strong>大量的资金</strong>才能开始。</p>
<p>② 需要<strong>很好的口碑</strong>促进分享。</p>
<p>③ 变现<strong>慢</strong>。</p>
<p>④ 网络规模太大时难以控制<strong>社交噪音</strong>。</p>
</blockquote>
<h3 id="4-内容网络"><strong>4.内容网络</strong></h3>
<p>即内容产生平台，比如头条/抖音/Netflix。内容对眼球和注意力的作用就像平台型公司对商业活动的作用一样，有很强的聚拢效应。而且，内容一直是一项有利可图的业务。<br>
内容网络的在某种程度是和平台相反的。因为平台最初靠聚集买家赚钱，而内容网络则需要创作者。</p>
<p><strong>优势</strong>：</p>
<blockquote>
<p>① 内容的<strong>生命力长</strong>，而且可以持续提供。</p>
<p>② 价值（和潜在客户数）随着内容数量、质量的增加而增加。</p>
<p>③ 创作者愿意主动为你做早期的营销工作。</p>
<p>④ 创作者离开当前网络的<strong>转换成本比较高</strong>。</p>
<p>⑤ 内容的<strong>边际成本为零</strong>。</p>
</blockquote>
<p><strong>劣势</strong>：</p>
<blockquote>
<p>① 找到好的<strong>创作者很难/贵</strong>。</p>
<p>② 需要<strong>很好的口碑</strong>促进分享。</p>
<p>③ 没有直接的变现方式。</p>
<p>④ 有时候无法控制<strong>内容噪音</strong>。</p>
</blockquote>
<h3 id="5-本地网络"><strong>5.本地网络</strong></h3>
<p>最后一种拥有网络效应的公司类型是，本地网络。满足人基本需求的业务就是本地网络，比如外卖/叫车/理发等等。本地网络的问题在于它们的天花板有点低，它们往往不是风投公司想要投的。但是，如果能在全国范围内建立多家利用本地网络效应的公司，依然具有吸引力。比如：美团/滴滴等</p>
<p><strong>优势</strong>：</p>
<blockquote>
<p>① 容易直接和早期客户进行沟通。</p>
<p>② 品牌在很大程度上可以帮助营销。</p>
<p>③ 容易引发人们的情感依赖。</p>
<p>④ 每新入驻一座城市，商业防御能力都会得到加强。</p>
</blockquote>
<p><strong>劣势</strong>：</p>
<blockquote>
<p>① 规模扩大会带来<strong>供应方面的挑战</strong>。</p>
<p>② 不同区域之间有<strong>文化差异</strong>。</p>
<p>③ <strong>转换成本低</strong>。</p>
</blockquote>
<p>总的来说，能够利用某一种网络效应，是商业模式成功的标志之一。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>投资管理</tag>
      </tags>
  </entry>
  <entry>
    <title>解决目录和标签页无内容问题（使用Hexo - Ayer模版）</title>
    <url>/2023/02/15/No-Content-In-Tags-Page/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>写了一段时间博客，我发现我的 目录 和 标签页的内容是空的，但点到每个文章的单个标签或目录，显示又是正常的。有点奇怪，不知道是 Hexo的问题还是模版的问题。</p>
<h2 id="解决方法：修改Page页的文件">解决方法：修改Page页的文件</h2>
<p>研究了一段时间，发现问题还是出在categories和Tags页面配置上。<br>
解决方法如下：</p>
<ol>
<li>修改blog目录下的 <code>/source/categories/index.md</code> 文件，改成下面的内容：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改blog目录下的 <code>/source/tags/index.md</code> 文件，改成下面的内容：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>将Hexo重新发布一下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>这样，等待发布完成后再检查一下，目录和标签页的内容就回来了。</p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>博客管理</tag>
      </tags>
  </entry>
  <entry>
    <title>学习用PARA来进行知识管理（1）</title>
    <url>/2023/02/13/PARA-Practic-1/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>在《<a href="https://www.yunminitools.cn/2023/02/07/Knowledge-Management-1/">知识管理相关-知识管理误区</a>》里，提到知识不成体系会影响知识的吸收和掌握，那如何建立一个体系来管理每天我们接触的海量信息呢？<br>
我尝试使用P.A.R.A方法。</p>
<h2 id="P-A-R-A-方法介绍">P.A.R.A 方法介绍</h2>
<p>P.A.R.A 的作者是 Tiago Forte ，是世界上最著名的生产力专家之一。 他撰写和演讲技术如何帮助知识工作者彻底改变他们的个人效率。在<a href="https://fortelabs.com/blog/para">这篇文章</a>里，他分享了如何用P.A.R.A 来管理知识。</p>
<p>想象一下完美的信息组织系统，它应该能有效的支持你的当下和未来的工作，告诉你信息都被放在了哪里，以及当你需要的时候就能快速找到，并且不会被工具所束缚。</p>
<p><strong>所以这个系统必须满足以下条件</strong></p>
<ul>
<li>**通用的（universal）：**包含来自任何来源的任何种类的信息，并且能跨平台兼容不同时代的信息管理工具。</li>
<li>**灵活的（flexible）：**能够与你之前的任何项目或活动所兼容，并且能兼顾未来的拓展性</li>
<li><strong>简单的（simple）：</strong> 不需要任何耗时的维护、编目、标记或重组，只需最低限度的维护、编目、标记或重组即可</li>
<li>**可操作（actionable）：**与任务管理和项目管理方法的无缝集成</li>
<li>**结果导向（outcome-oriented）：**构建信息的结构，以便能交付有价值工作</li>
<li>**模块化（modular）：**根据当前任务的需要，允许隐藏或显示不同级别的细节</li>
<li>**机动性强（opportunistic）：**从好的方面来说，是利用已经完成的工作，而不是需要专门的管理时间</li>
</ul>
<h2 id="P-A-R-A-的含义和定义">P.A.R.A 的含义和定义</h2>
<span id="more"></span>
<p>P.A.R.A. 是 项目（Project）、领域（Area）、资源（Resource）、 档案（Archive）的简称。</p>
<h3 id="项目（Project）">项目（Project）</h3>
<p>**定义：**有明确目标时间的一系列动作集合。<br>
我的理解是短期自己设定的一个小目标：读一本书，看一个电影，写一个专题，研究一个技术专题。 ⚠️ 聚焦于较小的短期承诺，避免周期太长缺乏成就感，成为僵尸项目</p>
<h3 id="领域（Area）">领域（Area）</h3>
<p>**定义：**日常需要精进的领域。<br>
我的理解是 一个需要不断提升的领域，领域知识不足会对现实生活产生负面影响。 一般没有结束的日期或最终的结果。 你在这方面的表现可能会随着时间的推移而起起伏伏，但是这个标准会无限期地持续下去，并且在任何时候都需要一定程度的关注。比如：我的本职工作是产品经理，我会持续关注 产品/设计/架构 相关知识，并不断提高认知。生活上，需要关注小孩学习，子女教育 就是一个需要持续关注的领域。另外，理财领域，也需要补充知识，保证家庭资产保值增值。<br>
但这并不代表领域没有终点。当小孩高中毕业，短期就不需要关注 子女教育 问题，这些领域就会转移到归档中保存；又或者某些领域因为你的环境变化，比如从产品开发变成了投资人，那么之前产品相关的领域很可能就成为了你的资源。</p>
<h3 id="资源（Resource）">资源（Resource）</h3>
<p>**定义：<strong>持续感兴趣的事情。<br>
我理解，就是本人在领域外持续感兴趣的事情或领域相关的知识，与领域知识不同，资源的学习，短时间对当下的生活没有影响，不掌握这些知识，别人也不在乎。另外，资源 也是支撑</strong>领域（Area）<strong>的外部知识储备，未来资源也可能转化为领域。<br>
一般来说是 兴趣（例如：网页设计、市场、增长黑客等）、主题（例如：心理学、政治、历史）、资产（例如：股票分析、博客文章、产品推荐、图片、代码片段）。<br>
但基于精力分配和知识的形成，不推荐跨太多领域收集资源，这样要么会造成精力分散，要么造成资源坟场。更好地方法是，基于人生的规划，把</strong>领域（Area）<strong>作为精进的方向，然后把资源当做</strong>领域（Area）**的基石和养分，不断地为未来的可能性做准备。<br>
资源和领域还有一个区别是，领域知识的整理需要更结构化，更注意完整性。而资源的知识则不需要，可以集中在一些具体的点上进行知识的理解就可以了，可以比较零散。</p>
<h3 id="档案（Archive）">档案（Archive）</h3>
<p>**定义：**短期不再使用的知识<br>
我理解，可以定期整理以下项目：</p>
<ul>
<li>完成回顾的项目</li>
<li>短期不关注的领域</li>
<li>长期不再使用的资源<br>
把这些项目转移到档案目录下，减少对日常知识管理的干扰。以后需要了，也可以再恢复到相应位置。</li>
</ul>
<h3 id="其他">其他</h3>
<p>另外，我还加了一个类别：<strong>收集箱（Inbox）</strong><br>
**定义：**日常一些暂时无法归类的想法/收集的知识/需要研究的方向<br>
这样，这些想法也不会无处安放。我会定期清理这个收集箱，进一步花时间研究，放到合适的PAR分类里；或者研究后发现没有太大价值，那么就丢弃它。</p>
<p>（未完待续）</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
        <tag>PARA</tag>
      </tags>
  </entry>
  <entry>
    <title>如何查找英文Podcast的文字稿</title>
    <url>/2023/02/20/Podcast-transcript/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>最近比较喜欢听一些科技方面的英文Podcast，比如《This American Life》，《How I Built This with Guy Raz》 等。 当然，我英文比较菜，并不能完全脱离文本，当听了一个大概后，还是希望能结合文字稿再精听一下。这时我发现，每个Podcast的风格时不一样的，有些会搭建一个网站，放上历史的音频和文字稿，方便听众；例如《This American Life》就有一个很好用的<a href="https://www.thisamericanlife.org/">网站</a>。但有一些就没有。</p>
<p>当我在听没有官方提供文字稿的Podcast时，就比较痛苦，需要到处找文字稿。搜索了全网，我发现一个网站还不错，可以解决问题。</p>
<h2 id="非官方文字稿查询网站">非官方文字稿查询网站</h2>
<p>这个网站就是 <a href="https://app.podscribe.ai/search?t=1&amp;genre=1">https://app.podscribe.ai</a></p>
<p>进入网址，就可以看到这神奇的网站：<br>
<img src="http://cdn.yunminitools.cn/blog/Podcast0220-1.png" alt="podscribe page1"></p>
<span id="more"></span>
<p>比如，我想查询《How I Built This with Guy Raz》的文字稿，我就输入How I Bu，很快就发现了这个Podcast：<br>
<img src="http://cdn.yunminitools.cn/blog/Podcast0220-2.png" alt="podscribe page1"></p>
<p>点击这个Podcast，就可以看到近期的节目，注意，标“CC”的节目是有文字稿的，如果没有CC，说明文字稿还没整理好。<br>
<img src="http://cdn.yunminitools.cn/blog/Podcast0220-3.png" alt="podscribe page1"></p>
<p>我试了几个我常听的，基本都有，满足了我的需要，在这里记录一下。</p>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>英语学习</tag>
        <tag>Podcast</tag>
      </tags>
  </entry>
  <entry>
    <title>Seven Levels of Delegation</title>
    <url>/2023/02/25/Seven-Levels-Delegation/</url>
    <content><![CDATA[<p>When we are doing management work, it is inevitable that we will delegate tasks to team members. At this point, how to delegate tasks is quite important. Just like most things in the world, delegation is not black and white, but exists in shades of gray.<br>
Jurgen Appelo, author of books such as “How to Change the World” and <a href="https://book.douban.com/subject/10484469/">“Management 3.0”</a>, proposes that we think of delegation as something that is not binary, and that part of the art of management has to do with finding the right balance in it. Jurgen proposes seven different levels of delegation in management:</p>
<ul>
<li>
<p><strong>Say</strong>: The traditional. It’s telling someone what to do. The manager makes the decision and then tells the others what it is. There is little room for debate or negotiation.<br>
1️⃣ <strong>I told you to do</strong></p>
</li>
<li>
<p><strong>Sell</strong>: When the manager tries to convince others that the decision he or she is making is a good one and they should therefore accept it.<br>
2️⃣ <strong>I persuaded you to do</strong></p>
</li>
<li>
<p><strong>Consult</strong>: When the manager gathers information from the team before making a decision.<br>
3️⃣ <strong>After the decision, I made the decision</strong></p>
</li>
<li>
<p><strong>Agree</strong>: Implies that there is consensus about the decision between the manager and the team, or the decision is made jointly. It is the most difficult because it requires more time.<br>
4️⃣ <strong>After the decision, we reached a consensus</strong></p>
</li>
<li>
<p><strong>Advice</strong>: When the manager influences the decision made by the team.<br>
5️⃣ <strong>I adviced，team made the decision</strong></p>
</li>
<li>
<p><strong>Ask</strong>: Once the team has made the decision, the manager asks for information about the decision.<br>
6️⃣ <strong>Team made the decision, I asked for information</strong></p>
</li>
<li>
<p><strong>Delegate</strong>: The manager has zero influence on the decision. It is made entirely by the team.<br>
7️⃣ <strong>Team made the decision</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>简单而后容易</title>
    <url>/2023/02/21/Simple-made-easy/</url>
    <content><![CDATA[<p>读到<a href="https://paulrcook.com/blog/simple-made-easy">这篇文章</a>，介绍我们如何处理复杂性，其中几个观点都挺有意思，我记录一下。</p>
<h2 id="容易不等于简单">容易不等于简单</h2>
<ul>
<li>容易 对应 困难 / 简单 对应 复杂</li>
<li>容易是主观判断 / 简单可以是客观评价</li>
</ul>
<h2 id="大脑的记忆是有上限的">大脑的记忆是有上限的</h2>
<p>大脑在同一时间，可以记住的事情是有限的。当我们的代码库变得越来越复杂和相互连接，就越难以理解它的全部。当事物相互交织在一起时，我们不能再孤立地思考不同的部分，而必须一起考虑它们。</p>
<p>每次我认为我需要理解软件的新部分，并且它与另一件事情相关联，我就必须把那个其他的东西也放入我的脑海中，因为我无法单独思考一个而不考虑另一个。这就是它们交织在一起的本质。因此，每个交织都增加了这种负担，而这种负担在考虑事物的数量方面是组合的。因此，从根本上讲，这种复杂性，我指的是事物的编织，将限制我们理解系统的能力。</p>
<h2 id="“复杂”意味着交织、纠缠、编织">“复杂”意味着交织、纠缠、编织</h2>
<p>“复杂”意味着程序的交织、纠缠、编织，要尽量避免。</p>
<h2 id="如何使困难的东西变简单？">如何使困难的东西变简单？</h2>
<p>主动学习、实验、尝试。</p>
<h2 id="如何使复杂的东西变简单？">如何使复杂的东西变简单？</h2>
<p>将扭曲和交织的部分分离开来，让每个个部分对其他部分的依赖最小化。</p>
<h2 id="简单的好处">简单的好处</h2>
<p>易于理解，易于更改，易于调试。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflections on &#39;The Six Counterintuitive Rules&#39; - 1</title>
    <url>/2023/02/14/The-Six-Counterintuitive-Rules-1/</url>
    <content><![CDATA[<h2 id="BACKGROUND">BACKGROUND</h2>
<p>I don’t consider myself a qualified manager, and this is probably a weakness for a product manager transitioning into a people manager. Because I focus too much on the product itself, I often neglect team building and personnel management.<br>
After reading this <a href="https://review.firstround.com/6-counterintuitive-rules-for-being-a-better-manager-advice-from-lambda-school-quip-and-facebook">article</a>, I realized that some of the management issues mentioned were things that I wasn’t aware of before (actually, it was only recently that I became aware of them, how belated!)</p>
<h2 id="RULE-1-MANAGEMENT-IS-NOT-LEADERSHIP">RULE #1: MANAGEMENT IS NOT LEADERSHIP</h2>
<p>One of the big mistakes I see people make is conflating management and leadership. I strongly believe you can be a leader without being a manager.<br>
Management isn’t telling people what to do. It isn’t setting a vision and aligning the work around it. That’s leadership. True management is the act of <strong>making the people around you better</strong>.</p>
<p>Only people who have certain characteristics and certain ‘loves’ should be managers.‘What do you love doing?’ a great answer is ‘I love <strong>investing in people</strong> and I love making them better, into <strong>the best versions of themselves</strong>.’ If that really brings you joy, great — being a manager is one of the most powerful and high-leverage jobs inside of organizations.</p>
<p>The easiest way to see if you’re a good manager is by running through these questions:</p>
<ul>
<li>Are the people around you growing?</li>
<li>Are they taking on more in scope?</li>
<li>Are you seeing them change in terms of things they weren’t good at six months ago?</li>
<li>Are you pushing your highest performers and watching them explode?</li>
<li>Are you helping your lower performers figure out what’s not working?”</li>
</ul>
<h3 id="Inspiration-1：Investing-in-people">Inspiration 1：Investing in people</h3>
<p>The article I read recently highlighted an important realization I’ve had in my own career. I’ve often focused on telling people what to do, but I’ve overlooked the importance of <strong>helping them become better</strong>. While I possess leadership skills, I recognize that I lack some of the management skills necessary to truly make a positive impact on my team.</p>
<p>I’ve come to understand that to be a good manager, I need to love <strong>investing in people and helping them grow</strong>. This investment not only benefits the individuals themselves, but it also brings me joy and helps me grow as a leader. For me, investing in people means devoting my own time, energy, and thoughts to help my subordinates develop and reach their full potential.</p>
<hr>
<p>To Be Continue…</p>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflections on &#39;The Six Counterintuitive Rules&#39; - 2</title>
    <url>/2023/02/15/The-Six-Counterintuitive-Rules-2/</url>
    <content><![CDATA[<h2 id="RULE-2-DON’T-TRY-TO-CREATE-ROBOTS-FOCUS-ON-MANAGING-THE-WHAT-NOT-THE-HOW">RULE #2: DON’T TRY TO CREATE ROBOTS. FOCUS ON MANAGING THE WHAT, NOT THE HOW.</h2>
<p>Generally speaking, high-performing teams are not made up of robots. They’re made up of humans who are able to <strong>independently meet a goal</strong>. It’s just a huge amount of wasted energy to try to create robots out of humans.<br>
You often see people trying to direct their team in terms of exactly how they would have done it. I see so many managers getting really bogged down in the literal process that someone is going through in order to achieve a goal. But at the end of the day, there’s only one thing that matters: <strong>Did they achieve the goal?</strong><br>
The best managers set expectations at the “what” level, not the “how” level.</p>
<h3 id="Inspiration-2：Set-expectation-at-the-“What”-and-Avoid-“Micromanager”">Inspiration 2：Set expectation at the “What” and Avoid “Micromanager”</h3>
<p>When it comes to selecting and hiring people, I used to prefer individuals who have similar personalities or work methods to my own. However, in doing so, I overlooked the types of people needed to achieve our goals. Subconsciously, I tend to resist people whose ideas differ greatly from my own. One reason for this is that I lack confidence in working with such individuals and am unsure whether they can complete tasks effectively. Another reason is that I worry about managing such individuals and lack confidence in my own management abilities.</p>
<p>I have a tendency to micromanage, especially when it comes to product design. I can’t tolerate colleagues who have significantly different ideas from my own, which causes everyone to feel apprehensive and indecisive when it comes to proposing design solutions. Looking back, I realize that my own growth came from learning from my mistakes, and I thought I was doing my colleagues a favor by being overly controlling, but in reality, I was depriving them of the opportunity to grow. By focusing too much on “how to do things,” it’s challenging to cultivate their ability to identify “what should be done.” Essentially, I am creating robots rather than encouraging creativity and independent thinking among my team. I need to trust my colleagues more and give them the freedom to propose new ideas and make mistakes.</p>
<hr>
<p>To Be Continue…</p>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflections on &#39;The Six Counterintuitive Rules&#39; - 3</title>
    <url>/2023/02/16/The-Six-Counterintuitive-Rules-3/</url>
    <content><![CDATA[<h2 id="RULE-3-GOOD-MANAGERS-NEVER-CREATE-A-SECOND-PATIENT">RULE #3: GOOD MANAGERS NEVER CREATE A SECOND PATIENT.</h2>
<p>As managers, we often think we come second, that we have to make sure the team is okay first, And so we postpone our vacation or we work longer hours because we ‘have to be there for the team.’ But in doing so, you only end up <strong>draining</strong> your own energy, <strong>hurting</strong> your well-being and <strong>becoming</strong> a mess, not realizing that you’re doing a <strong>disservice</strong> to your team members by <strong>making yourself into a patient</strong>. You need to be your best self for them.</p>
<p>As a manager, one of the hardest management skills is learning to <strong>take care of yourself first</strong>. It can feel selfish, especially if you’re a giving person. But trust me when I say that unless you are your best self, there’s no way you can make other people into their best selves.</p>
<h3 id="Inspiration-3-Take-care-of-myself-first">Inspiration 3: Take care of myself first</h3>
<p>I also have this bad habit of burning myself out by always being the first to handle problems as they arise. While this may seem responsible, it prevents other team members from growing because I am always there to take care of things for them. Additionally, as the business becomes more complex, I tend to get bogged down in the details of various issues and have less time to plan for the future or consider the team’s growth. As a result, it is having a negative impact on the team. To improve, I need to start delegating tasks to my colleagues and trusting them to handle issues themselves. This will not only help them grow but also free up my time to <strong>take care of myself</strong>.</p>
<hr>
<p>To Be Continue…</p>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflections on &#39;The Six Counterintuitive Rules&#39; - 4</title>
    <url>/2023/02/17/The-Six-Counterintuitive-Rules-4/</url>
    <content><![CDATA[<h2 id="RULE-4-SPEND-MORE-TIME-THAN-YOU-THINK-YOU-NEED-TO-WITH-YOUR-HIGH-PERFORMERS">RULE #4: SPEND MORE TIME THAN YOU THINK YOU NEED TO WITH YOUR HIGH PERFORMERS.</h2>
<p>As managers, we often forget that we should be spending most of our time with the <strong>highest performers</strong> on our team. When you have someone who’s doing really well, the question should be, ‘How can they do even better? How can you make their growth explode?’” , Here are the two tools:</p>
<h3 id="Look-back-look-forward">Look back, look forward</h3>
<p>Whatever milestone that makes the most sense for that person’s role. I ask them to look back on a project that they just finished and run through these questions:<br>
<strong>Look back:</strong></p>
<ul>
<li>
<p>What did you like about that? What felt good?</p>
</li>
<li>
<p>What did you hate about it? What didn’t feel good?</p>
</li>
<li>
<p>What’s the most important thing you learned?</p>
</li>
<li>
<p>Do you want to do more of that type of work, or less?</p>
</li>
<li>
<p>What do you want to do differently next time?</p>
</li>
</ul>
<p><strong>Look forward:</strong></p>
<ul>
<li>
<p>What’s the next challenge?</p>
</li>
<li>
<p>What’s the next big step or career goal you want to reach for?</p>
</li>
<li>
<p>What type of work do you want to take on, whether it’s a current project in the company or something that might potentially show up in the future?</p>
</li>
</ul>
<p>In essence, it’s about carving out the time to help an individual <strong>reflect</strong> on their learning, <strong>unpack</strong> what didn’t work so that they know what to <strong>change</strong> next time, and then <strong>look toward</strong> the next challenge on the horizon.</p>
<h3 id="Use-the-performance-review-as-an-opportunity-to-push-for-more">Use the performance review as an opportunity to push for more.</h3>
<p>We don’t want them to be too important because we want you to have these conversations all year long. However, the review was a powerful summary moment to both reflect on the last half and how things had gone, but also to push me on what she wanted to see next.</p>
<h3 id="Inspiration-4-Spend-more-time-Listen">Inspiration 4: Spend more time &amp; Listen</h3>
<ul>
<li>
<p>In the past, I used to devote a lot of energy to the latter half of team management and neglect the development of high-potential talent. This is certainly a <strong>counterproductive approach</strong>, as it does not leverage the full potential of the team.</p>
</li>
<li>
<p>The way we communicate is essential, and it’s important to be <strong>well-prepared</strong> before engaging in communication. This involves actively <strong>listening</strong> to others, engaging in discussions, and then presenting the goals to be achieved.</p>
</li>
</ul>
<hr>
<p>To Be Continue…</p>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflections on &#39;The Six Counterintuitive Rules&#39; - 5</title>
    <url>/2023/02/18/The-Six-Counterintuitive-Rules-5/</url>
    <content><![CDATA[<h2 id="RULE-5-SET-EXPECTATIONS-BUT-KNOW-THAT-YOU’RE-NOT-ALWAYS-THE-ONE-WHO-NEEDS-TO-BRING-THE-CLARITY">RULE #5: SET EXPECTATIONS, BUT KNOW THAT YOU’RE NOT ALWAYS THE ONE WHO NEEDS TO BRING THE CLARITY.</h2>
<p>If there’s a new role that’s been <strong>poorly defined</strong>, providing clarification is the first step. Once you define it, you’ll usually find that someone who’s in that role isn’t actually a fit for what the business needs.</p>
<ul>
<li>Do people’s roles make sense?</li>
<li>Do they know how they fit in?</li>
<li>How they align to the business?</li>
<li>Do they know what’s expected of them?</li>
<li>Do they know what success looks like?<br>
80% of the time when I go into a team that’s struggling, the answers to those questions is no.</li>
</ul>
<p>Be realistic about what you can offer, but remember that it’s BYOC (Bring Your Own Clarity). I actually need people who bring their own clarity and structure. And that’s because I don’t have a lot of the answers right now. To be a better manager, you have to be really realistic about what you can control and what you can offer — and what you can’t.</p>
<p>Often a low performer isn’t someone who is inherently low performing. It is someone who has the wrong set of circumstances around them — they’re in the wrong job or in the wrong organization. A lot of times when people are struggling it’s not because they’re bad at stuff, but because they don’t know what’s expected of them. Give them the chance to see the gap and say, ‘I know I can do it,’ or ‘This really isn’t for me actually.’</p>
<h3 id="Inspiration-5-Set-expectations-is-important">Inspiration 5: Set expectations is important</h3>
<p>Setting clear expectations is essential for both high-performing and low-performing employees. In the past, I did not do a good job of setting clear expectations, which impacted high-performing employees’ motivation to achieve even greater goals and low-performing employees’ direction in making an effort to improve.</p>
<hr>
<p>To Be Continue…</p>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflections on &#39;The Six Counterintuitive Rules&#39; - 6</title>
    <url>/2023/02/19/The-Six-Counterintuitive-Rules-6/</url>
    <content><![CDATA[<h2 id="RULE-6-DIRECT-IS-KIND-HAVE-THE-HARD-CONVERSATION-—-EARLIER-THAN-YOU-THINK-YOU-NEED-TO">RULE #6: DIRECT IS KIND. HAVE THE HARD CONVERSATION — EARLIER THAN YOU THINK YOU NEED TO.</h2>
<p>People can <strong>grow and change</strong> at any point in their career. But I believe most people haven’t been given the chance to do so because they haven’t gotten <strong>honest feedback</strong>. No one’s held up a mirror to them about their work, how they impact others, and the things standing in the way.</p>
<p>Humans don’t like having hard conversations. We build them up in our heads, and then we try to couch them in a lot of useless language that makes it hard for everybody to understand what’s going on. One of the biggest management skills to work on is being <strong>direct with people</strong>.If you start that habit early, it gets a lot easier to have direct conversations with people. But if you wait until something’s really not working, then you end up surprising your direct reports and having worse conversations that are much more stressful.</p>
<p>I always write down the number one message that a person needs to hear and understand. Then I try to make sure I say it a couple times in the conversation. The following week, I’ll actually have that person repeat it back to me to make sure we’re on the same page. If you can hear back the same messages that you were trying to send, then you know you’re <strong>on the same page</strong>. That’s when you can start to focus on what you’re both going to do about it.</p>
<h3 id="Inspiration-6-Being-direct-with-people">Inspiration 6: Being direct with people</h3>
<p>If a team member has a problem, it’s essential to have an honest conversation with them, even if it’s not something one is inclined to do. Candid communication is not only beneficial to the organization but also an opportunity for personal improvement. Avoiding communication and attempting to solve problems independently may work for a short time, but it is not a sustainable approach and may result in bigger losses in the long run.</p>
<hr>
<p>Done</p>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflections on &#39;The Six Counterintuitive Rules&#39; - Summary</title>
    <url>/2023/02/19/The-Six-Counterintuitive-Rules-Summary/</url>
    <content><![CDATA[<h2 id="Summary">Summary</h2>
<p>The Six Counterintuitive Rules:</p>
<ol>
<li><a href="https://www.yunminitools.cn/2023/02/14/The-Six-Counterintuitive-Rules-1/">Managment is not leadership</a></li>
<li><a href="https://www.yunminitools.cn/2023/02/15/The-Six-Counterintuitive-Rules-2/">Don’t Try to create robots, Focus on managing the what not how.</a></li>
<li><a href="https://www.yunminitools.cn/2023/02/16/The-Six-Counterintuitive-Rules-3/">Godd managers never create a second patient</a></li>
<li><a href="https://www.yunminitools.cn/2023/02/17/The-Six-Counterintuitive-Rules-4/">Spend more time with your high performancers</a></li>
<li><a href="https://www.yunminitools.cn/2023/02/18/The-Six-Counterintuitive-Rules-5/">Set expectaton, but know that you’re not always the one who needs to bring the clarity</a></li>
<li><a href="https://www.yunminitools.cn/2023/02/19/The-Six-Counterintuitive-Rules-6/">Direct is kine. Have the hard conversation - earlier than you think you need to</a></li>
</ol>
<h3 id="Inspiration-Summary">Inspiration Summary</h3>
<p>I used to overlook the types of people needed to achieve our goals and micromanage product design, depriving colleagues of the opportunity to grow. I need to trust my colleagues more, delegate tasks, and set clear expectations to help them develop and free up my time. Communication is essential for success and avoiding it can lead to bigger losses in the long run.</p>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>团队管理</tag>
      </tags>
  </entry>
  <entry>
    <title>关于需求分析和客户沟通</title>
    <url>/2023/03/12/The-iceberg-secret-revealed/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>关于需求分析和工期预估一直是老大难问题，Joel 的<a href="https://www.joelonsoftware.com/2002/02/13/the-iceberg-secret-revealed/">这篇文章</a>谈到了这个问题，我挑一些记录下来。</p>
<h2 id="客户不知道他们想要什么是问题吗？">客户不知道他们想要什么是问题吗？</h2>
<p>通常，在定制项目中，最常见的超支、失败和悲剧的原因总是归结为，基本上，&quot;客户不知道他们想要什么？”<br>
事实上，有一件事是每个初级BA都需要在开展工作前要知道的，那就是：<strong>客户其实不知道他们想要什么</strong>。不要再期望客户知道他们想要什么。这是不可能发生的。忘掉它吧。<br>
相反，你要假设你将不得不制造一些东西，而客户将不得不喜欢它，但他们将有一点惊喜。你必须做研究，想出一个设计，以一种愉悦的方式解决客户的问题。<br>
设身处地为客户想想。想象一下，你决定装修你的厨房，因此，你聘请了一位专业的设计师，指示要把它弄得高大上一些。你不知道如何完成这个任务，你不知道那些事厨房中必须要装的，哪些事提升体验的，这些都不是你擅长的，你想让设计师帮你完成这个事情，这就是你雇用他的原因。<br>
有一种办法是让客户进入房间，让他们作为开发团队的成员参与到设计过程的每一步。我认为，这有点太 &quot;极端 &quot;了。这就好像我的设计师在设计厨房时让我出现，并要求我对每一个小细节提供意见。这对我来说很无聊，我会觉得这个设计师对我毫无价值。<br>
假设你的客户不知道他们想要什么。根据你对这个领域的理解，你自己设计它。如果你需要花一些时间来学习这个领域，或者你需要一个领域专家来帮助你，这很好，但软件的设计是你的工作。如果你做了领域方面的功课并创造了一个好的用户界面，客户会很高兴。</p>
<h2 id="冰山理论">冰山理论</h2>
<p>现在，我答应告诉你一个关于在你的软件的客户（或非技术经理）的语言和程序员的语言之间进行翻译的秘密。<br>
你知道一座冰山有90%在水下吗？那么，大多数软件也是这样的–有一个漂亮的用户界面，需要大约10%的工作，然后90%的编程工作是在盖子下面。如果你考虑到你大约一半的时间是用来修复bug的，那么用户界面只占5%的工作。如果你把自己限制在用户界面的视觉部分，即像素，也就是你在PowerPoint中看到的东西，现在我们说的是不到1%。</p>
<span id="more"></span>
<p>这不是秘密。秘密在于，不是程序员的人不懂这个。冰山的秘密有一些非常、非常重要的推论。</p>
<h3 id="重要的推论一：">重要的推论一：</h3>
<p>如果你向一个非程序员展示一个用户界面比设想差了90%，他们会认为该程序差了90%。</p>
<h3 id="重要的推论二：">重要的推论二：</h3>
<p>如果你给一个非程序员看一个用户界面100%漂亮的屏幕，他们会认为这个程序几乎已经完成。</p>
<blockquote>
<p>不是程序员的人只是看着屏幕，看到一些像素。如果这些像素看起来像组成了一个能做什么的程序，他们就会想：“哦，天哪，要让它真正工作起来还能有多难？”<br>
这里最大的风险是，如果你先模拟出用户界面，大概是为了能与客户进行一些对话，那么每个人都会认为你差不多完成了。然后，当你在接下来的一年里 &quot;暗中 &quot;工作时，可以这么说，没有人会真正看到你在做什么，他们会认为这没什么。</p>
</blockquote>
<h3 id="重要的推论三：">重要的推论三：</h3>
<p>拥有很酷的、光鲜亮丽的网站和大约四个网页的网络公司将比拥有3700年档案和默认灰色背景的很强功能网络公司获得更高的估值。</p>
<h3 id="重要的推论四：">重要的推论四：</h3>
<p>当政治要求各种非技术经理或客户在一个项目上 &quot;签字 &quot;时，给他们几个版本的图形设计供其选择就可以了。</p>
<blockquote>
<p>调整一些东西的位置，改变外观和感觉以及字体，移动标志，使其变大或变小。让他们觉得自己很重要，给他们一些不重要的鸡毛蒜皮的东西来捣乱。他们在这里<strong>不能对你的日程安排造成太大的破坏</strong>。一个好的室内装饰公司会不断地给他们的客户带来色板和样品以及一些可以选择的东西。但他们绝不会与客户讨论洗碗机的位置。无论客户想要什么，它都要放在水槽旁边。浪费时间争论洗碗机的位置是没有意义的，它必须放在水槽旁边，甚至不要提出来；<strong>让客户在做一些无害的事情时得到他们的设计灵感</strong>。</p>
</blockquote>
<h3 id="重要的推论五：">重要的推论五：</h3>
<p>当你在炫耀时，唯一重要的是屏幕截图。让它100%的漂亮。</p>
<blockquote>
<p>史蒂夫-乔布斯明白这一点。苹果公司的工程师们已经学会了做一些能拍出漂亮屏幕照片的事情，比如Dock中华丽的1024×1024的新图标，即使它们浪费了宝贵的空间。</p>
</blockquote>
<h2 id="结论">结论</h2>
<h3 id="错误的做法">错误的做法</h3>
<p>团队一开始就给客户看了很好的PowerPoints–模拟图，用Photoshop制作的，甚至不是VB。而现在，团队真正在盖子下面做了东西，对于客户来说，这段时间看起来团队什么都没做。</p>
<h3 id="正确的做法">正确的做法</h3>
<p>一旦你理解了冰山的秘密，就很容易与之合作。要知道，你做的任何演示都将是关于界面的。如果可以的话，以这样的方式建立你的用户界面，使未完成的部分看起来未完成。例如，在功能出现之前，在工具栏上使用潦草的图标。当你在建立你的网络服务时，你可能想考虑在这些功能建成之前，实际上不使用主页上的功能。这样人们就可以看着主页从3个命令变成20个命令，因为更多的东西被建立起来了。<br>
更重要的是，确保你控制人们对时间表的看法。提供一个Excel格式的详细时间表。每周发送状态更新的电子邮件，谈论你是如何从32%的完成度提高到35%的完成度。确保以实际情况主导任何关于项目是否以正确速度向前推进的思考。<br>
也就是说，在沟通时用界面控制客户的期望，在进度慢的时候多更新一些完成界面的内容，进度快时控制一下完成界面的沟通，最终按计划交付功能。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>需求分析</tag>
      </tags>
  </entry>
  <entry>
    <title>反思：那些你不该做的事情</title>
    <url>/2023/03/06/Things-you-should-never-do-1/</url>
    <content><![CDATA[<p>最近在重新看 <strong>Joel on Software</strong> 的blog，时隔二十年，很多错误还在重复发生，很有感触，比如<a href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/">这篇</a>，翻译过来，引以为戒。</p>
<h2 id="网景发生了什么？">网景发生了什么？</h2>
<p>网景6.0终于要进入第一个公开测试版了。实际上，从来没有5.0版本。上一个主要发布版本4.0已经发布了将近三年。在互联网世界，三年是相当长的时间。在此期间，网景无助地坐视其市场份额大幅下降。批评网景发布版本之间的等待时间如此之长似乎有点伪善。他们不是有意这么做的，对吧？其实是的。他们犯下了任何软件公司都会犯的最糟糕的战略错误：<strong>他们决定从头开始重写代码</strong>。</p>
<h2 id="程序员在想什么？">程序员在想什么？</h2>
<p>程序员的内心是建筑师，当他们到达一个地方时，首先想做的事情就是将其铲平，建造一些宏伟的东西。程序员对逐步翻新、改进和种花园不感兴趣。程序员总是想要扔掉代码重新开始有一个微妙的原因。原因是他们认为旧的代码很糟糕。这里有一个有趣的观察：他们可能是错的。他们认为旧代码很糟糕的原因是基于程序设计的一个基本法则：<br>
<strong>阅读代码比编写代码更困难。</strong><br>
这就是为什么代码再利用非常困难的原因。这就是为什么你团队中的每个人都喜欢用不同的函数将字符串分割成字符串数组。他们编写自己的函数，因为这比弄清楚旧函数如何工作更容易、更有趣。</p>
<h2 id="这样做的问题是什么？">这样做的问题是什么？</h2>
<p>新代码比旧代码更好这种想法显然是荒谬的。旧代码已经被使用过了。它已经经过了测试。已经发现了许多错误，并对其进行了修复。它没有任何问题。它不会只是因为闲置在你的硬盘上而产生错误。恰恰相反，它会变得更加完善！<br>
比如，一个程序员在分析旧代码时会说：“看一下这个函数，它有两页长！里面的这些东西都不应该放在这里！我不知道这些API调用的一半是干什么用的。“<br>
这个API只是一个简单的用来显示窗口的函数，但它变得越来越复杂，无人知晓。其实，原因是：那些复杂的代码都是为了修复bug。一个修复了Nancy在试图在没有安装Internet Explorer的电脑上安装应用时遇到的问题。另一个修复了在低内存情况下出现的bug。还有一个修复了当这个文件在软盘上且用户在重要时刻拔出软盘时出现的bug。而那个丑陋的LoadLibrary调用，却可以让代码在旧版本的Windows 95上正常运行。<br>
每一个bug都需要经过几周的现实世界使用才能被发现。程序员可能花了几天时间在实验室里重现bug并修复它。如果像很多bug一样，修复可能只需一行代码，甚至可能只需要几个字符，但这几个字符需要付出大量的工作和时间。<br>
当你丢弃代码并从头开始时，你也在丢失所有那些<strong>知识</strong>、所有那些收集到的<strong>bug修复</strong>，以及多年的<strong>编程工作</strong>。</p>
<h2 id="正确的做法是什么？">正确的做法是什么？</h2>
<p>当程序员说他们的代码一团糟时（他们总是这么说），代码可能存在三方面问题。<br>
<strong>首先</strong>，存在架构问题。代码的分配不正确。网络代码突然跳出自己的对话框，这些应该由UI代码处理。这些问题可以逐一解决，通过仔细地移动代码、重构、更改接口。这可以由一个程序员仔细地工作，并一次性检查他的改变，以便不会干扰其他人。即使在不丢弃现有代码的情况下，也可以进行相当大规模的架构变更。在Juno项目中，我们曾经花了几个月时间进行重新架构：只是移动代码、清理它们、创建有意义的基类，并在模块之间创建尖锐的接口。但我们以现有的代码库仔细进行，没有引入新的bug或扔掉正在工作的代码。<br>
<strong>第二</strong>个原因是代码效率低下。据说，Netscape的渲染代码很慢。但这只影响了项目的一小部分，您可以进行优化甚至重写它。您不必重写整个项目。优化速度时，1%的工作可以让您获得99%的成果。<br>
<strong>第三</strong>，代码可能很丑陋。我曾经参与的某个项目实际上有一种叫做FuckedString的数据类型。另一个项目开始时使用了以下划线开头的成员变量命名规则，但后来转为更标准的“m_”。因此，一半的函数以“<em>”开头，另一半以“m</em>”开头，看起来很丑。老实说，这种问题可以在Emacs中使用宏几分钟内解决，而不是从头开始。</p>
<h2 id="总结">总结</h2>
<p>重要的是要记住，当你从头开始时，没有任何理由相信你会比第一次做得更好。你可能没有与原版本一起工作的相同编程团队，因此您实际上没有“更多经验”。您只会再次犯许多旧的错误，并引入一些原版本中没有的新问题。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>复盘反思</tag>
      </tags>
  </entry>
  <entry>
    <title>三种事实表</title>
    <url>/2023/03/08/Three-Fact-Table/</url>
    <content><![CDATA[<h2 id="什么是事实表？">什么是事实表？</h2>
<p>事实表作为数据仓库维度建模的核心，紧紧围绕着业务过程来设计，通过获取描述业务过程的度量来表达业务过程，包含了引用的维度 和与业务过程有关的度量。</p>
<p>每个数据仓库都包含一个或者多个事实数据表。事实数据表可能包含业务销售数据，如现金登记事务所产生的数据，事实数据表通常包含大量的行。事实数据表的主要特点是包含数字数据（事实），并且这些数字信息可以汇总，以提供有关单位作为历史的数据。事实数据表<strong>不应该包含描述性的信息</strong>，也不应该包含除数字度量字段及使事实与纬度表中对应项的相关索引字段之外的任何数据。</p>
<h2 id="事实表的三种类型">事实表的三种类型</h2>
<p>事实表有三种类型 : 事务事实表、周期快照事实表和累积快照事实表。</p>
<h3 id="事务事实表"><strong><strong>事务事实表</strong></strong></h3>
<p>事务事实表记录的事务层面的事实，保存的是最原子的数据，也称“原子事实表”。事务事实表中的数据在事务事件发生后产生，数据的粒度通常是每个事务记录一条记录。一旦事务被提交，事实表数据被插入，数据就不再进行更改，其更新方式为增量更新。</p>
<h3 id="周期快照事实表">周期快照事实表</h3>
<p>周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，时间间隔如每天、每月、每年等等。典型的例子如销售日快照表、库存日快照表等。它统计的是间隔周期内的度量统计，如历史至今、自然年至今、季度至今等等。周期快照表没有粒度的概念，取而代之的是周期+状态度量的组合，如历史至今的订单总数，其中历史至今是一个周期，订单总数是度量。</p>
<p>周期快照事实表的粒度是每个时间段一条记录，通常比事务事实表的粒度要粗，是在事务事实表之上建立的聚集表，比如说时间周期是1周，那么这个周期快照事实表的一条记录就是这一周的对于某个度量的统计值（我理解的）。</p>
<h3 id="累积快照事实表">累积快照事实表</h3>
<p>累积快照事实表和周期快照事实表有些相似之处，它们存储的都是事务数据的快照信息。但是它们之间也有着很大的不同，周期快照事实表记录的确定的周期的数据，而累积快照事实表记录的不确定的周期的数据。累积快照事实表代表的是完全覆盖一个事务或产品的生命周期的时间跨度，它通常具有多个日期字段，用来记录整个生命周期中的关键时间点。例如订单累计快照事实表会有付款日期，发货日期，收货日期等时间点。</p>
<p>事务事实表中一条交易记录会每天有一条数据来记录整个交易过程；而累积快照事实表只会有一条记录，数据会一致更新直到过程结束。</p>
<p>累积快照事实表代表的是完全覆盖一个事务或产品的生命周期的时间跨度，它通常具有多个日期字段，用来记录整个生命周期中的关键时间点。另外，它还会有一个用于指示最后更新日期的附加日期字段。由于事实表中许多日期在首次加载时是不知道的，所以必须使用代理关键字来处理未定义的日期，而且这类事实表在数据加载完后，是可以对它进行更新的，来补充随后知道的日期信息。</p>
<p><strong>周期快照事实表记录的是重复的可预测到的时间间隔的事实</strong>，例如帐户月结余事实表，用来记录每个月末的帐户结余信息。一般周期快照的数据会按报表需要的周期进行记录，比较适合周期长一些的情况。</p>
<p>而<strong>累计快照适用于较短周期，有着明确的开始和结束状态的过程</strong>，如一个订单执行的过程，并记录过程中每个步骤的执行时间，使分析人员对执行的过程有整体的把握。周期快照事实表记录上每个步骤的执行时间是逐步建立的，随着执行的过程逐步更新的事实表中。</p>
<h3 id="类型比较">类型比较</h3>
<table>
<thead>
<tr>
<th></th>
<th>事务事实表</th>
<th>周期快照事实表</th>
<th>累积快照事实表</th>
</tr>
</thead>
<tbody>
<tr>
<td>时期/时间</td>
<td>离散事务时间点</td>
<td>以有规律的、可预测的</td>
<td>用于时间跨度不确定的不断变化的工作流</td>
</tr>
<tr>
<td>日期维度</td>
<td>事务日期</td>
<td>快照日期</td>
<td>相关业务过程涉及的多个日期</td>
</tr>
<tr>
<td>粒度</td>
<td>每行代表实体的一个事务</td>
<td>每行代表某时间周期的一个实体</td>
<td>每行代表一个实体的生命周期</td>
</tr>
<tr>
<td>事实</td>
<td>事务事实</td>
<td>累积事实</td>
<td>相关业务过程事实和时间间隔事实</td>
</tr>
<tr>
<td>事实表加载</td>
<td>插入</td>
<td>插入</td>
<td>插入与更新</td>
</tr>
<tr>
<td>事实表更新</td>
<td>不更新</td>
<td>不更新</td>
<td>业务过程变更时更新</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>To Be More Confident</title>
    <url>/2023/02/22/To-Be-More-Confident/</url>
    <content><![CDATA[<h2 id="Background">Background</h2>
<p>When I was listening to the “English with Lucy” channel on YouTube, I heard an episode about boosting self-confidence, which was very inspiring. I tried to use a mind map to record the main points.</p>
<h2 id="Mind-Map">Mind Map</h2>
<pre class="mermaid">graph LR
A(To Be More Confident)-->B1(At parties)
A-->B2(On dates)
A-->B3(In persentations)
A-->B4(In job interviews)
A-->B5(On the telephon)
B1-->C11(Stay relaxed, relax your shoulders, centre your voice)
B1-->C12(Imagine everybody he meets is an old friend)
B1-->C13(I've only got to be there for five minutes)
B2-->C21(Think I'm beautiful, someone loves me, I have a secret)
B2-->C22(Keep yourself positive and only thinking about all the positive parts)
B2-->C23(Ask questions and show you're engaged)
B3-->C31(Practise twice with voice notes)
B3-->C32(Get the body relaxed and prepared)
B3-->C33(See the audience as old friends)
B4-->C41(Get yourself nice and calm and centred)
B4-->C42(Remember to breathe)
B4-->C43(Say it in ordered manner)
B5-->C51(Picture them sitting on the sofa)
B5-->C52(Punch the words as you're talking)
B5-->C53(Stand up)</pre>
<span id="more"></span>
<p>The mind map was generated by Mermaid, here is the script for reference:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(To Be More Confident)--&gt;B1(At parties)</span><br><span class="line">A--&gt;B2(On dates)</span><br><span class="line">A--&gt;B3(In persentations)</span><br><span class="line">A--&gt;B4(In job interviews)</span><br><span class="line">A--&gt;B5(On the telephon)</span><br><span class="line">B1--&gt;C11(Stay relaxed, relax your shoulders, centre your voice)</span><br><span class="line">B1--&gt;C12(Imagine everybody he meets is an old friend)</span><br><span class="line">B1--&gt;C13(I&#x27;ve only got to be there for five minutes)</span><br><span class="line">B2--&gt;C21(Think I&#x27;m beautiful, someone loves me, I have a secret)</span><br><span class="line">B2--&gt;C22(Keep yourself positive and only thinking about all the positive parts)</span><br><span class="line">B2--&gt;C23(Ask questions and show you&#x27;re engaged)</span><br><span class="line">B3--&gt;C31(Practise twice with voice notes)</span><br><span class="line">B3--&gt;C32(Get the body relaxed and prepared)</span><br><span class="line">B3--&gt;C33(See the audience as old friends)</span><br><span class="line">B4--&gt;C41(Get yourself nice and calm and centred)</span><br><span class="line">B4--&gt;C42(Remember to breathe)</span><br><span class="line">B4--&gt;C43(Say it in ordered manner)</span><br><span class="line">B5--&gt;C51(Picture them sitting on the sofa)</span><br><span class="line">B5--&gt;C52(Punch the words as you&#x27;re talking)</span><br><span class="line">B5--&gt;C53(Stand up)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>当日所学</category>
        <category>English_Article</category>
      </categories>
      <tags>
        <tag>Mermaid</tag>
        <tag>英语学习</tag>
        <tag>沟通技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建用户画像？</title>
    <url>/2023/03/04/User-Profile-1/</url>
    <content><![CDATA[<h2 id="什么是用户画像？">什么是用户画像？</h2>
<p>用户画像系统是一个以用户为分析对象，通过各种方法将用户信息进行展示，提供给分析人员全面、准确并具有指导意义的信息，从而优化运营的策略，提高服务效率，最终提高用户满意度。<br>
画像系统最为核心的三个能力，分别是：</p>
<ul>
<li><strong>信息的加工生产能力</strong></li>
<li><strong>信息的分析展示能力</strong></li>
<li><strong>信息的传递能力</strong></li>
</ul>
<h2 id="如何搭建画像系统？"><strong><strong>如何搭建画像系统？</strong></strong></h2>
<h3 id="内容产生">内容产生</h3>
<p>通过埋点及与业务系统数据集成的方式，我们需要将用户在产品中的行为进行记录上报。尽可能准确、全面的采集核心链路的数据。</p>
<span id="more"></span>
<h3 id="画像分析">画像分析</h3>
<p>分析模型是画像系统中的精髓所在。从分析的体量划分，分为群体和单体；从分析的状态划分，分为静态和动态；从分析的路径划分，分为探索分析和目标倒推。</p>
<pre class="mermaid">graph LR
A(用户画像)-->B1(分析的体量)
B1-->B11(群体:用户群画像)
B1-->B12(单体:单个用户画像)
A-->B2(分析的状态)
B2-->B21(静态:当前状态)
B2-->B22(动态:时间演进)
A-->B3(分析的路径)
B3-->B31(探索分析:正向推导)
B3-->B32(目标倒推:智能预测)</pre>
<h3 id="对外输出">对外输出</h3>
<p>在我们生成了用户画像后，接下来落地的场景就是我们需要去应用这个人群或者特征了。这里主要有两个场景，第一个是<strong>使用人群包</strong><br>
，第二个是<strong>使用人群的特征</strong>。</p>
<h2 id="如何搭建自己的标签体系？"><strong><strong>如何搭建自己的标签体系？</strong></strong></h2>
<h3 id="自上而下的需求梳理"><strong><strong>自上而下的需求梳理</strong></strong></h3>
<p>自上而下的需求梳理，可以拆解为几个步骤：运营的目标、运营的方案、人群的拆解。<br>
通过运营目标推导运营方案，通过运营方案进行指标的拆解，当我们把指标进行拆解后，我们自然就知道了需要做哪些事情了，同时我们将场景带入，也就知道需要对哪些人做哪些运营干预。</p>
<h3 id="自下而上的体系构建"><strong><strong>自下而上的体系构建</strong></strong></h3>
<p><strong>第一步 事实标签的搭建：</strong><br>
事实标签只会描述「什么时间」「做了几次」这类真实反映事实的情况。用户的属性、用户的行为指标这些归类为事实标签。</p>
<p><strong>第二步 模型标签的搭建：</strong><br>
模型标签是基于自己的业务判断，或者大数据分析，综合多个维度产生的标签。举个业内最通用的例子，应该就是 RFM 模型的标签了。最近一次消费时间 Recency，消费频率Frequency，消费金额 Monetary，这三个指标都可以使用事实标签进行描述。</p>
<p><strong>第三步 用户群标签的搭建：</strong><br>
有了事实标签和模型标签后，其实已经可以开始进行精细化运营了。但是对于某些特定的场景，我们可以固化下来一些有特征的用户群，比如：高价值流失客群（使用「消费能力」「最近一次访问时间」「消费意愿」……构成）。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>用户画像</tag>
      </tags>
  </entry>
  <entry>
    <title>SIKT模型构建的用户画像</title>
    <url>/2023/03/05/User-Profile-2/</url>
    <content><![CDATA[<h2 id="SIKT模型原理"><strong><strong>SIKT模型原理</strong></strong></h2>
<p>SIKT模型是一套梳理标签的方法。标签是用户画像的基础，是构建画像体系的砖石。想让用户画像系统有用，标签本身得是有价值的。这就要求，在做标签的时候，不能凭着数据人员的直觉，像说贯口一样把“性别、年龄”胡乱怼进系统，而是从业务场景出发，层层递进。</p>
<table>
<thead>
<tr>
<th>模型</th>
<th>说明</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>Scene 场景</td>
<td>具体的业务场景</td>
<td>业务主导</td>
</tr>
<tr>
<td>Index 指标</td>
<td>该场景要达成的目标</td>
<td>业务主导</td>
</tr>
<tr>
<td>Key Behavior 关键行为</td>
<td>达成目标要做的行动</td>
<td>业务主导</td>
</tr>
<tr>
<td>Tag 标签</td>
<td>为了提升效率所需标签</td>
<td>数据主导</td>
</tr>
</tbody>
</table>
<p><strong>步骤</strong>：</p>
<ol>
<li>梳理业务场景。使用方先思考：我要解决什么问题？</li>
<li>梳理关键指标。使用方再思考：用什么指标衡量问题解决？</li>
<li>梳理关键行动。使用方再思考：我做什么事能解决问题？</li>
<li>筛选有用标签。数据协助思考：用什么标签能提升行动效率。</li>
</ol>
<h2 id="如何进行关键行动">如何进行关键行动</h2>
<p>可以从以下行动入手：</p>
<pre class="mermaid">graph LR
A(认知现状)-->B(制定策略)-->C(选择方法)-->D(监控执行)-->E(复盘效果)</pre>
<span id="more"></span>
<h3 id="认知现状">认知现状</h3>
<p>目前状态如何？是否有众多子类需要分别观察？<br>
如果有，可以通过标签来进行分类。</p>
<h3 id="制定策略">制定策略</h3>
<p>是否需要做分群/差异化策略？<br>
如果需要，可以通过标签细分群体。</p>
<h3 id="选择方法">选择方法</h3>
<p>是否有多种方法？每种方法是否有差异化效果？<br>
如果有，可以通过标签筛选方案。</p>
<h3 id="监控执行">监控执行</h3>
<p>每个子类/方法效果如何？<br>
通过标签监控进度。</p>
<h3 id="复盘效果">复盘效果</h3>
<p>是否达成最初预期<br>
复盘标签分类是否达成效果</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>用户画像</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ChatGPT来学习英文(1)</title>
    <url>/2023/02/05/Using-ChatGPT-English-Learning-1/</url>
    <content><![CDATA[<h2 id="来源">来源</h2>
<p>最近在Youtube看到了一个<a href="https://hadarshemesh.com/magazine/chatgpt-for-learning-english/">使用ChatGPT学习英语的方法</a>，总结一下，后续可以自用。</p>
<h2 id="原理">原理</h2>
<p>可以把ChatGPT看成是一个人工智能的机器人，因此可以用它来帮助我们构造学习英语的参加资料，并且帮助我们简化文本或纠正一些错误。</p>
<p>可以使用的场景如下：</p>
<h3 id="1、和ChatGpT开展一个对话">1、和ChatGpT开展一个对话</h3>
<p>可以用以下提示词开展对话：<br>
Can we have a conversation about [Topic]<br>
例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0205-1.png" alt="ChatGPT例子1"></p>
<span id="more"></span>
<p>你也可以用它来纠正你的语法错误,用以下提示词：<br>
Please point out my mistakes in the following sentences:<br>
例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0205-2.png" alt="ChatGPT例子2"></p>
<p>用以下提示词来要求它给出一些词汇用法：<br>
Please suggest certain vocabulary to use in this conversation:</p>
<h3 id="2、准备工作面试">2、准备工作面试</h3>
<p>用以下提示词：<br>
Let’s conduct a mock job interview where you will be asking my questions as if I were interviewing for a [job role]. Please provide feedback on my answers.<br>
例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0205-3.png" alt="ChatGPT例子3"></p>
<h3 id="3、准备自然对话的一些脚本">3、准备自然对话的一些脚本</h3>
<p>用以下提示词：<br>
Write a chat between a teacher and the mother of a student who is having a hard time in school<br>
例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0205-4.png" alt="ChatGPT例子4"></p>
<h3 id="目录">目录</h3>
<p><a href="http://www.yunminitools.cn/2023/02/05/Using-ChatGPT-English-Learning-1/">使用ChatGPT来学习英文(1)</a><br>
<a href="http://www.yunminitools.cn/2023/02/06/Using-ChatGPT-English-Learning-2/">使用ChatGPT来学习英文(2)</a><br>
<a href="http://www.yunminitools.cn/2023/02/08/Using-ChatGPT-English-Learning-3/">使用ChatGPT来学习英文(3)</a></p>
<p>(未完待续…)</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ChatGPT来学习英文(2)</title>
    <url>/2023/02/06/Using-ChatGPT-English-Learning-2/</url>
    <content><![CDATA[<h2 id="学习场景">学习场景</h2>
<p>继续昨天的话题：</p>
<h3 id="4、利用ChatGPT提升讲演能力">4、利用ChatGPT提升讲演能力</h3>
<p>可以用以下提示词让Chatgpt提供话题：</p>
<ul>
<li>Suggest 10 controversial topics to discuss</li>
<li>Write 5 inspiring ideas for conversation</li>
<li>Write 10 questions to reflect on</li>
<li>Write 10 ideas for a TED talk</li>
<li>Suggest different conversation topics to speak with friends/students/colleagues</li>
</ul>
<p>例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0206-1.png" alt="ChatGPT例子5"></p>
<span id="more"></span>
<p>当你有了讲演稿后，也可以让它帮忙修改。</p>
<h3 id="5、利用ChatGPT训练独白和对话">5、利用ChatGPT训练独白和对话</h3>
<p>独白、对话和戏剧脚本是练习音调、语气、发音、语法、句子结构和词汇的绝佳工具。<br>
对于英语学习者，你可以大声朗读这些脚本，并设定你的意图，专注于你想改善的事情，如特定声音的发音、语调、节奏和压力，或其他语言元素。</p>
<p>用以下提示词生成脚本：<br>
Write a comedic monologue about someone who lost all his money</p>
<p>例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0206-2.png" alt="ChatGPT例子6"></p>
<p>下面还有一些可以使用的提示词共参考：<br>
Write a dramatic scene between two lovers<br>
Write a dialogue between two women that is similar in style to the TV show “Law and Order”<br>
Write a monologue about a broken heart<br>
Write a mystery scene between two characters<br>
Write a scene between two characters like a scene from the TV show Friends.<br>
Write a short TED talk about [topic]</p>
<h3 id="6、利用ChatGPT学习语法">6、利用ChatGPT学习语法</h3>
<p><strong>要求ChatGPT用指定的时态或语法生成文本</strong><br>
用以下提示词：<br>
Can you write a short story using the past perfect tense?<br>
例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0206-3.png" alt="ChatGPT例子7"></p>
<p><strong>要求ChatGPT解释语法规则</strong><br>
用以下提示词：<br>
Can you explain when to use the future perfect tense?<br>
例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0206-4.png" alt="ChatGPT例子8"></p>
<p><strong>要求ChatGPT帮忙修改语法错误</strong><br>
用以下提示词：<br>
Correct my grammar mistakes in the following text：<br>
yesterday I had gone to my friend’s house in Washington st.<br>
can you explain your correction?<br>
例如：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0206-5.png" alt="ChatGPT例子9"></p>
<p>还有一些提示词可以参考：<br>
Write a short conversation in [tense] （学习时态）<br>
Write a short story using as many gerunds as possible （学习动名词）<br>
Rewrite this text in the passive voice [add text]  （学习被动语气）<br>
Write 10 example sentences using [tense/grammar form]。</p>
<h3 id="目录">目录</h3>
<p><a href="http://www.yunminitools.cn/2023/02/05/Using-ChatGPT-English-Learning-1/">使用ChatGPT来学习英文(1)</a><br>
<a href="http://www.yunminitools.cn/2023/02/06/Using-ChatGPT-English-Learning-2/">使用ChatGPT来学习英文(2)</a><br>
<a href="http://www.yunminitools.cn/2023/02/08/Using-ChatGPT-English-Learning-3/">使用ChatGPT来学习英文(3)</a></p>
<p>(未完待续…)</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ChatGPT来学习英文(3)</title>
    <url>/2023/02/08/Using-ChatGPT-English-Learning-3/</url>
    <content><![CDATA[<h2 id="学习场景">学习场景</h2>
<p>继续使用ChatGPT来学习英文的话题：</p>
<h3 id="7、利用ChatGPT学习单词">7、利用ChatGPT学习单词</h3>
<p>可以用以下提示词让Chatgpt给出单词含义和例子,或者直接要求列出特定场景可能使用的词汇：</p>
<ul>
<li>What is the meaning of [word]?  （给出含义）</li>
<li>Give 5 example using this word. （给出例子）</li>
<li>What is a synonym for [word].   （给出同义词）</li>
<li>What is a antonym for [word].   （给出反义词）</li>
<li>Please provide me with [scenario] vocabulary. （给出特定场景单词）</li>
<li>Make a list of idioms and expressions related to [topic]（给出特定场景习惯用语）<br>
例如：<br>
要求给出含义解释：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-1.png" alt="ChatGPT例子10"></li>
</ul>
<span id="more"></span>
<p>要求给出5个例子：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-2.png" alt="ChatGPT例子11"></p>
<p>要求给出同义词<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-3.png" alt="ChatGPT例子12"></p>
<p>要求给出反义词<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-4.png" alt="ChatGPT例子13"></p>
<p>要求提供单词清单<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-5.png" alt="ChatGPT例子14"></p>
<p>要求提供习惯用法：<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-6.png" alt="ChatGPT例子15"></p>
<h3 id="8、利用ChatGPT提示你的写作能力">8、利用ChatGPT提示你的写作能力</h3>
<p>比如，你需要给同事写一封邮件，但你不确定如何让它听起来更有礼貌。你可以简单地要求ChatGPT用更正式的语气或友好的语气重写它。</p>
<p>这样当你写完后，你花时间比较你的和ChatGPT的不同版本，并尝试看看你能从有差异的地方学到什么，并且，你可以要求它指出用了那些新的词汇，并要求它解释。</p>
<p>例如：使用以下提升词要求它写一个邮件：<br>
Can you write an email to a client requesting them to reschedule a meeting? Make it friendly but polite.<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-7.png" alt="ChatGPT例子16"></p>
<p>如果不满意，还可以要求它修改：<br>
Can you make it more informal?<br>
<img src="http://cdn.yunminitools.cn/blog/ChatGPT0208-8.png" alt="ChatGPT例子17"></p>
<p>还有一些提升词可以参考：<br>
Write an email about [topic]<br>
Correct my mistakes in the following text<br>
Please rewrite this text and explain your changes [add text]<br>
Can you suggest a better vocabulary to be used in this text?<br>
Rewrite in a more informal way<br>
Rewrite this text in a more polite way</p>
<p>(完)</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Z-library 现阶段可行的访问方法</title>
    <url>/2023/02/10/ZLibrary-Access/</url>
    <content><![CDATA[<p>Z-Library 官方网站近期被美国执法机构查封，无法直接访问。网上研究了一下，找到另一个方法可以继续访问。</p>
<h2 id="访问方法">访问方法</h2>
<p>可以访问 <a href="https://singlelogin.me">singlelogin.me</a>,用Z-Library账号登陆后，可获得私人域名，亲测访问速度很快。请将你的私人域名保密，外泄有禁封的风险。</p>
<h2 id="访问步骤">访问步骤</h2>
<ol>
<li>
<p>登陆网站：<br>
<img src="http://cdn.yunminitools.cn/blog/Zlibrary0210-1.png" alt="步骤1"></p>
</li>
<li>
<p>顺利登陆后，可以看到以下画面，Z-Library又回来了：<br>
<img src="http://cdn.yunminitools.cn/blog/Zlibrary0210-2.png" alt="步骤2"></p>
</li>
</ol>
<p><strong>注意：</strong> 浏览器中的网址为专属私人域名，请收藏到收藏夹，下次可以直接通过这个网址来访问网站。</p>
<span id="more"></span>
<ol start="3">
<li>后面的步骤就和原来使用方法一样，可以愉快的下载图书了。<br>
<img src="http://cdn.yunminitools.cn/blog/Zlibrary0210-3.png" alt="步骤3"><br>
<img src="http://cdn.yunminitools.cn/blog/Zlibrary0210-4.png" alt="步骤4"></li>
</ol>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>电子阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>业务数据治理实施流程-1</title>
    <url>/2023/03/07/business-data-governance-1/</url>
    <content><![CDATA[<p>数据治理实施流程，是我们依据业务数据治理标准化框架在实施解决具体数据问题时，总结抽象出来的一套适用于大多数治理场景解决问题的通用标准流程。标准流程的好处在于更加规范化数据治理工程师的操作流程，来保证实施的质量。流程一共包含5个步骤：</p>
<h2 id="STEP-1：发现问题和制定目标">STEP 1：发现问题和制定目标</h2>
<p>发现问题要从业务数据开发团队的视角出发，围绕服务好业务、遵守数据研发规范、收集好用户反馈，尽可能全地发现和收集相关需要解决的问题。同时，制定的目标要具备可实现性。</p>
<h2 id="STEP-2：设计指标">STEP 2：设计指标</h2>
<p>针对问题进行拆解，设计可衡量的指标，并通过元数据的采集建设进行实现，用做对目标的进一步量化，并作为实施过程监控及治理抓手。</p>
<h2 id="STEP-3：制定SOP并工具化">STEP 3：制定SOP并工具化</h2>
<p>对衡量出来的具体问题，制定相关的解决SOP，并且检查相应的研发标准规范是否完善，通过问题发生的事前、事中、事后几个阶段，建设或完善相应的工具化解决问题的能力。</p>
<h2 id="STEP-4：推广实施">STEP 4：推广实施</h2>
<p>推广运营，以拿结果为核心目标，针对不同角色运用不同策略，重点关注问题解决过程是否会与用户利益发生冲突，控制好节奏，根据问题的重要程度有规划地进行解决。</p>
<h2 id="STEP-5：总结沉淀方法论">STEP 5：总结沉淀方法论</h2>
<p>总结方法论，迭代认知，持续探索问题的最优解，优化治理方案和能力。</p>
<pre class="mermaid">graph LR
subgraph Step1 
A(发现问题)-->B(制定目标)
end

subgraph Step2
B-->C(设计衡量指标)-->D(元数据及指标建设)
end

subgraph Step3
D-->E(解决方案SOP)-->F(工具化)
end

subgraph Step4
F-->G(运营治理)-->H(效果评估)
end

subgraph Step5
H-->I(方法论沉淀)
end</pre>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>first-post</title>
    <url>/2023/02/02/first-post/</url>
    <content><![CDATA[<h2 id="本博客的内容">本博客的内容</h2>
<p>可能包括以下几类：</p>
<ul>
<li>当日所学：学习的总结，包括技术/设计/产品等</li>
<li>日常练习：根据学习中的心得进行的练习过程分享</li>
<li>有趣资源：发现的有趣资源分享</li>
<li>杂项：包括一些心得体会及其他日常</li>
</ul>
<h2 id="更新频率">更新频率</h2>
<p>目前希望是日更，看看是否能坚持</p>
<h2 id="博客目的">博客目的</h2>
<p>作为知识管理的最后一环，需要对知识进行输出，目前我先用博客来实现</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/01/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<span id="more"></span>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>知识管理相关-来自范冰的分享</title>
    <url>/2023/02/03/souKPM01/</url>
    <content><![CDATA[<h2 id="来源">来源</h2>
<p>最近在听 范冰 的播客（EP01 - from 量贩冰糖），讲到了知识管理相关内容，有一些比较有意思的观点，记录下来。</p>
<h2 id="避免FOMO">避免FOMO</h2>
<p>FOMO 全称“Fear of missing out”，意思是害怕错过。简单的说，就是在信息爆炸的时代，我们总是不可避免的被过量的信息包围，没有重点的吸收。<br>
避免FOMO的办法有：<br>
对策1：建立一个心理预期，这些信息之后对我还重要吗？对我重要的时间有多久？如果只在很短的时间里有效，那就抛弃。<br>
对策2：用针对性的工具，去有目的性地关注特定信息，删去无用的渠道和频道 。<br>
对策3：带着komo的心态，knowing of missing out：知道我错过了什么事情，但是我对它心安理得。<br>
对策4：知道自己不想什么信息，那就建立一个手段把自己需要的信息过滤出来</p>
<h2 id="一些原则">一些原则</h2>
<ul>
<li>不要让自己陷入不同切换的过程中，一定要把做事情的门槛降低，降低到你觉得不需要占用额外的思考 ；一件事你需要多做的话，就要让这件事变得越容易。</li>
<li>除了输入，还要做输出，最简单最低成本的输出就是写笔记，即便是再简单的影响方式， 都可能会对世界产生一些积极的影响，带来一些好的价值交换。</li>
<li>笔记的管理不要追求all-in-one。 不要觉得整理是一件很烦人的事情，整理能够加深印象，并帮你过滤掉一些信息。</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
      </tags>
  </entry>
  <entry>
    <title>用户调研的一种方法</title>
    <url>/2023/02/04/userresearch01/</url>
    <content><![CDATA[<h2 id="来源">来源</h2>
<p>最近在即刻看到一个帖子，总结的用户调研方法可以参考一下。</p>
<h2 id="方法论">方法论</h2>
<p>一个完整的用户调研步骤，一共有6大步骤：定目标、定渠道、选方法、定纬度、挖需求、验真假。<br>
可以用一个仪表盘来帮助记忆：</p>
<p><img src="http://cdn.yunminitools.cn/blog/20230204-2.png" alt="仪表盘"></p>
<h3 id="1、用户定位">1、用户定位</h3>
<p>哪些用户是我的目标，哪些是潜在用户，用户有没有需求，平时有哪些痛点或者不满<br>
例如：减肥人群，药物减肥还是健身、还是断食</p>
<h3 id="2、品牌认知">2、品牌认知</h3>
<p>用户对品牌的了解有多少，对产品的认知是什么<br>
例如：大家都了解可口可乐</p>
<h3 id="3、用户触点">3、用户触点</h3>
<p>哪些地方可以接触到用户，平时用户会聚集地在哪里<br>
例如：学习英语的人通常在哪里？在平台，在美剧</p>
<h3 id="4、解决方案（旧的）">4、解决方案（旧的）</h3>
<p>市面上卖蛋黄派的商家都是用什么方法卖这个产品？他们包装都是主打什么？这个产品给用户解决了什么问题？解嘴馋？还是当做早餐？还是健康？还是口味？</p>
<h3 id="5、机会点">5、机会点</h3>
<p>现有的这个产品里面，用户还有什么不满的点，从这些不满的点，挖掘新的机会点。</p>
<h3 id="6、核心壁垒">6、核心壁垒</h3>
<p>你的产品和别人家有什么不同点？你的新在哪里？你的独特的卖点是什么？核心壁垒是什么？你有，别人没有的</p>
<h3 id="7、决策过程／决策要素">7、决策过程／决策要素</h3>
<p>我想要买这个产品，我的决策过程是什么？先考虑品牌？还是对比价格？还是产品口味？还是外部包装？还是数量大小等等，把用户这个决策要素，按照先后顺序排列出来，重点强调用户最关心的点</p>
<h3 id="8、付出成本／我要做什么">8、付出成本／我要做什么</h3>
<p>对应用户愿意要付出多少成本去购买这个产品，用户心理预期价位是多少，用户要做什么动作才能获取到这个产品，需要投入多少精力？</p>
<h3 id="9、收获／好处">9、收获／好处</h3>
<p>对用户而言，我买这个产品，可以帮我解决什么问题，对我有什么好处？<br>
例如蛋黄酥，可以解决我饥饿问题，可以解决我嘴馋问题，可以保证我的健康和体验，这里我们经常会和用户产生一个链接，和用户强相关，人只有看到足够多的好处，他们才愿意付出相应的成本去交换，所以前提要激发大家的获得感。</p>
<p>只有弄清楚，用户需求是什么，产品能解决好什么，在这个过程中，用户的决策心里是怎样，能够得到怎样的好处，那么你调研的问题，也就变得清晰了~</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>用户调研</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊企业服务产品</title>
    <url>/2023/03/20/Talk-about-Enterprise-Services/</url>
    <content><![CDATA[<h2 id="企业服务在解决什么问题？">企业服务在解决什么问题？</h2>
<p>按照亨利·法约尔的说法，无论哪种类型的企业，经营的过程中都会面临这6种活动：技术活动、财务活动、会计活动、商业活动、安全活动、管理活动。</p>
<p>市场上主流的企业服务产品解决的问题分别是：</p>
<ul>
<li>Salesforce、纷享销客解决的是企业的商业活动，帮助企业把产品卖出去，或把产品（资源）买进来。</li>
<li>金蝶、用友解决的是企业的会计活动，帮助企业把账记清楚，各项成本是多少、有多少负债与资产。</li>
<li>Teambition解决的是企业的管理活动，帮助企业把事（项目）理清楚，提高团队协作效率。同样是解决管理活动，薪人薪事的不同点在于它解决的是人的问题，帮助企业把人员的管理变得更高效。</li>
</ul>
<p>即便了解了这个理论，在对市场规模进行预判的时候我们还是会犯错，因为企业发展的不同阶段，每个经营活动的侧重点是不一样的。以互联网公司为例：</p>
<ul>
<li>早期，想法要落地首先需要启动资金，于是企业发展的第一步就是准备BP融点钱，然后开始招聘，租办公场地，购买服务器等设备，所有人的精力都扑在产品上，公司最重要的资产就是产品和技术人员，这个阶段企业最关注的是财务活动和技术活动。</li>
<li>产品打磨的差不多了，下一步准备开始推向市场了，于是要开始考虑哪些渠道推广更有效，涉及到付费的话还要考虑定价策略，因此这个阶段企业最关注的是商业活动，即把产品更好地『卖出去』</li>
<li>一旦产品被市场证明是有效的话，企业会开始考虑规模化复制以便迎来更快的增长。而随着规模的扩大，不可避免会出现组织的『熵增』，于是大家开始关注如何提高企业运转的效率，哪些关键岗位需要更专业的人，哪个环节的效率可以优化。这个阶段企业最关注的是商业活动和管理活动。</li>
</ul>
<span id="more"></span>
<h2 id="什么样的业务拥有高不确定性？">什么样的业务拥有高不确定性？</h2>
<p>业务的不确定性越大，从业者的成长就会越大。那么，以『服务商』的视角来看，什么样的业务属于高不确定性？<br>
答案很多人都猜到了，企业发展的直接动作就是进行商业活动，无论哪种企业，最终大家的关注点都会落在这个上面来。Salesforce、Shopify拥有这么高的市值一点也不奇怪，因为他们帮助企业带来了更高的收益。当然，从资本的角度看，它们还有一个特点：离钱近。<br>
过去，你的产品之所以能够给企业主带来流量和订单，真实原因多半是互联网人口迎来了爆发式增长。然而现在，流量红利逐渐消失了，企业该捞的鱼都捞得差不多了。作为服务商，你就得不断寻求突破。不确定性，<strong>+1</strong>。<br>
早期互联网还没那么发达的时候，用户一般聚集在车站、商场，于是企业做营销的媒体是报纸、电视，甚至传单。后来随着移动互联网的爆发，大量的用户开始出现在各种社交媒体上，于是企业营销的阵地转移到了微信、微博等平台。由于用户的行为、偏好在不断地变化，企业与用户发生关系的场景就得变化。作为服务商，你甚至要早于你的客户发生改变。不确定性，<strong>+2</strong>。<br>
事实上，无论是大环境还是身边的真实案例，让更多人看到了做生意/创业的机会，太多人都想做生意/创业。低门槛导致大量抗风险能力差的企业进入了这个行业，而由于商业活动又是他们最关心的，所以购买一个软件对于他们来说不是特别大的问题。这就是为什么帮助企业解决商业活动的产品，初次订购好于其他业务的原因。但由于企业的抗风险能力差以及对产品的高预期，第二年的续费往往不是那么理想。不确定性，<strong>+3</strong>。</p>
<h2 id="什么样的企业服务才有复利效应？"><strong>什么样的企业服务才有复利效应？</strong></h2>
<h3 id="1-有一定的规模">1.有一定的规模</h3>
<p>有一定的规模就说明产品能解决特定用户、特定场景下的需求，意味着有人买单算是进入了从0到1的阶段。规模越小议价能力就越弱，产生的利润自然是不够的，不但自己吃不饱，合作伙伴也饿着。<br>
按照复利模型，第x年的收益M=A·(1+P)^x，其中A是基数，P是增长率，x是年限。基数太小，就算增长率P再大最终的收益M也不会太大。因此，一定的规模是复利效应的前提条件。所以小公司对外喊复利效应有点自嗨。</p>
<h3 id="2-产品有主导地位">2.<strong>产品有主导地位</strong></h3>
<p>只有产品占有主导地位，新用户在有需求时才会想到你，即所谓的『IBM效应』。而老用户由于在你的系统里产生了数据，哪怕竞争对手采取低价恶意竞争，但产品上你比竞品好太多，以至于老用户的迁移成本变得很高，第二年会接着用。<br>
因此，产品有主导地位会带来新用户的订购，以及老用户的续费。</p>
<h3 id="3-有一定的抗周期能力">3.<strong>有一定的抗周期能力</strong></h3>
<p>对比C端用户，前年喜欢游戏，去年爱社交，今年刷直播。企业服务的好处在于，用户的需求不会变得特别频繁，过去的几十年所有的企业都渴望增长，想要流量和订单，未来的几十年它们大概率也还是需要这些东西。<br>
所以需求侧是稳定的，只要企业具备前面两个条件，并能确保活得够久自然能迎来复利效应。而企业要存活得够久，需要具备一定的抗周期能力。<br>
复利效应追求的是日拱一卒，不慌也不投机，只需要每年都比去年好一点。</p>
<p>心得：想要做有复利效应的企业服务，得先扩大企业规模，上来就想做一个改变世界的产品，基本无法实现。</p>
<p>来自 <a href="https://mp.weixin.qq.com/s/MiUXNEackpOAEjo1QKXhgA">程功夫</a></p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>产品管理</tag>
        <tag>企业服务</tag>
      </tags>
  </entry>
  <entry>
    <title>关于linux vim命令替换的使用</title>
    <url>/2023/03/21/VIM-Replace-Command/</url>
    <content><![CDATA[<p>vim 中可以使用 ：s 命令来替换字符串。以前只会使用一种格式来全文替换，今天发现该命令有很多种写法（linux vi命令真是强大啊，还有很多需要学习），记录几种在此，方便以后查询。</p>
<p>：s/vivian/sky/ 替换当前行第一个 vivian 为 sky<br>
：s/vivian/sky/g 替换当前行所有 vivian 为 sky</p>
<p>：n，$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky<br>
：n，$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky<br>
n 为数字，若 n 为 .，表示从当前行开始到最后一行</p>
<p>：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky<br>
：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky</p>
<p>可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/<br>
：%s+/oradata/apras/+/user01/apras1+ （使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/</p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>中台的设计挑战-1</title>
    <url>/2023/03/22/Design-Challenges-for-the-Middle-Platform-1/</url>
    <content><![CDATA[<p>在做中台设计的过程中，发现中台体系庞大，链路错综复杂，问题也很多。不过这些页面之间都存有一些共性，通过对页面特征的分析，总结出了三种典型的业务场景类型：信息列表类、规则配置类、场景联动类。</p>
<h2 id="1-信息列表类">1.信息列表类</h2>
<p>列表是中后台最为常见的场景之一，传统的列表无非是字段的堆叠，大量相似信息的重复出现，降低了有效信息的捕获和整合效率，加重了认知负荷。大量列表让我们有种看不清重点的错觉，这种现象统称为“看不清”，为了解决这个问题，我们将列表按照其功能分成两大类：<strong>执行类</strong>和<strong>看板类</strong>。执行类列表目的是将所有字段展示完全，方便统一管理和操作；看板类则只要展示关键信息，起到快速查看和监控的作用。</p>
<h3 id="1-1-执行类列表"><strong>1.1 执行类列表</strong></h3>
<p><img src="http://cdn.yunminitools.cn/blog/0322-Design-01.png" alt=" "><br>
这里举一个营销列表的例子，营销列表的作用是对所有的活动进行一个高效的管理。</p>
<span id="more"></span>
<p><strong>Step1</strong>：<strong>信息分类整合</strong><br>
将列表中的信息按照类型划分种类，比如营销列表的字段可以分为以下四类。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-02.png" alt=" "></p>
<p>然后再将相同类型的信息整合在同一区域内，建立布局上的关系。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-03.png" alt=" "></p>
<p><strong>Step2：视觉层级重构</strong><br>
将列表中各个模块更为重要的焦点信息进行突出展示，这里采用了放大字体、加粗、描黑以及图形化的手段，提升这些关键信息在页面中的视觉层级。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-04.png" alt=" "></p>
<p><strong>Step3：视觉流向设计</strong><br>
将各个模块内的信息进行重新的视觉布局，梳理它的视觉流向，使其更符合我们的阅读习惯。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-05.png" alt=" "></p>
<p>通过前后对比，可以看到改版前视觉层级不清晰，内容冗余。改版后层级感突出，关键信息获取效率更高。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-06.png" alt=" "></p>
<p>对比前后视觉流向可以看到，改版前视觉流向上下交替视觉消耗较大，改版后视觉流向平稳，阅读效率更高。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-07.png" alt=" "></p>
<h3 id="1-2-看板类列表"><strong>1.2  看板类列表</strong></h3>
<p>看板类列表采用看板映射法则，分成以下三步进行：<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-A1.png" alt=" "></p>
<p>这里依旧举营销列表为例，这次要做的是营销看板，帮助监控和查看营销活动的时间和状态等信息。<br>
<strong>Step1: 关键信息筛选</strong><br>
第一步选择关键信息，也就是我们最关注的决策信息。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-A2.png" alt=" "></p>
<p><strong>Step2：视觉载体设计</strong><br>
然后选择视觉载体，首先根据营销看板的功能提炼出关键词，如：查看、时间、状态。围绕关键词寻找符合这些关键词寓意的<strong>载体参考物</strong>，比如日历、日程表、待办事项、备忘录等。这里我们选择日历进行载体设计。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-A3.png" alt=""></p>
<p><strong>Step3：建立映射关系</strong><br>
建立营销日历的载体架构，类比日历的功能和结构，设计营销看板的结构和布局，并填充活动信息、时间、状态等内容，建立架构映射关系。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-A4.png" alt=" "></p>
<p>最后营销看板设计完成，可以看到改版后营销活动时间和状态一目了然，数据发展趋势也更加直观。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-A5.png" alt=" "></p>
<p><strong>信息列表可视化小结：</strong><br>
综上所述，信息列表可视化方法可以作如下归纳：通过分析列表类的场景特点，将其分成两种类型的：执行类和看板类。为了解决看不清的问题，我们探索出相应的映射法则作为设计手段，通过筛选关键词，将关键词进行具象的描述，做相应的视觉载体设计。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-A6.png" alt=" "></p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>UI设计</tag>
        <tag>产品管理</tag>
      </tags>
  </entry>
  <entry>
    <title>中台的设计挑战-2</title>
    <url>/2023/03/23/Design-Challenges-for-the-Middle-Platform-2/</url>
    <content><![CDATA[<p>在做中台设计的过程中，发现中台体系庞大，链路错综复杂，问题也很多。不过这些页面之间都存有一些共性，通过对页面特征的分析，总结出了三种典型的业务场景类型：信息列表类、规则配置类、场景联动类。</p>
<h2 id="2-规则配置类">2. 规则配置类</h2>
<p>规则配置类页面是中台业务域中另一种常见的场景，其特点是配置项繁多，且逻辑复杂。繁琐的配置加上复杂的逻辑无疑加重了用户的认知负荷，导致操作低效。<br>
复杂的规则让我们看不懂配置项背后的含义，这类现象统称为“看不懂”。针对该问题，我们意识到可以利用人眼对图形符号更为敏感这一特性，用图形符号代替文本描述，让抽象的概念和复杂的逻辑关系清晰可见，以此来降低理解门槛。<br>
为了更好的帮助我们理解图形符号映射法则，下面举个案例加以说明。</p>
<p><strong>案例  选品特征组合可视化</strong></p>
<span id="more"></span>
<p>这里是一个关于选品特征关系组合的例子。其背景是选品系统，目的是在大量商品中选择出符合我们要求和条件的商品。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-B1.png" alt=" "></p>
<p>选品特征组合操作如下：首先选择符合要求的条件，然后再对选中的条件进行规则配置。这些配置当前是“是、否、包含、不包含”等文字的描述呈现条件之间的<strong>交并关系</strong>，然而这种形式会耗费不少脑力资源在解读文字信息上，无疑加重了我们的思维压力。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-B2.png" alt=" "><br>
为了减轻思维负担，我们采用图形符号映射法则进行设计。围绕特征组合的功能提取关键词，如关系、结构、组合等能够传达组合关系的词语，然后探索合适的载体。这里我们采用了布尔运算的符号来描述条件之间的“且、或”关系，形象的符号降低了语义理解难度。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-B3.png" alt=" "></p>
<p><strong>规则配置可视化小结：</strong><br>
综上所述，由于规则配置类场景具有逻辑复杂难以理解的特点，造成看不懂的问题，可以用图形符号映射法则来解决。通过寻找符合场景特征的关键词，匹配合适的载体参考物，做具体的视觉载体设计。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-B5.png" alt=" "></p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>UI设计</tag>
        <tag>产品管理</tag>
      </tags>
  </entry>
  <entry>
    <title>中台的设计挑战-3</title>
    <url>/2023/03/24/Design-Challenges-for-the-Middle-Platform-3/</url>
    <content><![CDATA[<p>在做中台设计的过程中，发现中台体系庞大，链路错综复杂，问题也很多。不过这些页面之间都存有一些共性，通过对页面特征的分析，总结出了三种典型的业务场景类型：信息列表类、规则配置类、场景联动类。</p>
<h2 id="3-场景联动类"><strong>3. 场景联动类</strong></h2>
<p>在中台业务域中，有许多与C端紧密相关的场景，但我们似乎并未抓住这种适合互动的机会，前中后台之间缺乏沟通与联动。整个系统就像一座冰山，前台只是冰山一角，冰面之下隐藏着庞大的中台系统，这就形成了前后之间虽然关系紧密但彼此看不见的情况。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-C1.png" alt=" "></p>
<span id="more"></span>
<p>为了解决看不见的问题，我们可以从加强C端与中台之间的联动入手，通过C端所见即所得法则建立前后台之间可视化的桥梁，把这层联动关系清晰展示。为了更好的帮助我们了场景联动可视化的方法，下面举个常见的案例来介绍下所见即所得映射法则的用法。</p>
<p><strong>案例  权益卡券可视化</strong><br>
“权益”在营销业务中经常被提及，优惠券是最常见的权益发放载体。这些看似简单的卡券背后其实有着复杂的配置规则，如下图所示，很多优惠券都需要经过繁琐的字段配置后，才能生成一张可用的卡券。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-C2.png" alt=" "></p>
<p>上述方式缺乏前后台之间的场景联动，影响卡券创建效率。所以这里可以做<strong>前后联动关系的映射</strong>，最简单的方式就是将C端的卡券样式作为载体参考，将配置中的页面结构、内容等都与券面建立对应关系。这种方法不仅简化了流程，也增强了对卡券创建后效果的体感。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-C3.png" alt=" "><br>
<strong>场景联动可视化小结：</strong><br>
综上所述，在场景联动类业务中，因为与C端界面关系紧密但却并未将这层紧密的关系可视化的表达，导致看不见现象的发生，针对这类问题，我们可以采用所见即所得映射法来建立前后台之间的映射关系。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-C4.png" alt=" "></p>
<h2 id="可视化设计总结">可视化设计总结</h2>
<p>通过上文的研究和实践，最终总结出了一套适合当前中台可视化设计的方法：首先分析业务场景，根据其特点确定场景类型，思考是否存在该类场景下的典型问题，根据问题定位设计策略，执行匹配的映射法则。做设计时，可以多维度提炼能够描述该类场景的关键词，然后寻找合适的载体参考物，进行相应的视觉载体设计。这就是整个可视化设计的流程。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-D1.png" alt=" "></p>
<p>进一步来说，可视化其实主要在做两件事：首先围绕场景特点多维度提取关键词，然后将关键词进行具象的表达，最终落地在对视觉载体的设计上。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-D2.png" alt=" "></p>
<p>更进一步来说，就是建立业务场景与视觉载体之间的映射关系。<br>
<img src="http://cdn.yunminitools.cn/blog/0322-Design-D3.png" alt="http://cdn.yunminitools.cn/blog/0322-Design-D3.png"></p>
<p>综上所述，可以用一句话来概括可视化设计的本质：通过对<strong>关键词</strong>的可视化表达，建立<strong>抽象业务场景</strong><br>
与<strong>具象视觉载体</strong>之间的<strong>映射关系。</strong></p>
<p>来自：<a href="https://mp.weixin.qq.com/s?__biz=Mzg4NjEwOTE1Mw==&amp;mid=2247487008&amp;idx=1&amp;sn=5b3e5f4be15ee857dd4f09a06d8e15ee&amp;scene=21#wechat_redirect">善月</a></p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>UI设计</tag>
        <tag>产品管理</tag>
      </tags>
  </entry>
  <entry>
    <title>思考问题的工具和框架</title>
    <url>/2023/03/25/Tools-for-better-thinking/</url>
    <content><![CDATA[<h2 id="网站特点">网站特点</h2>
<p>发现一个帮助更好思考问题的工具「<a href="https://untools.co/">untools</a>」，收集了各种思维工具和框架，可以帮助我们更好地理解问题、分析、决策，包括有常用的金字塔、鱼骨图、二阶思维等，类似于选择不同的思维模型来解决不同的问题。<br>
<img src="http://cdn.yunminitools.cn/blog/0325-untools.png" alt="https://untools.co/"></p>
<h2 id="网站结构">网站结构</h2>
<h3 id="系统思考">系统思考</h3>
<ul>
<li>概念地图（<a href="https://untools.co/concept-map">Concept map</a>）: 形象地理解一个概念或系统，了解其实体之间的关系。</li>
<li>连接圈（<a href="https://untools.co/connection-circles">Connection circles</a>）:是一种将故事或系统中的关系可视化的工具。它们通过看到系统中的因果关系来帮助你理解复杂性。</li>
<li>冰山模型(<a href="https://untools.co/iceberg-model">Iceberg Model</a>):通过查看隐藏的抽象级别来发现事件的根本原因。</li>
<li>平衡反馈回路(<a href="https://untools.co/balancing-feedback-loop">Balancing feedback loop</a>):是一种机制，它抵制在一个方向的进一步变化。它以反方向的变化来对抗一个方向的变化。它试图稳定一个系统。</li>
<li>强化反馈回路(<a href="https://untools.co/reinforcing-feedback-loop">Reinforcing feedback loop</a>):了解指数（复利）变化背后的力量。</li>
</ul>
<span id="more"></span>
<h3 id="做决策">做决策</h3>
<ul>
<li>Cynefin管理决策框架（<a href="https://untools.co/cynefin-framework">Cynefin framework</a>）：对不同的情况作出判断，以选择适当的反应。</li>
<li>6顶帽子思考法（<a href="https://untools.co/six-thinking-hats">Six Thinking Hats</a>）：从不同的角度来看待一个决定</li>
<li>二阶思维（<a href="https://untools.co/second-order-thinking">Second-order thinking</a>）： 考虑你的决定的长期后果。</li>
<li>艾森豪威尔法则（<a href="https://untools.co/eisenhower-matrix">Eisenhower Matrix</a>）： 按照重要性和紧迫性对你的行动和任务进行优先排序</li>
<li>推论阶梯（<a href="https://untools.co/ladder-of-inference">Ladder of inference</a>）：避免急于下结论。根据现实做出决定。</li>
<li>决策矩阵（<a href="https://untools.co/decision-matrix">Decision matrix</a>）：通过考虑多种因素选择最佳方案。</li>
<li>信心决定了速度与质量（<a href="https://untools.co/confidence-determines-speed-vs-quality">Confidence determines speed vs. quality</a>）：在建造产品时确定速度和质量之间的权衡。</li>
<li>困难选择模型（<a href="https://untools.co/hard-choice-model">Hard choice model</a>）：弄清楚你在做什么样的决定。</li>
</ul>
<h3 id="问题解决">问题解决</h3>
<ul>
<li>鱼骨图（<a href="https://untools.co/ishikawa-diagram">Ishikawa Diagram</a>）：确定问题的根本原因。</li>
<li>冲突解决图（<a href="https://untools.co/conflict-resolution-diagram">Conflict Resolution Diagram</a>）：找到解决冲突的双赢办法。</li>
<li>生产性思维模型（<a href="https://untools.co/productive-thinking-model">Productive Thinking Model</a>）：创造性地、高效地解决问题。</li>
<li>抽象阶梯（<a href="https://untools.co/abstraction-laddering">Abstraction laddering</a>）：用不同的抽象层次来更好地构建你的问题。</li>
<li>逆向（<a href="https://untools.co/inversion">Inversion</a>）：从不同的角度来处理问题。</li>
<li>逻辑树（<a href="https://untools.co/issue-trees">Issue trees</a>）：以系统的方式构造和解决问题。</li>
<li>第一性原理（<a href="https://untools.co/first-principles">First principles</a>）：将复杂的问题分解成基本元素，并从中创造出创新的解决方案。</li>
</ul>
<h3 id="沟通">沟通</h3>
<ul>
<li>金字塔原理（<a href="https://untools.co/minto-pyramid">Minto Pyramid</a>）：让你的沟通更加高效和清晰。</li>
<li>SBI模型（<a href="https://untools.co/situation-behavior-impact">Situation-Behavior-Impact</a>）：给予他人更清晰的反馈，不做评判。</li>
</ul>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>工具框架</tag>
      </tags>
  </entry>
  <entry>
    <title>概念地图介绍</title>
    <url>/2023/03/26/Concept-map-1/</url>
    <content><![CDATA[<h2 id="什么是概念地图？">什么是概念地图？</h2>
<p><a href="https://wiki.mbalib.com/w/index.php?title=%E7%BA%A6%E7%91%9F%E5%A4%AB%C2%B7D%C2%B7%E8%AF%BA%E7%93%A6%E5%85%8B&amp;action=edit">约瑟夫·D·诺瓦克</a>（<a href="https://wiki.mbalib.com/w/index.php?title=Joseph_D.Novak&amp;action=edit">Joseph D.Novak</a>）于20世纪70年代，在康奈尔大学（Cornell University）发展出概念图绘制技巧。当时，Novak将这种技巧应用在科学教学上，做为一种增进理解的教学技术。Novak的设计是基于<a href="https://wiki.mbalib.com/wiki/%E5%A4%A7%E5%8D%AB%C2%B7%E5%A5%A5%E8%8B%8F%E4%BC%AF%E5%B0%94">大卫·奥苏伯尔</a>（<a href="https://wiki.mbalib.com/wiki/David_Ausubel">David Ausubel</a>）的同化理论（assimilation theory）。<a href="https://wiki.mbalib.com/wiki/%E5%A5%A5%E8%8B%8F%E4%BC%AF%E5%B0%94">奥苏伯尔</a>根据建构式学习（constructivism learning）的观点，强调先前知识（prior knowledge）是学习新知识的基础框架（framework），并有不可取代的重要性。在Novak的著作《习得学习》（Learning to Learn）中，指出“<a href="https://wiki.mbalib.com/wiki/%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E5%AD%A6%E4%B9%A0">有意义的学习</a>，涉及将新概念与命题的同化于既有的认知架构中。”<br>
Novak教授认为，概念图是某个主题的概念及其关系的图形化表示，概念图是用来<a href="https://wiki.mbalib.com/wiki/%E7%BB%84%E7%BB%87">组织</a>和表征知识的工具。它通常将某一主题的有关概念置于圆圈或方框之中，然后用连线将相关的概念和命题连接，连线上标明两个概念之间的意义关系。概念图又可称为概念构图（concept mapping）或概念地图（concept maps）。前者注重概念图制作的具体过程，后者注重概念图制作的最后结果。现在一般把概念构图和概念地图统称为概念图而不加于严格的区别。<br>
在概念图中，由方形表示概念，如“狗”和“动物”等等。概念间的关系则以标名(labelled)的箭头线段连结，箭头的方向表示往下发展的层次。这些线段会像是：“引发”、“导致”、“需要”、“提供”等等。</p>
<h2 id="概念图的组织结构">概念图的组织结构</h2>
<p>“概念图”是一种知识以及知识之间的关系的网络图形化表征，也是<a href="https://wiki.mbalib.com/wiki/%E6%80%9D%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96">思维可视化</a>的表征。一幅概念图一般由“节点”、“链接”和“有关文字标注”组成。</p>
<p><strong>1、节点：</strong> 由几何图形、图案、文字等表示某个概念，每个节点表示一个概念，一般同一层级的概念用同种的符号（图形）标识。概念是可以用于交流的指代明确的符号（词汇、语言等形式）。<br>
<strong>2、链接：</strong> 表示不同节点间的有意义的关系，常用各种形式的线链接不同节点，这其中表达了构图者对概念的理解程度。<br>
<strong>3、文字标注：</strong> 可以是表示不同节点上的概念的关系，也可以是对节点上的概念详细阐述，还可以是对整幅图的有关说明。</p>
<p>举例：<br>
<img src="http://cdn.yunminitools.cn/blog/0326-WhatIsCmap.jpeg" alt="《什么是概念地图》"></p>
<h2 id="概念地图的优势">概念地图的优势</h2>
<ul>
<li>层次结构明显</li>
<li>长程连接更容易看到</li>
<li>维基融合，主动性导航型知识库</li>
</ul>
<p>举例：<br>
<img src="http://cdn.yunminitools.cn/blog/0326-ReadABook.jpeg" alt="《如何阅读一本书》"></p>
<span id="more"></span>
<h2 id="我的理解">我的理解</h2>
<p>概念地图是一种概念的图形化表达，与思维导图相比：</p>
<ul>
<li>概念地图更强调概念和关系的表示，通常是将不同的概念之间的关系放在一起，形成一个完整的概念网络；</li>
<li>概念地图更注重文字和概念的表达，图形元素使用较少；</li>
<li>概念地图更注重于关系和内在的联系。</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>工具框架</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：《GPT-4 ，通用人工智能的火花》论文内容精选与翻译</title>
    <url>/2023/03/27/Sparks-of-Artificial-General-Intelligence/</url>
    <content><![CDATA[<h2 id="引言：">引言：</h2>
<p>《通用人工智能的火花：GPT-4早期实验》是3月最重要的一篇论文，引起了广泛的关注和讨论，但是论文长达 154页，中文版本还无人翻译。</p>
<p><a href="https://www.notion.so/GPT-4-8fc50010291d47efb92cbbd668c8c893">本文</a>挑选了论文中的重点结论并进行翻译，虽然已经是精选，但仍然超过万字。但考虑到 GPT5 明年才能面世，这篇文章在今年什么时候看都不晚。</p>
<p>微软的研究院在很早期就接触到了 GPT-4 的非多模态版本，并对齐进行了详尽的测试。这篇论文就是整个的测试过程和结论。不管是测试方法还是结论都非常精彩，强烈推荐看一遍，传送门在此 。<a href="https://arxiv.org/pdf/2303.12712v1.pdf">https://arxiv.org/pdf/2303.12712v1.pdf</a></p>
<p>本文的翻译没有添加任何夸张的修辞（DeepL和ChatGPT贡献也很大），但文中透露的信息本身已足够震撼。</p>
<p>本文目的是和大家分享当前AI最新的进展，欢迎分享转发，如需转载，只需要注明作者信息 <a href="https://web.okjike.com/u/FCEA29D3-5BB5-4174-B7A9-1DEE77CEDC46">orange.ai</a> 和原始链接 <a href="https://www.notion.so/GPT-4-8fc50010291d47efb92cbbd668c8c893">https://orangeblog.notion.site/GPT-4-8fc50010291d47efb92cbbd668c8c893</a></p>
<span id="more"></span>
<h2 id="基本信息：">基本信息：</h2>
<p><strong>测试者：Microsoft Research</strong><br>
<strong>测试模型：GPT-4早期模型，非多模态版本。</strong></p>
<p><strong>基本结论：</strong><br>
尽管是纯粹的语言模型，这个早期版本的GPT-4在各种领域和任务上表现出显著的能力，包括抽象、理解、视觉、编码、数学、医学、法律、对人类动机和情感的理解等等。</p>
<p><strong>GPT-4的能力具有普遍性，它的许多能力跨越了广泛的领域，而且它在广泛的任务中的表现达到或超过了人类水平，这两者的结合使我们可以说GPT-4是迈向AGI的重要一步。</strong></p>
<p>虽然GPT-4在许多任务上达到或超过了人类的水平，但总体而言，它的<strong>智能模式明显地不像人类</strong>。</p>
<p>GPT-4只是迈向通用智能系统的第一步。然而即使作为第一步，GPT-4也挑战了相当多的关于机器智能的假设，并表现出涌现的行为和能力，其来源和机制目前还不够清楚。</p>
<p>我们撰写本文的主要目的是分享我们对GPT-4的能力和局限性的探索，以支持我们关于技术飞跃的评估。我们相信，<strong>GPT-4的智能标志着计算机科学领域及其他领域的真正范式转变</strong>。</p>
<p><strong>研究方法：</strong><br>
本文的更接近于传统的心理学而不是机器学习，借鉴了人类的创造力和好奇心。我们的目标是生产新的和困难的任务和问题，令人信服地证明GPT-4远远超出了记忆的范围，并且它对概念、技能和领域有深刻和灵活的理解。我们还旨在探究GPT-4的反应和行为，以验证其一致性、连贯性和正确性，并揭示其局限性和偏见。我们承认，这种方法有些主观和不正式，可能无法满足科学评估的严格标准。然而，我们认为这是一个有用的和必要的第一步，以了解GPT-4的显著能力和挑战，这样的第一步为开发更正式和全面的方法来测试和分析具有更普遍智能的AI系统开辟了新的机会。</p>
<p>GPT-4的主要优势在于它对自然语言的掌握无可比拟。它不仅可以生成流畅和连贯的文本，还可以以各种方式理解和处理文本，如总结、翻译或回答一系列极其广泛的问题。此外，<strong>我们所说的翻译不仅是指不同自然语言之间的翻译，还包括语气和风格的翻译，以及跨领域的翻译，如医学、法律、会计、计算机编程、音乐等等</strong>。这些技能清楚地表明，<strong>GPT-4能够理解复杂的思想</strong>。</p>
<p>许多读者心中可能萦绕的一个问题是，GPT-4是否真正理解了所有这些概念，或者它是否只是在即兴发挥方面比以前的模型好得多，而没有任何真正深刻的理解。我们希望在阅读完这篇论文后，这个问题几乎会被反转，让人不禁思考：**真正深刻的理解和即兴临场发挥的差别在哪里？**一个能通过软件工程候选人考试的系统难道不是真正的智能吗？对于【真正深刻的理解】，也许唯一的测试手段，就是看它能否能产生新的知识，比如证明新的数学定理，而这一壮举目前对大语言模型来说仍然遥不可及。</p>
<h2 id="一、多模态测试">一、多模态测试</h2>
<p>智能的一个关键衡量标准是能够从不同领域或模态中综合信息，并能够在不同的情境或学科中应用知识和技能。GPT-4不仅在文学、医学、法律、数学、物理科学和编程等不同领域表现出高水平的熟练程度，而且还能够流畅地结合多个领域的技能和概念，展示出对复杂思想的令人印象深刻的理解。除了自然语言实验，我们还探索了两种可能出乎意料的模态，其中涉及视觉和音频（再次强调，<strong>我们的实验是在GPT-4的早期版本上进行的，该版本不是多模态的</strong>）。</p>
<p>我们探讨了GPT-4如何生成和识别不同模式的物体，如矢量图、3D场景和音乐。我们表明，<strong>尽管GPT-4只接受过文本训练，但它能理解和处理多模态信息。</strong></p>
<p><strong>绘制图像</strong></p>
<p>给模型指令，让模型使用可伸缩矢量图形（SVG）生成猫、卡车或字母等对象的图像，有人可能会说：这只是复制了训练数据中的代码，而且它只学习了文本概念，不可能理解视觉，怎么可能创建图像呢？<br>
但模型确实掌握了视觉能力，以下是一些证据。<br>
<strong>画小人</strong><br>
要求 GPT4 画出一个小人，测试其视觉能力<br>
指令：使用TikZ代码，画出一个由字母组成的人。胳膊和躯干可以是字母Y，脸可以是字母O（添加一些面部特征），腿可以是字母H的腿。<br>
指令：躯干有点太长，手臂太短，看起来像右臂在扛着脸，而不是脸在躯干的正上方。请你纠正这一点好吗？<br>
指令：请添加衬衫和裤子。<br>
<img src="http://cdn.yunminitools.cn/blog/2023-03-27GPT4-1.png" alt=" "></p>
<p>生成 <strong>3D 模型</strong><br>
要求 GPT4 使用Javascript生成一个3D模型。</p>
<blockquote>
<p>一个由漂浮的岛屿、瀑布和桥梁组成的幻想景观，一条龙在空中飞翔，最大的岛屿上有一座城堡。</p>
</blockquote>
<p>与二维实验类似，我们要求GPT-4以各种方式修改三维模型，如添加、重新定位、重新着色物体和改变龙的轨迹。GPT-4正确地完成了许多任务。最终结果如图所示。<br>
这是一个有多条龙在岛屿上空盘旋的三维动画：<br>
<img src="http://cdn.yunminitools.cn/blog/2023-03-27GPT4-2.png" alt=" "></p>
<p><strong>空间理解</strong></p>
<p>图像生成模型近几年的发展和探索很多，但它们大多缺乏空间理解能力，且不能遵循复杂指令。使用 GPT4 生成草图可以极大地改善图像生成模型的效果。</p>
<p>指令：一张显示3D城市建造游戏截图。截图显示了一个地形，其中有一条从左到右的河流，河流下方是一片沙漠，有一座金字塔，而河流上方有许多高层建筑的城市。屏幕底部有4个按钮，分别是绿色、蓝色、棕色和红色。<br>
<img src="http://cdn.yunminitools.cn/blog/2023-03-27GPT4-3.png" alt=" "></p>
<p><strong>音乐能力</strong></p>
<p>GPT-4 能够以**<a href="https://zh.wikipedia.org/wiki/ABC%E8%AE%B0%E8%B0%B1%E6%B3%95">ABC记谱法</a>**生成旋律，并在某种程度上解释和操作它们的结构。但是，我们无法让模型生成不常见的和声。</p>
<p>需要注意的是，<strong>ABC记谱法</strong>并不是一种非常广泛使用的格式，实际上，模型无法以<strong>ABC记谱法</strong>生成最著名的旋律，也无法识别这些著名旋律的谱子。（例如“欢乐颂”、“致爱丽丝”或“绿袖子”等音乐，尽管在网络上有很多这些音乐的ABC谱）</p>
<h2 id="二、Code-测试">二、Code 测试</h2>
<h3 id="1-LeetCode-考题测试">1.LeetCode 考题测试</h3>
<p>为了防止模型作弊，此测试只用了模型训练完成之后所产生的新考题作为测试集。来自 LeetCode ，共100个问题。</p>
<p>并以人类的回答水平作为对比，人类样本中去除了全错的用户数据以保证质量。</p>
<p>k=1 是第一次尝试<br>
k=5 是前五次尝试</p>
<p>考题分为 容易、中等、困难 三种级别。</p>
<p>考试结果如下：<br>
人类               38.2分<br>
GPT3.5 k=1 ，19分，k=5，36分，接近人类水平<br>
GPT4    k=1 ，38分，达到人类水平，k=5 53 分，超过人类水平。</p>
<p>并且在中等和困难难度下，k=1就超过了人类。</p>
<h3 id="2-解决真实问题">2.解决真实问题</h3>
<p>代码测试题可以评估算法和数据结构的技能。然而，它们经常无法体现真实世界编码任务的全部复杂性和多样性，这需要专业领域知识、创造力以及整合多个组件和库的能力，以及更改现有代码的能力。为了评估GPT-4在更现实的环境中编码的能力，我们设计了端到端的真实世界编码挑战，涉及数据可视化、LATEX编码、前端开发和深度学习等领域，每个领域都需要不同的专业技能。对于每个任务，我们提供高级指令，要求GPT-4使用适当的语言和框架编写代码。在一些情况下，我们还会在代码编写后更改规格，并要求更新代码。</p>
<p><strong>LATEX 测试</strong><br>
用LATEX写作对计算机科学家和数学家来说是一项重要的练习，即使是专家也会犯令人恼火的错误，由于其严格的语法和缺乏良好的调试器，每天需要几个小时才能修复。我们要求GPT-4将用半严格的（buggy）LATEX代码混合自然语言编写的片段传输到准确的LATEX命令中，这些命令可以一次性正确编译。ChatGPT3.5则只能生成一个因使用“#”和“\color”等错误而无法编译的片段。</p>
<p><strong>代码理解能力测试</strong><br>
能执行代码自然就说明理解了代码。<br>
需要注意的是，**GPT-4不是在Python解释器上运行代码，而是用自然语言模拟代码。**这需要对代码的高度理解和推理，以及清晰传达结果的能力。</p>
<h2 id="三、数学">三、数学</h2>
<p>我们在两个通常用作基准的数学数据集上比较GPT-4、ChatGPT和Minerva（解决数学问题的最新LLM）的性能：GSM8K 和MATH 。GSM8K是一个小学数学数据集，包含8000个关于算术、分数、几何和单词问题等主题的问题和答案。MATH是一个高中数学数据集，包含12,500个关于代数、微积分、三角学和概率等主题的问题和答案。我们还在MMMLU-STEM数据集上测试模型，该数据集包含大约2000个多个选择（4个选择）问题，涵盖高中和大学STEM主题。这些数据集突出了GPT-4使用正确方法解决高中数学问题的能力。</p>
<p>结果：</p>
<p>GPT4 在每个数据集上的测试都超过了 Minerva，并且在两个测试集的准率都超过 80% 。</p>
<p>再细看 GPT4 犯错的原因，68% 的错误都是计算错误，而不是解法错误。（ChatGPT3.5则容易犯解法错误）。</p>
<h3 id="四、与世界交互">四、与世界交互</h3>
<h3 id="1-网络交互">1.网络交互</h3>
<p><strong>管理用户的日历和电子邮件</strong><br>
在下图，我们说明了GPT-4如何能够使用多个工具组合来管理用户的日历和电子邮件。用户要求GPT-4与另外两个人协调晚餐，并在用户有空的晚上预订。GPT-4使用可用的API来检索用户日历的信息，通过电子邮件与其他人协调，预订晚餐，并向用户发送详细信息。在这个例子中，GPT-4展示了它将多个工具和API组合起来的能力，以及对自由输出进行推理以解决复杂任务的能力（例如，“星期二或星期三晚上”与“周一到周四的任何一天”相结合，以及用户在星期二忙碌，导致只有周三是可行的选择）。<br>
ChatGPT3.5（未显示在图中）无法完成相同的任务，而是编写了一个函数，其中 “joe@microsoft.com” 通过电子邮件向 “luke@microsoft.com” 发送一个日期，并检查响应是否包含“yes”令牌。ChatGPT3.5也无法在给出其函数输出时做出响应。</p>
<p><strong>浏览网页</strong><br>
GPT-4使用搜索引擎和SUMMARIZE函数（它下载网页并根据提出的问题调用自身来进行总结）来浏览网络并回答问题。**GPT-4能够识别相关的搜索结果并深入研究它们，总结它们，并提供准确的答案，即使问题包含错误的前提也是如此。**虽然之前的LLM也有浏览网络能力，但GPT-4在这方面表现的更加出色，能够更准确地回答问题。</p>
<h3 id="2-实体交互">2.<strong>实体交互</strong></h3>
<p>虽然网络工具的使用是交互性的一个重要方面，但现实世界中的大多数交互并不是通过API进行的。例如，人类能够使用自然语言与其他代理进行通信，探索和操纵他们的环境，并从他们的行动结果中学习。这种具有实体的交互需要代理人理解每次交互的上下文、目标、行动和结果，并相应地进行适应。虽然GPT-4显然不是具有实体的，但我们探讨它是否能够通过使用自然语言作为文本接口来参与实体交互，包括模拟或真实世界的各种环境。</p>
<p><strong>文字解密游戏</strong><br>
GPT-4浏览地图后对其“看到”的内容进行总结。在GPT-4的总结中，每个房间的门数与GPT-4在每个房间尝试的方向数完全相同。此外，GPT-4也会根据它们的名称和连接方式“想象”房间的外观。</p>
<p><strong>结论：</strong><br>
虽然GPT-4显然不是具有实体的，但上述示例说明了语言是一个强大的接口，使GPT-4能够执行需要理解环境、任务、行动和反馈，并相应地进行适应的任务。<strong>虽然它不能实际看到或执行动作，但可以通过替代者（例如人类）来执行这些任务。</strong></p>
<h2 id="五、与人类交互">五、与人类交互</h2>
<p>心智理论对于与其他智能体的有效沟通和合作至关重要，因为它允许人们推断他们的目标、偏好、动机和期望，并相应地调整自己的行动和话语。此外，心智理论对于向他人学习也很重要，因为它使人能够解释他们的反馈、建议和示范。</p>
<p><strong>在现实场景中进行心智理论测试</strong></p>
<blockquote>
<p><strong>对话</strong></p>
<p>马克：我不喜欢你昨天晚上对待杰克的方式<br>
朱迪：你看到他在做什么了吗？他打了他哥哥的头!<br>
马克：这并不能成为你对他大喊大叫的理由<br>
朱迪：你想让我怎么做？让他打他的弟弟，然后什么都不说？<br>
马克：不，我不同意<br>
朱迪：那你为什么要为他辩护？</p>
</blockquote>
<p><strong>提问：马克的意图似乎是什么？</strong><br>
GPT4: 马克的意图似乎是要表达他对朱迪处理与杰克关系的方式的不满，并建议她可以更加冷静和尊重。<br>
ChatGPT：根据谈话内容，马克的意图似乎是为杰克的行为辩护，并表达他对朱迪对待杰克的不满。</p>
<p><strong>提问：朱迪如何看待汤姆的回应？</strong><br>
GPT4: 朱迪认为他的评论是对她的分析能力的攻击，也是对杰克的不当行为表示同情的表现。她的反应是防御性的和愤怒的，并质疑马克的动机。<br>
ChatGPT：如果没有更多的文字，我不可能准确判断朱迪是如何接受马克的评论的。然而，根据朱迪的回应，她似乎并不同意马克的观点，而且可能对他为杰克的行为辩护感到沮丧。</p>
<p><strong>提问：他们的谈话为什么没有实际进展？</strong><br>
GPT4: 他们没有取得进展，因为他们在谈论对方，没有倾听对方的观点。他们还在使用指责性和煽动性的语言，如 “辩解”、“吼叫”、&quot;辩护 &quot;和 “打人”。他们没有承认自己话语背后的情绪或需求，也没有试图找到一个共同点或解决方案。<br>
ChatGPT：从所提供的信息中并不清楚为什么马克和朱迪在他们的对话中没有取得进展。有可能是他们的观点有冲突，或者在所讨论的问题上无法找到共同点。如果没有更多的背景，就很难确定他们没有取得进展的具体原因。</p>
<p><strong>提问：他们中的任何一个人如何能改善情况以达成一致意见？</strong><br>
GPT4:他们中的任何一个人都可以通过几种方式来改善局面，以达成协议，比如说：</p>
<ul>
<li>马克可以先承认朱迪对弟弟安全的担忧以及她对杰克行为的挫败感，然后解释他不是在为杰克辩护，而是担心喊叫对他们的关系和自尊的影响。他还可以问朱迪，她认为什么是管教杰克的更好方法，并提供他的支持和建议。</li>
<li>朱迪可以降低她的声音，调低她的怒气，并倾听马克的观点，不打断或评判。她也可以承认，她可能反应过度，她感到压力和不知所措。她还可以问马克，他认为与杰克沟通的更好方式是什么，并表示她愿意作为一个团队一起工作。</li>
</ul>
<p>ChatGPT：马克和朱迪有几种方法可以尝试改善情况并达成协议：</p>
<ol>
<li>他们可以尝试理解对方的观点，积极听取对方的观点。这可能有助于他们发现任何误解并找到共同点。</li>
<li>他们可以尝试妥协，找到一个能满足他们双方需求或关注的解决方案。</li>
<li>他们可以尝试使用尊重和非正面的语言来交流他们的想法和感受。</li>
<li>他们可以寻求中立第三方的帮助，如调解员，以促进交流并帮助他们达成协议。</li>
<li>如果对话变得过于激烈或困难，他们可以先休息一下，等以后双方都比较冷静，能够更有效地进行沟通时再回来讨论。</li>
</ol>
<p>结果表明：<strong>GPT-4在需要推理他人心理状态的现实场景中优于ChatGPT</strong>，并且在社会环境中会为共同目标提出合作行动。GPT-4具有非常高级的心智理论水平。虽然ChatGPT在基本测试中也表现良好，但似乎GPT-4更加心思细腻，能够更好地推理多个行动者，以及各种行动如何影响他们的心理状态，特别是在更现实的场景中。</p>
<h2 id="六、自回归模型的局限性">六、自回归模型的局限性</h2>
<p>由于GPT-4是自回归的，每输出的下一个单词都是基于前面内容所进行预测，因此输出具有前向性。该架构不允许有 &quot;内部对话 &quot;或 &quot;草稿存储&quot;来进行多步骤计算或存储中间结果。虽然在某些情况下，这种限制可以通过使用不同的提示来补救，但在其他情况下，这种限制是无法缓解的。</p>
<blockquote>
<p>问：150和250之间有多少个质数？<br>
答：150和250之间有13个质数。（错误）</p>
</blockquote>
<p>但是，如果我们要求模型列出这个范围内的质数，然后写出计数，它确实给出了正确的答案：</p>
<blockquote>
<p>问：首先列出150和250之间的素数，然后输出这个列表的大小。<br>
答：这些质数是151，157，163，167，173，179，181，191，193，197，199，211，223，227，229，233，239，和241。所以这个列表的大小是18。（正确）</p>
</blockquote>
<p><strong>在算术/推理问题上缺乏计划性</strong><br>
有人可能会说，在上面的各种例子中，需要的 &quot;内部记忆 &quot;量是相当大的（人类可能也得借助草稿纸）。由于这个模型在一系列不同的任务上表现得非常好，这可能会让人相信它有合理数量的工作记忆。然而，即使对于更简单的任务，该模型也经常失败。我们考虑下面这个非常基本的例子：</p>
<blockquote>
<p>2 * 8 + 7 * 6 = 58<br>
7 * 4 + 8 * 8 =？<br>
GPT4: 88<br>
正确答案：92</p>
</blockquote>
<p>这表明GPT-4对这类问题的工作记忆短得惊人。然而，如果GPT-4 &quot;慢慢地 &quot;回答问题，那么准确率就很容易上升。例如，如果我们要求模型使用以下提示写下中间步骤</p>
<blockquote>
<p>以下表达式的值是多少？116 * 114 + 178 * 157 = ?<br>
让我们一步一步地思考解决这个表达式，写下所有的中间步骤，然后才得出最终的解决方案。</p>
</blockquote>
<p>当数字在区间1-40时，准确率达到100%，在区间1-200时准确率达到90%。</p>
<p><strong>在文本生成时缺乏计划性</strong></p>
<blockquote>
<p>写一首短诗，要求最后一句和第一句话的单词相同，但顺序颠倒。<br>
例如，如果第一句话是“我在晨光下看到了她的微笑”，那么最后一句话必须是“笑微的她了到看下光晨在我”。<br>
然而，这个最后一句话在语法上不正确，所以请确保这首诗歌在语法和内容上都有意义。</p>
<p>GPT4:</p>
<p>可能的诗：<br>
I heard his voice across the crowd（我在人群中听到他的声音）<br>
一首吸引我的旋律<br>
他唱着爱、希望和梦想<br>
让我觉得我可以在梦想、希望和爱中获胜<br>
他用旋律吸引我，<br>
Crowd the across voice his heard I.（此句只做了词序颠倒，但语法错误）</p>
</blockquote>
<p>这说明 GPT4 在生成文本时，未能提前考虑到最后一句。</p>
<p>这些例子说明了【预测下一个单词】这一范式的一些局限性，**这些局限性表现为模型缺乏规划、工作记忆、回溯能力和推理能力。该模型依赖于生成下一个单词的贪心算法，对任务或输出没有任何全局或深刻的理解。**因此，该模型擅长制作流畅和连贯的文本，但在解决无法按顺序处理的复杂或创造性问题方面存在局限性。这表明了两种类型的智力任务之间的区别：</p>
<ul>
<li>**增量任务。**这些任务可以通过一次添加一个单词或句子来逐步或持续地解决，从而在解决方案的方向上取得进展。增量任务的例子包括编写文本摘要，回答事实问题，根据给定的韵律方案创作一首诗，或解决遵循标准程序的数学问题。</li>
<li>**不连续的任务。**在这些任务中，内容生成不能以渐进或持续的方式完成，而是需要某种“Eureka”的想法，不连续任务的例子包括解决需要新颖或创造性地应用公式的数学问题，写一个笑话或谜语，提出科学假设或哲学论点，或创造一种新的类型或写作风格。</li>
</ul>
<h2 id="七、方向与结论">七、方向与结论</h2>
<p>通过以上对GPT-4在广泛的任务和领域的初步探索，<strong>为我们的结论【GPT-4在诸多任务和领域的能力水平与人类水平相当】提供了支持性证据</strong>。这一结论与OpenAI的发现一致。该模型的能力，在深度和通用性方面都得到了证明，这也表明<strong>单靠结构化的数据集和任务来做模型能力的基准测试是不够的，本文对模型能力和认知能力的评估在本质上已经更接近于评估人类的任务</strong>，而不是狭义的AI模型。</p>
<p><strong>我们工作的核心主张是，GPT-4达到了一种通用智能的形式，确实显示了人工通用智能的火花。这表现在它的核心心智能力（如推理、创造力和推理），它习得的专业知识的领域（如文学、医学和编码），以及它能够执行的各种任务（如玩游戏、使用工具、解释自己）。</strong></p>
<p>要创建一个可以被称为完整的AGI的系统，还有很多事情要做。在本文的最后，我们讨论了接下来的几个步骤，包括定义AGI本身，为AGI建立LLM中的一些缺失组件，以及更好地理解最近的LLM所展示的智能的起源。</p>
<p><strong>定义AGI</strong></p>
<p>在本文中，我们使用了一组心理学家在1994年对智能的定义作为指导框架来探索GPT-4的人工智能。这个定义抓住了智能的一些重要方面，如推理、解决问题和抽象，但它也是模糊和不完整的。它没有说明如何衡量或比较这些能力。此外，它可能没有反映出人工系统的具体挑战和机会，人工系统可能有与自然系统不同的目标和约束。因此，我们承认这个定义不是关于智能的最终说法，而是我们调查的一个有用的起点。</p>
<p>有大量正在进行的文献试图提出关于智能、人工智能和人工通用智能的更加正式和全面的定义，但其中没有一个是没有问题或争议的。例如，Legg和Hutter提出了一个面向目标的人工通用智能定义：智能衡量一个代理人在广泛的环境中实现目标的能力。然而，这个定义并不一定能捕捉到智能的全部范围，因为它排除了那些可以执行复杂任务或回答问题而没有任何内在动机或目标的被动或反应系统。</p>
<p>Chollet提出的定义强调了承认先验（相对于普遍性）的重要性，该定义将智能的中心放在技能获取效率上，或者换句话说，将重点放在1994年定义的一个组成部分上：从经验中学习（这也正好是LLM的关键弱点之一）。</p>
<p>Legg和Hutter对人工通用智能的另一个候选定义是：一个能做人类能做的任何事情的系统。然而，这个定义也是有问题的，因为它假设有一个单一的标准或衡量人类智能或能力的标准，而事实显然不是这样。人类有不同的技能、天赋、偏好和限制，没有一个人可以做任何其他人类可以做的所有事情。此外，这个定义还意味着某种人类中心主义的偏见，这对人工系统来说可能并不合适或不相关。</p>
<p>虽然我们在本文中没有采用这些定义中的任何一个，但我们认识到它们提供了关于智能的重要角度。</p>
<p><strong>通往 AGI 之路</strong><br>
GPT4 或其他 LLMs 需要继续改进的方向包括：</p>
<ul>
<li>信心校准：模型很难知道什么时候它应该有信心，什么时候它只是在猜测。模型会编造事实，我们称之为幻觉。如果是编造训练集里没有的内容属于开放域幻觉，如果是编造和prompt不一致的内容属于封闭域幻觉。幻觉可以用一种自信的、有说服力的方式陈述，所以很难被发现。有几种互补的方法来尝试解决幻觉问题。一种方法是改善模型的校准（通过提示或微调），使其在不可能正确的情况下放弃回答，或者提供一些其他可以用于下游的信心指标。另一种适合于缓解开放域幻觉的方法是将模型缺乏的信息插入到提示中，例如通过允许模型调用外部信息源，如搜索引擎（或其他 plugins）。对于封闭领域的幻觉，通过让模型对前文进行一致性检查会有一定程度的改善。最后，构建应用程序的用户体验时充分考虑到幻觉的可能性也是一种有效的缓解策略。</li>
<li>长期记忆：目前只有8000token（最新版可扩展到32k）。它以“无状态”的方式运行，且我们没有明显的办法来向模型教授新的事实。</li>
<li>持续性学习：模型缺乏自我更新或适应变化环境的能力。一旦训练好，就是固定的。可以进行微调，但是会导致性能下降或过度拟合。所以涉及到训练结束后出现的事件、信息和知识，系统往往会过时。</li>
<li>个性化：例如，在教育环境中，人们期望系统能够理解特定的学习风格，并随着时间的推移适应学生的理解力和能力的进步。该模型没有任何办法将这种个性化的信息纳入其反应中，只能通过使用 meta prompts，这既有限又低效。</li>
<li>提前规划和概念性跳跃：执行需要提前规划的任务或需要Eureka idea的任务时遇到了困难。换句话说，该模型在那些需要概念性跳跃的任务上表现不佳，而这种概念性跳跃往往是人类天才的典型。</li>
<li>透明度、可解释性和一致性：模型不仅会产生幻觉、编造事实和产生不一致的内容，而且似乎没有办法验证它产生的内容是否与训练数据一致，或者是否是自洽的。</li>
<li>认知谬误和非理性：该模型似乎表现出人类知识和推理的一些局限性，如认知偏差和非理性（如确认、锚定和基数忽略的偏差）和统计谬误。该模型可能继承了其训练数据中存在的一些偏见、成见或错误。</li>
<li>对输入的敏感性：该模型的反应对Prompts的框架或措辞的细节以及它们的顺序可能非常敏感。这种非稳健性表明，在Prompt 工程及其顺序方面往往需要大量的努力和实验，而在人们没有投入这种时间和努力的情况下使用，会导致次优和不一致的推论和结果。</li>
</ul>
<p><strong>一些提高模型精准度的扩展手段：</strong></p>
<ul>
<li>模型对组件和工具的外部调用，如计算器、数据库搜索或代码执行。</li>
<li>一个更丰富、更复杂的 &quot;慢思考 &quot;的深入机制，监督下一个词预测的 &quot;快思考 &quot;机制。这样的方法可以让模型进行长期的计划、探索或验证，并保持一个工作记忆或行动计划。慢思考机制将使用下一个词预测模型作为子程序，但它也可以获得外部的信息或反馈来源，并且它能够修改或纠正快速思考机制的输出。</li>
<li>将长期记忆作为架构的一个固有部分，也许在这个意义上，模型的输入和输出除了代表文本的标记外，还包括一个代表上下文的向量。</li>
<li>超越单个词预测：用分层结构代替标记序列，在嵌入中代表文本的更高层次的部分，如句子、段落或观点，内容是以自上而下的方式产生。目前还不清楚这种更高层次概念的顺序和相互依赖性的更丰富的预测是否会从大规模计算和“预测下一个词”的范式中涌现。</li>
</ul>
<p>结语：<strong>所以实际发生了什么？</strong></p>
<p>我们对GPT-4的研究完全是现象学的：我们专注于GPT-4能做的令人惊讶的事情，但我们并没有解决为什么以及如何实现如此卓越的智能的基本问题。它是如何推理、计划和创造的？**当它的核心只是简单的算法组件–梯度下降和大规模变换器与极其大量的数据的结合时，它为什么会表现出如此普遍和灵活的智能？**这些问题是LLM的神秘和魅力的一部分，它挑战了我们对学习和认知的理解，激发了我们的好奇心，并推动了更深入的研究。</p>
<p>关键的方向包括正在进行的对LLMs中的涌现现象的研究（最近的调查见94[WTB+22]）。然而，尽管对有关LLMs能力的问题有强烈的兴趣，但迄今为止的进展相当有限，只有一些玩具模型证明了一些涌现现象[BEG+22, ABC+22, JSL22]。一个普遍的假设[OCS+20]是，大量的数据（尤其是内容的多样性）迫使神经网络学习通用的、有用的 “神经回路”，比如在[OEN+22, ZBB+22, LAG+22]中发现的那些，而模型的大尺寸为神经回路提供足够的冗余和多样性，使其专门化并微调到特定任务。对于大规模模型来说，证明这些假设仍然是一个挑战，而且，可以肯定的是，猜想只是答案的一部分。在另一个思考方向上，模型的巨大规模可能有其他一些好处，比如通过连接不同的最小值使梯度下降更加有效[VBB19]，或者仅仅是使高维数据的平稳拟合[ES16, BS21]。</p>
<p>总的来说，阐明GPT-4等人工智能系统的性质和机制是一项艰巨的挑战，这个挑战已经突然变得重要而紧迫。</p>
<p>全文完，感谢阅读。如果对你有启发，请转发给有好奇心的朋友吧。</p>
<p>PS：</p>
<ul>
<li>文本很长，但依然只覆盖了不到原文三分之一的内容，所以有兴趣的朋友可以继续看英文原文，传送门 <a href="https://arxiv.org/pdf/2303.12712v1.pdf">https://arxiv.org/pdf/2303.12712v1.pdf</a></li>
<li>文章最后一段保留了相关文档编号，关于涌现的研究非常非常重要，可以去原文找到相关研究。</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>论文翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐：Prompts 收集网站</title>
    <url>/2023/03/28/Prompts-Resource-1/</url>
    <content><![CDATA[<p>推荐一个我正在用的 Prompts 网站，<a href="https://prompthero.com/">https://prompthero.com/</a> ，适用于 ChatGPT、Midjourney、Stable Diffusion，最近用 Midjourney 比较多，找见想要风格的图片，直接复制 Prompts 就可以，效果还是不错的。</p>
<p><img src="http://cdn.yunminitools.cn/blog/2023-03-28Prompts.png" alt=" "></p>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
        <tag>绘画</tag>
      </tags>
  </entry>
  <entry>
    <title>AI 论文速递</title>
    <url>/2023/03/29/AI-articles/</url>
    <content><![CDATA[<p>@RickYU写了个小项目 BriefGPT，抓取 Arxiv AI 领域论文，通过 GPT 生成中文标题和论文概要，高亮顶会论文，方便快速筛选。<br>
网站：<a href="https://briefgpt.xyz">https://briefgpt.xyz</a><br>
<img src="http://cdn.yunminitools.cn/blog/2023-03-29AIArticles.jpeg" alt=" "></p>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>37signals的决策原则</title>
    <url>/2023/03/30/37-how-we-make-decisions/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>37signals 是一间芝加哥互联网应用公司，著名产品如 Basecamp，并以开发 Rails 框架著称。下面是他们公司公布的<a href="https://37signals.com/how-we-make-decisions">决策原则</a>。</p>
<h2 id="决策原则">决策原则</h2>
<p>以下是我们在37signals做决定时努力牢记的一些一般原则。它们不是要求，这也不是我们在面临选择时的全面清单，但它们可以作为我们在做每天都需要做的一件事时的框架、考虑和共同做法：决定。</p>
<ol>
<li>为什么我们要做这个决定，为什么要现在做这个决定? Why are we deciding anything at all? Does a decision actually need to be made here?</li>
<li>是否是正确的人来做这个决定？谁是拥有正确信息、背景和洞察里的正确人选（不是角色）？谁只是在插嘴？ Is the right person making this decision? Not the right role, but the right person with the right information, context, and insight? Who’s merely chiming in?</li>
<li>如果忽略眼前利益，我们一年以后还会对这个决定有什么感觉？ If we remove the immediate impact, how do we think we’ll feel about this decision a year from now?</li>
<li>为什么还没有做出决定？为什么我们之前没有决定？ Why hasn’t this decision been made already? Why didn’t we decide before?</li>
<li>为什么我们要花这么长时间做这个决定，我们在犹豫什么？这说明什么？ What’s taking so long to make this decision? Why are we hesitating? What does that reveal?</li>
</ol>
<span id="more"></span>
<ol start="6">
<li>为什么别人会做出不同的决定，他们是怎么想的？ Why would someone else make a different decision? What’s the other side — or two or three — look like?</li>
<li>我们是否可以把这个决定变小？我们能不能把一个大决定变成三个小决定？ Can we make this decision smaller? Can we take one big decision and turn it into three smaller ones?</li>
<li>这个决定是可逆的吗？ How easily can we reverse the decision?</li>
<li>我们对这个决定的第一直觉是什么？我们现在是不是只是在兜圈子，试图用数据来证明本能反应？ What was our first instinct on this decision? Are we now just walking around in circles trying to justify that gut reaction with data?</li>
<li>我们不做决定会发生什么？ What would happen if we just didn’t make the decision?</li>
<li>我们上次做类似这样的决定后发生了什么？ What happened the last time we made a decision like this?</li>
<li>做出决定后，我们期待什么，害怕什么？ What are we looking forward to after the decision is made? What are we afraid of?</li>
<li>怎样才能让我们更容易的做这个决定？我们可以在考虑中排除哪些因素？ How can we make this decision easier? What parts can we eliminate from consideration?</li>
<li>这会不会是个错误的决定？ Is there even a wrong decision?</li>
<li>如果我们等到明天早上，我们会做出不同的决定吗？ Do we anticipate making a different decision if we wait until tomorrow morning to make it?</li>
<li>是做出任何决定都比不做决定好 还是 不做决定比做出任何决定好？ Is any decision better than no decision, or is no decision better than any decision?</li>
<li>这个决定会影响哪些其他决定？ What other decisions will be impacted by this decision?</li>
<li>这个决定会消除做更多决定的可能，还是会增加做更多决定的可能？ Will this decision eliminate the need to make other decisions, or will it create the necessity to make even more decisions?</li>
<li>哪些信息的缺失会导致我们做出不同的决定？ What missing information would lead to making a different decision?</li>
<li>这个决定是导致更多的工作还是消除更多的工作？ Will this decision make more work for people that don’t have extra time for that work? Or will it eliminate work?</li>
<li>这个是让别人练习做决定的好机会吗？ Could this decision be a good one for someone else to practice making?</li>
<li>我们什么时候要做决定？ When do we have to decide?</li>
<li>这将是一个一劳永逸的决定，还是一个重复需要做的决定？ Will this be a one-and-done decision, or will this be a repeating decision?</li>
<li>是否有公司外的人需要参与还是我们可以自己做决定？ Is anyone outside the company depending on this, or is this a decision of our own making?</li>
<li>这个决定对客户和我们有什么影响？ How does this decision impact customers vs. impact us?</li>
<li>这个是一个主要基于数据的决定还是一个主要基于直觉的决定？ Is this primarily a data-based decision, or an intuition, gut-based decision?</li>
<li>另外一个意见会帮助还是阻碍？ Would another opinion help or hinder?</li>
<li>如果我们被迫在这一秒做出决定，那会是什么？ If we were forced to make a decision right this second, what would it be?</li>
<li>如果我们在90天前做这个决定，我们认为我们今天会在哪？ Where do we think we’d be today if we made this decision 90 days ago?</li>
<li>如果我们的决定没有考虑XYZ，这个决定是否有什么我们会后悔的地方？ Is there anything in this decision we’d regret if we didn’t take X, Y, or Z into consideration?</li>
<li>你是否关心这件事情的走向？ 如果不关心，那你为什么要参与？ Do you even care which way this goes? If not, why are you involved?</li>
<li>我们何时以及如何会知道这个决定是否正确，甚至是否重要？ When and how will we know whether the decision was the right one, or if it even mattered?</li>
<li>当结果出现后，它们是否可以用“肉眼”能看到，还是只能用“显微镜”才能看到，如果是后者，那有什么关系？ When the consequences of our decision appear, are they likely to be visible with the naked eye or do they require a microscope to detect? If the latter, does it even matter?</li>
<li>如果做出这个决定，我们会违反哪些原则？ What principles are we bending if we make this decision?</li>
<li>我们是否是要求多人来做一个本该由一个人完成的决定？ Are we asking multiple people to make a decision that one person should be making?</li>
<li>努力的回报是否值得？ Is the return on effort worth it?</li>
<li>如果我们做出了这个决定，什么变更容易，什么变得更困难？ 从长远看，是更容易了，还是短期容易，长期困难？ What gets easier if we make this decision? What gets harder? Will easier remain easier in the long term, or is it short-term easy but long-term hard? And vice versa.</li>
<li>归根到底，这个决定是为了钱吗？ In the end, is this about money?</li>
</ol>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>复盘反思</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐：学正则表达式的网站</title>
    <url>/2023/03/31/Learn-Regular-expressions/</url>
    <content><![CDATA[<p>推荐一个从零开始学正则表达式的网站，一步步，交互式，支持中文，方便学。非常不错的网站：<a href="https://regexlearn.com/zh-cn">regexlearn.com</a><br>
<img src="http://cdn.yunminitools.cn/blog/0331Regexlearn.png" alt="regexlearn.com"></p>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>编程技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>初识数据埋点（一）</title>
    <url>/2023/04/01/Event-Tracking-1/</url>
    <content><![CDATA[<h2 id="埋点概述"><strong>埋点概述</strong></h2>
<p>数据埋点是数据产品经理、数据运营以及数据分析师，基于业务需求（例如：CPC点击付费广告中统计每一个广告位的点击次数），产品需求（例如：推荐系统中推荐商品的曝光次数以及点击的人数）对用户行为的每一个事件对应的位置进行开发埋点，并通过SDK上报埋点的数据结果，记录数据汇总后进行分析，推动产品优化或指导运营。<br>
埋点分析，是网站分析的一种常用的数据采集方法。数据埋点分为初级、中级、高级三种方式。数据埋点主流部署的方式有：</p>
<ul>
<li>私有化部署（即部署在自己公司的服务器上，如果期望提高数据安全性，或者定制化的埋点方案较多，则适合私有部署，并开发一套针对自己公司定制化的数据后台查询系统保证数据的安全性和精确性，缺点是成本较高）。</li>
<li>接入第三方服务，比如国内的某盟和国外的GA（Google Analytics）统计，在以后的文章中会单独介绍，此处不再展开。（优点是成本较低，部分基础服务免费，缺点是：数据会存在不安全的风险，另外一个就是只能进行通用的简单分析，无法定制化埋点方案）<br>
此处只展开初级：在产品、服务转化关键点植入统计代码，据其独立ID确保数据采集不重复（如收藏按钮点击率）；</li>
</ul>
<h2 id="主要的埋点事件分类："><strong>主要的埋点事件分类：</strong></h2>
<h3 id="点击事件："><strong>点击事件：</strong></h3>
<p>点击事件，用户点击按钮即算点击事件，不管点击后有无结果；</p>
<h3 id="曝光事件："><strong>曝光事件：</strong></h3>
<p>成功打开一次页面记一次，刷新页面一次记一次，加载下一页新页，加载一次记一次。home键切换到后台再进入页面，曝光事件不记；</p>
<h3 id="页面停留时间事件："><strong>页面停留时间事件：</strong></h3>
<p>表示一个用户在X页面的停留时长记为停留时长。例如：小明9:00访问了X网站首页，此时分析工具则开始为小明这个访问者记录1个Session（会话）。接着9:01小明又浏览了另外一个页面列表页，然后离开了网站（离开网站可以是通过关闭浏览器，或在地址栏键入一个不同的网址，或是点击了你网站上链接到其他网站的链接……）为了简单，我们把这个过程当做一个Session。<br>
则最终小明在首页的页面停留时间：<br>
<strong>（Time on Page，简称Tp）Tp(首页) = 9:01 – 9:00 = 1 分钟</strong></p>
<span id="more"></span>
<h2 id="When？什么时间做？"><strong>When？什么时间做？</strong></h2>
<p>产品经理的需求来源众多，可能来自一线市场人员，可能来自身旁油腻的领导。可能来自用户反馈的一条吐槽…无论需求来自哪里，首先要搞清楚的就是这个需求涉及的问题：</p>
<ul>
<li>在什么样的场景下？</li>
<li>面向哪些目标用户？</li>
<li>解决了哪些问题？</li>
<li>带来了什么价值？</li>
</ul>
<p>梳理清楚问题后，拆分问题：</p>
<ul>
<li>哪些是主要问题？</li>
<li>哪些是次要问题？</li>
<li>重不重要？</li>
<li>紧不紧急？</li>
</ul>
<p>将每个问题拆解后下一步就是带着PRD文档找亲爱的数据分析师童鞋与产品经理汪一起沟通，解决以下问题：</p>
<ul>
<li>每个问题应该怎么量化？</li>
<li>量化指标是什么？</li>
<li>怎么通过数据定义每个问题以及整个需求的成功与否？</li>
<li>有哪些辅助指标？</li>
</ul>
<p>定义好数据指标后，此时则需要数据产品或者数据分析师定义埋点。<br>
同时为帮助各位看官老爷理解，可参考以下流程图：</p>
<pre class="mermaid">graph TD
用户访谈-->B(思维脑图)
需求调研-->B
竞品分析-->B
用户反馈-->B
B-->PRD需求文档-->数据评估方案-->埋点方案-->需求评审</pre>
<h2 id="How-怎么定义埋点？"><strong>How?怎么定义埋点？</strong></h2>
<p>无规则不成方圆，良好的定义规范可以帮助埋点相关人员更好的维护，以及理解，极高的提升工作效率，降低推倒重来的风险，基于此分享一份埋点的定义规范帮助各位看官老爷以后维护自己产品的埋点。<br>
使用此规范后，一人就可以维护一个APP版本（包含点击事件、曝光事件、停留事件）累计1500多个埋点，井然有序，完全不会乱。</p>
<h3 id="埋点分类概述："><strong>埋点分类概述：</strong></h3>
<pre class="mermaid">graph LR
A(埋点规范)-->B(点击事件集合)
A-->C(曝光事件集合)
A-->D(停留事件集合)
B-->B1(首页)
B-->B2(列表页)
B-->B3(详情页)
C-->C1(首页)
C-->C2(列表页)
C-->C3(详情页)
D-->D1(首页)
D-->D2(列表页)
D-->D3(详情页)</pre>
<ul>
<li>首先从事件属性这个维度上分为三份Excel（点击事件表、曝光事件表、停留事件表）</li>
<li>其次每一个事件表中新建三份子表（Sheet）,以点击事件表为例拆分为：首页事件集合、列表页事件集合、详情页事件集合</li>
<li>每当APP发布新版本时，从上一个版本的埋点中做一份Copy,新版本中新增了哪些埋点，删除了哪些埋点？都用不同的颜色，或者时间标记进行标注说明。</li>
</ul>
<h2 id="字段明细："><strong>字段明细：</strong></h2>
<table>
<thead>
<tr>
<th>功能</th>
<th>事件名称</th>
<th>事件类型</th>
<th>事件ID</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>收藏功能</td>
<td>收藏功能-收藏文章</td>
<td>点击</td>
<td>Click_App_Xxx_Personal center_Collection_ ArticleCollection</td>
<td></td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="功能字段："><strong>功能字段：</strong></h3>
<p>用于说明当前埋点是在哪个页面的哪个功能。例如：收藏功能</p>
<h3 id="事件名称字段：">事件名称字段：</h3>
<p>用于描述X功能模块内X位置，例如起名叫：收藏功能-文章收藏</p>
<h3 id="事件类型字段："><strong>事件类型字段：</strong></h3>
<p>用于说明当前埋点是点击事件还是曝光事件还是其他</p>
<h3 id="事件ID字段："><strong>事件ID字段：</strong></h3>
<p>如果是自己公司开发的数据查询系统，则每一个埋点都对应一个事件ID，上线后用于拿着事件ID去后台取数使用。事件ID的命名规范：事件英文简写_哪一端的产品_产品名称简写_页面名称_模块名称_功能名称。</p>
<blockquote>
<p>例如：点击事件_APP_产品名称_个人中心_收藏_文章收藏 对应事件ID ==  Click_App_Xxx_Personal center_Collection_ ArticleCollection</p>
</blockquote>
<p>如果是用的第三方统计工具：例如某盟，同理定义好事件ID，上线后去X盟后台，输入事件ID查询相应的数据。</p>
<h3 id="备注："><strong>备注：</strong></h3>
<p>用于描述当前埋点什么时间新增？什么时间修改过？原因？什么时间被删除？谁删除的？等信息记录，此处好多看官可能以为写不写无所谓，但是为了信息的完整性和可追溯性最好每一次变动都要备注。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>软件系统解耦：理解依赖关系（一）</title>
    <url>/2023/04/02/Software-system-decoupling-1/</url>
    <content><![CDATA[<p>在实际工作中，复杂度上来后，各模块之间错综复杂，调用关系网千头万绪。即使有各种设计模式做指导，做出合理的设计也并不容易。程序员天天疲于应对层出不穷的变化，在不断紧逼的deadline压力下，面对巨大的重构工作量往往感到心有余而力不足。<br>
系统复杂度的根源除了业务本身的复杂度，就是设计了不恰当的耦合关系。本文试图探讨依赖关系的主要类型，并总结应对依赖的编程范式。</p>
<h2 id="耦合：依赖和变化">耦合：依赖和变化</h2>
<p>耦合是一个有歧义的词语（<a href="https://zhuanlan.zhihu.com/p/20145361">为什么“耦合”概念该要摒弃</a>）。当我们说“A和B耦合”的时候，我们是想表达A和B之间有紧密的联系。具体是什么，不容易讲清楚。<br>
在我看来，耦合至少包含了两个方面的含义：依赖和变化。<br>
业务逻辑固有的复杂度决定了，模块之间必然存在着依赖。规范模块间的依赖关系，就是梳理业务复杂度的过程。最终的成果反映在代码中，代表了对业务复杂度的一种认识。这种认识随着业务需求的变化而演化，随着设计者的能力提升而深化。依赖不能被消除，但是可以被优化。探讨一些应对的范式有助于规避已知的陷阱。<br>
变化则来源于两个方面：发展中的用户需求，完善中的系统模型。用户的需求是我们努力的方向。系统模型则代表了我们对需求的理解，是经验和智慧的结晶。一个完善的系统模型，表达能力要足够强，对业务的适应能力要足够强。变化，意味着工作量，意味着成本，应该尽量降低。如果我们把“系统变更”和“业务需求变更”写成函数：<br>
SystemChange = f(ReqirementChange)<br>
我们希望自变量不变的情况下，“系统变更”这个函数值越小越好。特别是“业务需求变更”在当前系统设计假设条件下产生调整的时候，“系统变更”应该局限在很小的范围内。</p>
<h2 id="依赖的种类">依赖的种类</h2>
<p>在UML类图中，依赖关系被标记为&lt;<use>&gt;。A依赖B意味着，A模块可以调用B模块暴露的API，但B模块绝不允许调用A模块的API（<a href="https://link.zhihu.com/?target=https%3A//www.ibm.com/support/knowledgecenter/zh/SS8PJ7_8.5.1/com.ibm.xtools.viz.cpp.doc/topics/cdependency.html">IBM Knowledge Center</a>）。<br>
在类图中，依赖关系是指更改一个类（供应者）可能会导致更改另一个类（客户）。供应者是独立的，这是因为更改使用者并不会影响供应者。<br>
例如，Cart 类依赖于 Product 类，因为 Product 类被用作 Cart 类中的“添加”操作的参数。在类图中，依赖关系是从 Cart 类指向 Product 类。换句话说，Cart 类是使用者元素，而 Product 类是供应者元素。更改 Product 类可能会导致更改 Cart 类。<br>
在类图中，C/C++ 应用程序中的依赖关系将两个类连接起来，以指示这两个类之间存在连接，并且该连接比关联关系更加具有临时性。依赖关系是指使用者类执行下列其中一项操作：</p>
<ul>
<li>临时使用具有全局作用域的供应者类，</li>
<li>将供应者类临时用作它的某个操作的参数，</li>
<li>将供应者类临时用作它的某个操作的局部变量，</li>
<li>将消息发送至供应者类。</li>
</ul>
<p>模块之间产生依赖的主要方式是数据引用和函数调用。检验模块依赖程度是否合理，则主要看“变更”的容易程度。软件模块之间的调用方式可以分为三种：同步调用、回调和异步调用（<a href="https://link.zhihu.com/?target=https%3A//www.ibm.com/developerworks/cn/linux/l-callback/">异步消息的传递－回调机制</a>）。同步调用是一种单向依赖关系。回调是一种双向依赖关系。异步调用往往伴随着消息注册操作，所以本质上也是一种双向依赖。<br>
<img src="http://cdn.yunminitools.cn/blog/0402Call.png" alt=" "></p>
<p>有一种观点将“依赖”直接总结为人脑中的依赖（<a href="https://zhuanlan.zhihu.com/p/20145361">为什么“耦合”概念该要摒弃</a>）。文中提到：</p>
<blockquote>
<p>只要程序员编写模块A时，需要知道模块B的存在，需要知道模块B提供哪些功能，A对B依赖就存在。甚至就算通过所谓的依赖注入、命名查找之类的“解耦”手段，让模块A不需要import B或者include “B.h”，人脑中的依赖仍旧一点都没有变化。唯一的作用是会骗过后文会提到的代码打分工具，让工具误以为两个模块间没有依赖。</p>
</blockquote>
<p>代码的复杂度更主要的体现在阅读和理解，如果只是纠结于编译器所看到的依赖，实在是分错了主次，误入了歧途。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>编程技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>软件系统解耦：理解依赖关系（二）</title>
    <url>/2023/04/03/Software-system-decoupling-2/</url>
    <content><![CDATA[<h2 id="单向依赖与单一职责原则-SRP">单向依赖与单一职责原则(SRP)</h2>
<p>单向依赖是最简单的依赖。<br>
<img src="http://cdn.yunminitools.cn/blog/0403SRP1.png" alt=" "><br>
上述都是单向依赖的例子。其中，(1)是最理想的情况。当逻辑变复杂后，单个模块往往承担了过多的责任。即使模块之间可以保持简单的单向关系，模块内部各行为之间却形成高强度的耦合整体。根据单一职责原则(SRP)，这样的模块也是难以维护的，我们需要对模块做拆分。<br>
在有多个模块的情况下，(2)的依赖关系显然要好于(3)，因为在(2)中模块的依赖关系要比(3)少。这样的解释过于抽象，我们用游戏中比较典型的一个应用场景来说明一下。</p>
<p>场景对象管理器GameObjectManager，管理着场景对象GameObjectInstance，而场景对象的构造需要资源AssetStore的支持。他们的调用关系，用(2)和(3)的模式分别实现一遍：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(2) GameObjectManager从AssetStore取资源数据，然后调用GameObjectInstnce的初始化流程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObjectManager</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AssetForGameObject* <span class="title">GetAsset</span><span class="params">(DWORD dwID)</span></span>&#123;m_Asset.<span class="built_in">GetAsset</span>(dwID);&#125;</span><br><span class="line">    <span class="function">GameObjectInstance* <span class="title">Create</span><span class="params">(DWORD dwAssetID)</span></span>&#123;</span><br><span class="line">        AssetForGameObject* pAsset = <span class="built_in">GetAsset</span>(dwAssetID);</span><br><span class="line">        <span class="keyword">return</span> m_GameObjects[dwNewID] = <span class="keyword">new</span> <span class="built_in">GameObjectInstance</span>(pAsset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">TickGameObject</span><span class="params">()</span></span>&#123;foreach(<span class="keyword">auto</span> go = m_GameObjects) go.<span class="built_in">Tick</span>();&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AssetStore m_Asset;</span><br><span class="line">    map&lt;DWORD, GameObjectInstance*&gt; m_GameObjects;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(3) GameObjectInstance自己调用AssetStore的方法取资源数据，做初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObjectManager</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">GameObjectInstance* <span class="title">Create</span><span class="params">(AssetStore* pAssets, DWORD dwAssetID)</span></span>&#123;</span><br><span class="line">        GameObjectInstance* pGo = <span class="keyword">new</span> <span class="built_in">GameObjectInstance</span>();</span><br><span class="line">        pGo-&gt;<span class="built_in">Init</span>(pAssets, dwAssetID);</span><br><span class="line">        <span class="keyword">return</span> m_GameObjects[dwNewID] = pGo;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AssetStore m_Asset;</span><br><span class="line">    map&lt;DWORD, GameObjectInstance*&gt; m_GameObjects;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObjectInstance</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(AssetStore* pAssets, DWORD dwAssetID)</span></span>&#123;</span><br><span class="line">        m_Data = pAssets-&gt;<span class="built_in">GetAsset</span>(dwAssetID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>GameObjectInstance只需要依赖于AssetForGameObject，但是在依赖关系(3)中，却要依赖于一个范围更大的概念AssetStore。</p>
<span id="more"></span>
<h2 id="将双向依赖转换为单向依赖">将双向依赖转换为单向依赖</h2>
<p>双向依赖关系在网络游戏中也是比比皆是。我们来看一个双向依赖的典型例子：网络数据包的收发。如果把“上层业务逻辑”和“底层网络连接”看作两个模块。在发数据包的过程中，业务逻辑调用底层发送接口发送数据。业务逻辑依赖于底层网络连接。而在收数据包的时候，数据首先在网络连接模块接收，再分派到不同的业务逻辑。上层业务逻辑和底层网络连接形成了一种天然的双向依赖关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logic</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SendMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;</span><br><span class="line">        m_pConnection-&gt;<span class="built_in">Send</span>(pbyBuffer, uLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">HandleMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Connection* m_pConnection;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Connection</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetLogic</span><span class="params">(Logic* pLogic)</span></span>&#123;m_pLogic = pLogic;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SendMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RecvMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;</span><br><span class="line">        m_pLogic-&gt;<span class="built_in">HandleMessage</span>(pbyBuffer, uLen);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Logic* m_pLogic;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>用最自然的方式，我们写出了上面的代码。这其实是用“依赖注入”实现的回调。容易发现，当Logic增减成员变量或成员函数，Connection就需要重新编译，甚至重新调整代码。这样的耦合度是无法接受的。</p>
<p>我们可以尝试用&quot;Don’t call us, we will call you&quot;把双向依赖转换为单向依赖。简单来说，当网络连接收到数据包后，可以先放到一个存储区。等调度到业务逻辑的时候，业务逻辑主动去取数据并处理。在存储区存储一个数据，就相当于存储一个对业务逻辑的调用请求。这样就演变为了单向依赖关系(3)，模块C就相当于存储区。需要说明的是，存储区并不一定必须要独立出来一个模块，完全可以维护在模块B中。此种情形，A可以直接向B要数据。</p>
<p>并不是所有的双向依赖关系都可以很容易的转换为单向依赖。上述例子中，如果业务逻辑来不及处理数据包，网络连接层就要维护一个数据列表。这增加了存储开销。而且有时候把数据延迟处理是不合适的。代码也因此变得晦涩难懂，难以维护。如果导致这种结果，那就与我们转换依赖关系的初衷背道而驰了。</p>
<h2 id="弱化双向依赖：回调与中间层">弱化双向依赖：回调与中间层</h2>
<p>一般情况下，为了弱化双向依赖的影响，我们可以增加一个中间层。虽然调用链路是从“网络连接”又回到了“业务逻辑”，但是由于中间层的存在，变化被隔离，原先很强的依赖关系变弱了。以下介绍四种典型的中间层。<br>
<img src="http://cdn.yunminitools.cn/blog/0403SRP2.jpeg" alt=" "><br>
需要说明的是，上述所说的中间层，偏向于概念，在代码实现中并不一定要独立成一个单独的模块。但为了方便，还是借用模块（如上图中的模块C）来表述。</p>
<h3 id="1）接口与继承">1）接口与继承</h3>
<p>我们很自然想到，依赖注入可以使用接口。当Connection依赖的是Logic的接口（假定为ILogic)，虽然Logic变更，只要ILogic不变，就不会影响Connection。但是在实践中根本不是这么回事。</p>
<p>我们经常听说，只要把接口设计得“正交”“紧凑”，就能保证接口的稳定。但是，在实践中，混乱的继承关系随处可见。大多数程序员都停留在利用继承思维构造业务逻辑关系，并尽快实现功能。极少有能力有时间检视继承关系是否恰当。正确使用继承对程序员的要求太高了。</p>
<p>当重新审视继承的时候我们发现，继承的父类和子类之间实际形成了一种双向依赖。继承和多态不仅规定了函数的名称、参数、返回类型，还规定了类的继承关系，是一种强耦合（<a href="https://github.com/downloads/chenshuo/documents/CppPractice.pdf">https://github.com/downloads/chenshuo/documents/CppPractice.pdf</a>, p45）。接口约定了外部调用的规范，继承类必须按照这些规范去实现。只要规范不变，继承类的实现可以调整而不将影响传递出去。糟糕的是，不管是规范还是实现，都基本上不可能一开始就确定好。当变化发生的时候，接口类和继承类都需要做大量的修改，而这些修改也很容易影响到所有使用接口的那些模块。</p>
<p>稳定的继承关系可以提供良好的扩展性，也可以避免把相同的逻辑写得到处都是（DRY原则）。但是滥用继承也会是灾难性的。在&quot;Is-A&quot;和&quot;Has-A&quot;的取舍中，要谨慎行事。</p>
<h3 id="2）Delegation">2）Delegation</h3>
<p>一个对调用者和被调用者约束较小的方式是代理（Delegation）。所谓代理，就是将依赖转移到较稳定的代理类上。通过一个仿函数，调用不同类中有相同签名的方法。一个典型的代理类的例子如下所示(<a href="https://link.zhihu.com/?target=https%3A//www.codeproject.com/Articles/11015/The-Impossibly-Fast-C-Delegates">The Impossibly Fast C++ Delegates</a>)。其最初版本需要对每种参数做不同处理。后来发展出来一种更一般的代理方式(<a href="https://link.zhihu.com/?target=http%3A//blog.coldflake.com/posts/C%2B%2B-delegates-on-steroids/">C++ Delegates On Steroids</a>)，可以接受任意类型和任意数量的参数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">delegate</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">delegate</span>() : <span class="built_in">object_ptr</span>(<span class="number">0</span>), <span class="built_in">stub_ptr</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="built_in">void</span> (T::*TMethod)(<span class="type">int</span>)&gt;</span><br><span class="line">    <span class="function"><span class="type">static</span> delegate <span class="title">from_method</span><span class="params">(T* object_ptr)</span></span>&#123;</span><br><span class="line">        delegate d;</span><br><span class="line">        d.object_ptr = object_ptr;</span><br><span class="line">        d.stub_ptr = &amp;method_stub&lt;T, TMethod&gt;; <span class="comment">// #1</span></span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a1)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*stub_ptr)(object_ptr, a1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*stub_type)</span><span class="params">(<span class="type">void</span>* object_ptr, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* object_ptr;</span><br><span class="line">    stub_type stub_ptr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="built_in">void</span> (T::*TMethod)(<span class="type">int</span>)&gt;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">method_stub</span><span class="params">(<span class="type">void</span>* object_ptr, <span class="type">int</span> a1)</span></span>&#123;</span><br><span class="line">        T* p = <span class="built_in">static_cast</span>&lt;T*&gt;(object_ptr);</span><br><span class="line">        <span class="keyword">return</span> (p-&gt;*TMethod)(a1); <span class="comment">// #2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="3-Bind-Function">3) Bind/Function</h3>
<p>Bind/Function机制不要求被绑定的类有任何继承规范。其更像是C中的函数指针，比代理类要更简单。除了和代理类一样需要函数签名一致，不需要程序员额外维护一个类。<br>
现在C++11提供了很好用的bind/function(<a href="https://link.zhihu.com/?target=http%3A//blog.think-async.com/2010/04/bind-illustrated.html">Bind illustrated</a>，<a href="https://link.zhihu.com/?target=https%3A//oopscenities.net/2012/02/24/c11-stdfunction-and-stdbind/">C++11: std::function and std::bind</a>)。我们可以将上述的数据包处理回调重写如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logic</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m_pConnection-&gt;<span class="built_in">SetCallbackFunc</span>(std::<span class="built_in">bind</span>(HandleMessage), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SendMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;</span><br><span class="line">        m_pConnection-&gt;<span class="built_in">Send</span>(pbyBuffer, uLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">HandleMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Connection* m_pConnection;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Connection</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetCallbackFunc</span><span class="params">(Logic* pLogic)</span></span>&#123;m_pLogic = pLogic;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SendMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RecvMessage</span><span class="params">(byte* pbyBuffer, <span class="type">size_t</span> uLen)</span></span>&#123;</span><br><span class="line">        <span class="built_in">m_callbackfunc</span>(pbyBuffer, uLen);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    func* m_callbackfunc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="4-Lambda与闭包">4) Lambda与闭包</h3>
<p>严格来说，bind/function的实现也属于闭包。这里把Lambda/Closure单独列出来是想强调Lambda表达式可以通过匿名函数把相同的事做的更简洁。比起bind一个成员函数，直接bind一个在局部空间定义的lambda表达式给程序员带来的思维负担更小。<br>
毕竟，修改lambda表达式时，可以清楚知道影响的范围。而修改被bind的成员函数时，还要考虑该成员函数是不是在其他地方被用到。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>编程技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>初识数据埋点（二）</title>
    <url>/2023/04/04/Event-Tracking-2/</url>
    <content><![CDATA[<h2 id="实际案例：">实际案例：</h2>
<p>**实例背景：**某汽车互联网公司，领导对负责新车业务的产品经理X君、负责二手车业务的产品经理Y君提出需求：对新车APP和二手车APP销售线索数据指标进行数据监控，如有超过5%的数据变动，则需要向上级汇报波动数值以及波动原因。<br>
<strong>名词注释：</strong></p>
<ul>
<li>销售线索：通过事件记录到用户有明确的购买意向，记录行为的事件例如：电话咨询、短信询价、加入心愿单、收藏、特别关注等类型事件。记录一个用户即代表一个线索。</li>
<li>数据波动：即(（当日数据-昨天数据）/昨日数据)*100%=环比数据波动</li>
</ul>
<p>根据领导需求，假设定义短信砍价按钮与电话咨询按钮为销售线索指标，销售线索按钮页面的入口来源页面包含：页面A与页面B。<br>
X君与Y君分别设计了埋点方案，如图所示：<br>
<img src="http://cdn.yunminitools.cn/blog/0405Tracking.png" alt=" "></p>
<span id="more"></span>
<h3 id="埋点方案一">埋点方案一</h3>
<p>X君经梳理得出，在商品详情页共计有两个按钮是销售线索的核心指标分别是按钮一：短信砍价、按钮二：电话咨询。并且有外部入口导流到详情页的有两个页面，分别是：页面A、页面B。根据流量来源的不同与事件类型的不同分为4个埋点事件，每一个埋点事件代表一种情况，如上图所示。<br>
<strong>方案分析：</strong><br>
X君对每一种情况都单独设置了一个埋点事件ID，初步看上去还没什么问题，X君只需每天用这四个事件ID去后台搜索即可满足领导的需求：对核心指标进行监控。<br>
假设随着业务的快速增长，新增更多的外部入口页面，由原来的页面A、页面B的2个入口页面增加至4个、8个、12个，同样随着产品优化需求的上线，新增更多的销售线索事件，由原短信砍价和电话咨询2个销售线索事件增加至4个、8个、12个。<br>
在极限情况（12个外部页面入口、12个销售线索事件）下X均需要共计维护：<br>
12*12=144个埋点事件ID。</p>
<p>假设分析场景：12个流量来源、12个销售线索事件，分析X天共计提交了多少线索？，来自页面A的有多少？<br>
<strong>问题一：分析X天提交的销售线索中来自页面A的有多少？</strong><br>
解决以上问题，X君首先需要将流量来源是：页面A的12个不同类型销售线索埋点事件ID找出来求合算出数值。<br>
<strong>问题二：分析X天用户共计提交了多少线索？</strong><br>
其次需要将剩下的11个流量来源各维度下12个不同销售线索事件的ID一一取出数据加上流量来源是页面A维度下的所有类型线索取出的数据，并进行最终求合算出X天共计提交线索数…写到这里，各位客官老爷可能会说：X君好累啊~，其实不仅累，并且会带来<strong>严重效率问题</strong>：</p>
<ul>
<li>产品经理自身的工作效率会极大的降低，埋点事件ID越多，效率越低，最后极限情况下会无限逼近于零效率、零产出。</li>
<li>埋点事件无论是普通埋点还是关键核心指标埋点，不仅产品经理需要监控自身产品健康情况，兄弟部门像：数据运营同事、数据分析同事都会基于部门需求对产品进行数据分析与监控，如果像刚才这种情况，数据运营同事每周写数据周报时，单单是一个埋点事件就要计算12个流量来源进行求合，效率极低，会严重拖累运营同事的工作效率。并且对于数据分析师来说，假设在统计整体的销售线索指标时，如通过X君定义的埋点进行分析，在写查询语句SQL时，单是事件ID就要写144个，（大家脑补下数据分析师有节奏的拷贝事件ID 144下时这个画面），数据分析时会毫不犹豫的说：**“来来来，X君我有事找你谈谈~~”**可能有的看官会说：一个按钮用一个埋点事件ID记录就好了，不用区分页面流量来源，那问题来了：当数据产生异常波动时怎么确定是哪个页面的流量入口的流量变动导致最终的结果？</li>
<li>由于每天产品经理需要大量的埋点事件ID来统计一个指标，导致工作效率低下，可能会让领导对你产生工作能力差，产出效率低下的不好印象…</li>
</ul>
<p>那客官老爷会问：那怎么办？稍安勿躁，马上揭晓，请继续向下看。</p>
<h3 id="埋点方案二">埋点方案二</h3>
<p>首先Y君对于销售线索有关的内容从各个维度，按照逻辑关系进行拆分，梳理出以下脑图：</p>
<pre class="mermaid">graph LR
A(核心指标-销售线索)-->B(指标来源Source)
A-->C(指标类型Type)
B-->B1(页面A)
B-->B2(页面B)
B-->B3(页面...)
C-->C1(短信砍价)
C-->C2(电话咨询)
C-->C3(其他...)</pre>
<p>写到这里就不卖关子了，基于思维导图中的逻辑关系，Key-Value闪亮登场！！！<br>
Y君基于思维导图中的逻辑关系，使用Key字段表示分析的维度，使用Value字段表示不同维度下对应的唯一参数标识，从而将每个维度下众多不同的参数区分开来。通过Key-Value与同属性事件ID的配合，像销售线索这个指标就可以用一个事件ID来表示。在未来即使扩展N个外部入口流量页面，也只需要在当前事件ID在表示流量来源Key维度下在首次开发时新增N个Value参数即可。在未来应用于数据分析时，只需要搜索或写一个事件ID即可对各维度（Key）下不同参数（Value）进行分析，简介、高效。</p>
<p>例如假设分析场景：12个流量来源、12个销售线索事件，分析X天共计提交了多少线索？，来自页面A的有多少？<br>
<strong>问题一：分析X天提交的销售线索中来自页面A的有多少？</strong><br>
Y君只需在后台查一个事件ID，并指定维度Key=指标来源（source）、Value=对应维度下参数为：页面A，最终求出的结果，即代表来自页面A的总数。<br>
<strong>问题二：分析X天共计提交了多少线索？</strong><br>
同理，Y君只需要写一个事件ID，并指定维度Key=指标来源（source）,Value=无。最终查询出的结果即代表总的线索数。</p>
<p><strong>注释：</strong></p>
<ul>
<li>当不指定Value时，默认为包含该维度下所有参数（本例中即代表所有来源）。</li>
<li>各位看官可能会问：当不指定Value参数，且不指定Key维度，Key=无，Value=无 时，对最终总线索数有影响吗？答案是没有。</li>
<li>同理，一个事件ID，指定Key=其他的维度，例如：Key=指标类别（type）,不指定Value参数，例如Value=无，对最终总线索数统计有影响吗？同理答案是没有。</li>
</ul>
<p>Y君通过梳理逻辑关系，将同属性的埋点事件使用一个总事件ID表示，结合Key-Value细分不同维度下的不同参数，方便日后数据分析。通过此方式很好的解决了X君面临的问题，不仅如此，并且具备以下<strong>优点：</strong></p>
<ul>
<li><strong>Y君的维护成本低，更加简洁，新增时只需要首次开发时加一个Value参数即可。</strong></li>
<li><strong>提高Y君自身、数据运营、数据分析师等兄弟部门在数据分析时的工作效率。</strong></li>
<li><strong>扩展性好，对未来新增业务需求有良好的扩展性。</strong></li>
</ul>
<p>相信介绍到这里，大家对埋点事件中Key字段、Value字段配合使用带来的价值已经有了一定的了解。当然如果不同属性的埋点指标还是建议分开，一个属性定义一个事件ID，不能将八竿子打不着两种属性的埋点强行捆绑在一个埋点事件ID上,为了用Key-Value而用Key-Value，生搬硬套，最后只会适得其反，没有实际意义。</p>
<p>**例如：**在实际业务中，将用户点击“注册账号提交”按钮的行为放在销售线索这个属性事件ID中也通过Key字段、Value字段进行区分标识。结果没有参考价值，更没有实际意义。</p>
<p>综上所述，得出<strong>结论：</strong><br>
<strong>设计事件埋点时：</strong></p>
<ul>
<li><strong>同种属性的多个事件，建议命名一个事件ID，并通过Key-Value键值对进行区分。</strong></li>
<li><strong>不同属性的多个事件，建议命名多个事件ID，不建议使用Key-Value键值对进行区分。</strong></li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>数据管理</tag>
      </tags>
  </entry>
  <entry>
    <title>论文学习 - Bitcoin：A Peer-to-Peer Electronic Cash System（1）</title>
    <url>/2023/04/05/A-Peer-to-Peer-Electronic-Cash-System-1/</url>
    <content><![CDATA[<h1>比特币：一个点对点的电子货币系统</h1>
<p><strong>Abstract.</strong> A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled by nodes that are not cooperating to attack the network, they’ll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone.</p>
<p><strong>摘要：</strong>  本文提出了一种完全通过点对点技术实现的电子货币系统，它使得在线支付能够直接由一方发起并支付给另外一方，中间不需要通过任何的金融机构。虽然数字签名部分解决了这个问题，但是如果仍然需要可信任的第三方的支持才能防止重复支付的话，那么这种系统的也会失去价值。我们在此提出一种解决方案，使支付系统在点对点的环境下运行，并防止重复支付问题。<strong>该网络通过随机散列对全部交易加上时间戳，将它们合并入一个不断延伸的基于随机散列的工作量证明（proof-of-work）的链条作为交易记录</strong>，除非重新完成全部的工作量证明，形成的交易记录将不可更改。最长的链条不仅将作为被观察到的事件序列的证明，而且被看做是来自 CPU计算能力最大的池。只要大多数的节点的CPU 计算能力没有被控制用来进行对全网的攻击，那么这些节点将会生成最长的、超过攻击者的链条。这个系统本身需要的基础设施非常少。信息尽最大努力在全网传播即可，节点可以随时离开和重新加入网络，并将接受最长的工作量证明链条作为在该节点离线期间发生的交易的证明。</p>
<span id="more"></span>
<p>【关注点】：</p>
<ul>
<li>Cash 的翻译有好几种，我觉得翻译为<strong>货币</strong>最为准确。</li>
<li>加粗的句子应该是整个论文的核心，全文应该是围绕这个主题展开的。</li>
<li>我比较关注 <strong>基于随机散列的工作量证明</strong> 如何实现，以及信息如何在全网广播。</li>
</ul>
<h2 id="1-介绍">1. 介绍</h2>
<ol>
<li>Introduction<br>
Commerce on the Internet has come to rely almost exclusively on financial institutions serving as trusted third parties to process electronic payments. While the system works well enough for most transactions, it still suffers from the inherent weaknesses of the trust based model.<br>
Completely non-reversible transactions are not really possible, since financial institutions cannot avoid mediating disputes. The cost of mediation increases transaction costs, limiting the minimum practical transaction size and cutting off the possibility for small casual transactions, and there is a broader cost in the loss of ability to make non-reversible payments for nonreversible services.<br>
With the possibility of reversal, the need for trust spreads. Merchants must be wary of their customers, hassling them for more information than they would otherwise need. A certain percentage of fraud is accepted as unavoidable. These costs and payment uncertainties can be avoided in person by using physical currency, but no mechanism exists to make payments over a communications channel without a trusted party.<br>
What is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted<br>
third party. Transactions that are computationally impractical to reverse would protect sellers from fraud, and routine escrow mechanisms could easily be implemented to protect buyers.<br>
In this paper, we propose a solution to the double-spending problem using a peer-to-peer distributed<br>
timestamp server to generate computational proof of the chronological order of transactions. The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes.</li>
</ol>
<p>互联网贸易已经变得几乎完全依赖金融机构作为可信任的第三方来处理电子支付。尽管对于大部分交易这种系统运行得足够好，但仍需忍受<strong>基于信任模型这个固有缺点</strong>。<br>
由于金融机构不可避免的需要仲裁纠纷，完全不可撤销的交易实际是做不到的。仲裁成本增加了交易成本，限制了最小实际交易额度从而杜绝了日常小额交易的可能性，而且由于不支持不可撤销支付，对不可撤销服务进行支付将需要更大的成本。<br>
由于存在交易被撤销的可能性，对于信任的需求将扩散。商家必须警惕他们的客户，麻烦他们提供更多他本不需要的信息。一定比例的欺诈被认为是不可避免的。虽可通过当面使用实物货币来避免这些成本及支付的不确定性，但不存在一个无可信任方而能在通信通道上进行支付的机制。<br>
我们需要的是一个基于密码学原理而不是信任的电子支付系统，该系统允许任何有交易意愿的双方能直接交易而不需要一个可信任的第三方。交易在计算上的不可撤销将保护卖家不被欺诈，用来保护买家的<strong>程序化合约机制</strong>也应该较容易实现。<br>
在这篇论文中，我们提出一种使用点对点分布式时间戳服务器为基于时间的交易序列生成计算上的证据来解决双重支付问题的方案。只要诚实节点集体控制的 CPU 算力大于任何一个合作攻击节点群的CPU 算力，这个系统就是安全的。</p>
<p>【关注点】：</p>
<ul>
<li><strong>基于信任模型这个固有缺点</strong>  文中并没有展开这个缺点是什么，没有看到合适的解释，后续补充。</li>
<li>“<em>对不可撤销服务进行支付将需要更大的成本。</em>” 这个有点绕，不大理解，既然做不到那还有什么成本？我理解是指 交易系统将需要更大的成本，和后文呼应。</li>
<li>routine escrow mechanisms 翻译为 <strong>程序化合约机制</strong>，这个需要再理解一下。</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>论文学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Is-A 和 Has-A 的取舍</title>
    <url>/2023/04/06/Choose-Is-A-Has-B/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>组合和继承是允许在新建的类中放入子对象。其中“<strong>Is-A</strong> （是一个）”的关系是用继承来表达的，而“<strong>Has-A</strong>（有一个）”的关系则是用组合来表达的。<br>
组合是显示的这样做的，而继承是隐式的做。组合一般是将现有的类型作为新类型底层实现的一部分来加以复用，在一个类中引用另一个类，而继承是拥有了父类的非私有方法。<br>
二者是之间有何区别？或者怎样在二者之间做出选择呢？</p>
<h2 id="优缺点分析">优缺点分析</h2>
<p>继承的优点：</p>
<ol>
<li>子类可以重写父类的方法来方便地实现对父类的扩展。</li>
</ol>
<p>继承的缺点：</p>
<ol>
<li>父类的内部细节对子类是可见的。</li>
<li>子类从父类继承的方法在编译时就确定下来了，所以无法在运行期间改变从父类继承的方法的行为。</li>
<li>如果对父类的方法做了修改的话（比如增加了一个参数），则子类的方法必须做出相应的修改。所以说子类与父类是一种高耦合，违背了面向对象思想。</li>
</ol>
<p>组合的优点：</p>
<ol>
<li>当前对象只能通过所包含的那个对象去调用其方法，所以所包含的对象的内部细节对当前对象时不可见的。</li>
<li>当前对象与包含的对象是一个低耦合关系，如果修改包含对象的类中代码不需要修改当前对象类的代码。</li>
<li>当前对象可以在运行时动态的绑定所包含的对象。可以通过set方法给所包含对象赋值。</li>
</ol>
<p>组合的缺点：</p>
<ol>
<li>容易产生过多的对象。</li>
<li>为了能组合多个对象，必须仔细对接口进行定义。</li>
</ol>
<span id="more"></span>
<p>组合关系和继承关系相比，前者的最主要优势是不会破坏封装，在软件开发阶段，组合关系虽然不会比继承关系减少编码量，但是到了软件维护阶段，由于组合关系使系统具有较好的松耦合性，因此使得系统更加容易维护。从软件构架来说，组合，耦合度比继承弱，继承是对父类方法和数据成员的兼收并蓄，而组合，可以有选择的使用某一种方法。</p>
<p>由此可见，组合比继承更具灵活性和稳定性，所以在设计的时候优先使用组合。只有当下列条件满足时才考虑使用继承：</p>
<ul>
<li>子类是一种特殊的类型，而不只是父类的一个角色</li>
<li>子类的实例不需要变成另一个类的对象</li>
<li>子类扩展，而不是覆盖或者使父类的功能失效</li>
</ul>
<h2 id="举例">举例</h2>
<p>以前的做法，要么是子类实现继承于父类的抽象方法，要么是子类实现定义的接口。这两种方法都是依赖于“实现”。现在，把易变部分抽离出来后，就由行为类来实现行为接口，而不是依赖子类实现。</p>
<p><strong>“针对接口编程” 的真正意思是“针对超类型（supertype）编程”</strong>。</p>
<p>在不涉及Interface 时，“针对接口编程” ，关键就在于<strong>多态</strong>。 针对超类型编程，执行时就可以根据实际情况执行到真正的行为，不会被绑死在超类的行为上。<br>
“针对超类型编程”，这句话更明确地可以说成：“变量的声明类型应该是超类型的，通常是一个抽象类或者一个接口，因此，只要是这个超类型的子类，都可以作为参数传入。这就意味着声明类时无需关心以后传入什么参数。”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bark.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;meow.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">...</span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">a.makeSound();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>以上的行为换句话说，就是原先需要父类定义的行为，“委托”给了别处实现。</p>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>编程技巧</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>论文学习 - Bitcoin：A Peer-to-Peer Electronic Cash System（2）</title>
    <url>/2023/04/06/A-Peer-to-Peer-Electronic-Cash-System-2/</url>
    <content><![CDATA[<h1>比特币：一个点对点的电子货币系统</h1>
<h2 id="2-交易">2. 交易</h2>
<p>II. Transactions<br>
We define an electronic coin as a chain of digital signatures. Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin. A payee can verify the signatures to verify the chain of ownership.<br>
<img src="http://cdn.yunminitools.cn/blog/0406Bitcoin1en.png" alt=" "><br>
The problem of course is the payee can’t verify that one of the owners did not double-spend the coin. A common solution is to introduce a trusted central authority, or mint, that checks every transaction for double spending. After each transaction, the coin must be returned to the mint to issue a new coin, and only coins issued directly from the mint are trusted not to be double-spent. The problem with this solution is that the fate of the entire money system depends on the company running the mint, with every transaction having to go through them, just like a bank.<br>
We need a way for the payee to know that the previous owners did not sign any earlier transactions. For our purposes, the earliest transaction is the one that counts, so we don’t care about later attempts to double-spend. The only way to confirm <strong>the absence of a transaction</strong> is to be aware of all transactions. In the mint based model, the mint was aware of all transactions and decided which arrived first. To accomplish this without a trusted party, transactions must be publicly announced [1], and we need a system for participants to agree on a single history of the order in which they were received. The payee needs proof that at the time of each transaction, the majority of nodes agreed it was the first received.</p>
<span id="more"></span>
<p>我们定义了一个电子货币作为一条数字签名链。每个拥有者都通过将上一次交易和下一个<strong>拥有者的公钥的哈希值的数字签名</strong>添加到此货币末尾的方式将这枚货币转移给下一个拥有者。收款人可以通过验证数字签名来证实其为该链的所有者。<br>
<img src="http://cdn.yunminitools.cn/blog/0406Bitcoin1zh.png" alt=" "><br>
这里的问题是收款人不能证实某个拥有者有没有对此货币进行双重支付。通常的做法是引入一个可信任的中央机构或铸币厂来检查每笔交易是否存在双重支付。每笔交易之后，都需要将这枚货币退回铸币厂以换取发行一枚新的货币，只有由铸币厂直接发行的货币才能被确认没有被双重支付。这个方案的问题在于整个货币系统的命运都依赖于运营铸币厂的公司，每笔交易都需要经过它们，就像银行一样。<br>
我们需要一种能让收款人知道上一个货币拥有者没有对任何更早的交易签名的方法。对我们来说，最早的那次交易是唯一有效的，所以我们不需要关心本次交易后面的双重支付尝试。唯一能确认一笔交易不存在的方法是知晓所有之前的交易。在铸币厂模型中，铸币厂知晓所有交易并能确定哪笔交易最先到达。在不引入一个可信任方的前提下要达到这个目的，所有交易就必须公开发布 [1]，而且需要一个能让所有参与者<strong>对交易收到顺序的单一历史达成共识</strong>的系统。收款人在每笔交易时，都需要多数节点认同此交易是最先收到的证据。</p>
<p>【关注点】：</p>
<ul>
<li><strong>the absence of a transaction</strong> 翻译为 <strong>不存在的交易</strong>。</li>
<li><em>拥有者的公钥的哈希值的数字签名</em> 如何实现不是很清楚，看起来需要公钥和私钥一起才能签名。</li>
<li><em>对交易收到顺序的单一历史达成共识</em> 这个我理解是关键，如何实现可能会展开来写。</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>论文学习</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希函数和数字签名</title>
    <url>/2023/04/07/Hash-Function-Digital-Signature/</url>
    <content><![CDATA[<h2 id="1-哈希函数-Hash">1. 哈希函数 Hash</h2>
<h3 id="1-1-概念">1.1 概念</h3>
<ul>
<li>Hash，一般翻译做<strong>散列</strong>，也有直接音译为<strong>哈希</strong>的。就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。</li>
<li>这种转换是一种压缩映射，也就是散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说，就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</li>
<li>单向散列函数：又称单向Hash函数、杂凑函数，就是把任意长的输入消息串变化成固定长的输出串且由输出串难以得到输入串的一种函数。这个输出串称为该消息的散列值。一般用于产生消息摘要，密钥加密等.</li>
</ul>
<h3 id="1-2-特点">1.2 特点</h3>
<ul>
<li>算法是公开的</li>
<li>对相同数据运算,得到的结果是一样的</li>
<li>对不同数据运算，如MD5得到的结果默认是128位,32个字符(16进制标识)。</li>
<li>没法进行逆运算信息摘要。</li>
<li>信息“指纹”，是用来做数据识别的。</li>
<li>加密后密文的长度是定长的</li>
</ul>
<h3 id="1-3-用途">1.3 用途</h3>
<ul>
<li>用户密码的加密</li>
<li>搜索引擎，关键字识别(搜索多个关键字，先对每个关键字进行散列，然后多个关键字进行或运算，如果值一致则搜索结果一致)</li>
<li>版权标注 对文件进行散列判断该文件是否是正版或原版的</li>
<li>数字签名 (文件完整性验证 对整个文件进行散列，比较散列值判断文件是否完整或被篡改)</li>
</ul>
<span id="more"></span>
<h2 id="2-常见的哈希加密算法">2 <strong><strong>常见的哈希加密算法</strong></strong></h2>
<p><strong>MD5，HMAC，SHA1，SHA256</strong></p>
<h3 id="2-1-MD5">2.1 MD5</h3>
<blockquote>
<p>MD5即Message - Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。<br>
-----百度百科</p>
</blockquote>
<ul>
<li>从一段字符串中通过相应特征生成一段32位的数字字母混合码。对输入信息生成唯一的128位散列值（32个16进制的数字)</li>
<li>所有的数据（视频、音频、文件、只要存在于硬盘或内存中的）都是可以被MD5加密的，得到的都是32个字符。</li>
</ul>
<p>特征：</p>
<ul>
<li>压缩性：任意长度的数据，算出的MD5值的长度都是固定的。</li>
<li>容易计算：从原数据计算出MD5值很容易</li>
<li>抗修改性：对原数据进行任何改动，哪怕只修改一个字节，所得到的MD5值都有很大区别</li>
<li>弱抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据(即伪造数据)是非常困难</li>
<li>强抗碰撞：想找到两个不同数据，使他们具有相同的MD5值，是非常困难的。</li>
</ul>
<h3 id="2-2-HMAC">2.2 HMAC</h3>
<p>消息认证机制（HMAC）简单说明</p>
<ol>
<li>原理
<ol>
<li>消息的发送者和接收者有一个共享密钥</li>
<li>发送者使用共享密钥对消息加密计算得到MAC值（消息认证码）</li>
<li>消息接收者使用共享密钥对消息加密计算得到MAC值</li>
<li>比较两个MAC值是否一致</li>
</ol>
</li>
<li>使用
<ol>
<li>客户端需要在发送的时候把（消息）+（消息·HMAC）一起发送给服务器</li>
<li>服务器接收到数据后，对拿到的消息用共享的KEY进行HMAC，比较是否一致，如果一致则信任</li>
</ol>
</li>
</ol>
<h3 id="2-3-SHA">2.3 SHA</h3>
<p>安全哈希算法（Secure Hash Algorithm）主要适用于数字签名标准（Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA）。对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要。该算法经过加密专家多年来的发展和改进已日益完善，并被广泛使用。该算法的思想是接收一段明文，然后以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也称为信息摘要或信息认证代码）的过程。散列函数值可以说是对明文的一种“指纹”或是“摘要”所以对散列值的数字签名就可以视为对此明文的数字签名。</p>
<p>SHA是美国国家标准技术研究所发布的国家标准FIPS PUB 180，最新的标准已经于2008年更新到FIPS PUB 180-3。其中规定了SHA-1，SHA-224，SHA-256，SHA-384，SHA-512这几种单向散列算法。SHA-1，SHA-224和SHA-256适用于长度不超过2<sup>64二进制位的消息。SHA-384和SHA-512适用于长度不超过2</sup>128二进制位的消息。</p>
<h2 id="3-数字签名">3. 数字签名</h2>
<p>数字签名本质上是通过HASH算法和RSA加密来实现的。<br>
HASH算法专门用来做文件数据的识别.那么在网络数据传递的过程中，我们可以将明文数据,和数据的HASH值一起传递给对方.对方可以拿出HASH值来进行验证。<br>
但是在这个过程中，如何做到数据的保护呢？明文数据和HASH值如果直接传递就有都被篡改的风险.所以这里我们要对数据进行加密。明文数据有时会比较大,不适合使用RSA非对称加密算法，那么数据的HASH值是比较小的。这个数据是用于校验的，它完全可以使用RSA来加密。所以在数据传递的时候，我们将明文数据加上通过RSA加密的校验数据一并传递给对方。那么这个通过RSA加密的校验数据,我们称之为<strong>签名。</strong><br>
<img src="http://cdn.yunminitools.cn/blog/0407Digital-Signature1.png" alt=" "></p>
<h3 id="3-1-验证数字签名">3.1 验证数字签名</h3>
<p>当对方拿到数据之后,如何进行验证呢?<br>
首先传递数据时会将原始的数据和数字签名一起发送，对方拿到数据后，先进行校验，拿到原始数据,通过同样的HASH算法得到数据的HASH值。然后通过非对称加密，将数字签名中的校验HASH值解密出来。最后对比两个HASH值是否一致，这样可以很好的判断数据是否被篡改。<br>
<img src="http://cdn.yunminitools.cn/blog/0407Digital-Signature2.png" alt=" "></p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>数据安全</tag>
      </tags>
  </entry>
  <entry>
    <title>论文学习 - Bitcoin：A Peer-to-Peer Electronic Cash System（3）</title>
    <url>/2023/04/08/A-Peer-to-Peer-Electronic-Cash-System-3/</url>
    <content><![CDATA[<h1>比特币：一个点对点的电子货币系统</h1>
<h2 id="3-时间戳服务器">3. 时间戳服务器</h2>
<p>3  Timestamp Server<br>
The solution we propose begins with a timestamp server. A timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash, such as in a newspaper or Usenet post [2-5]. The timestamp proves that the data must have existed at the time, obviously, in order to get into the hash. Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it.<br>
<img src="http://cdn.yunminitools.cn/blog/0407Timestamp-en.png" alt=" "><br>
我们提出的方案从时间戳服务器开始。时间戳服务器计算包含多个需要被打时间戳的数据项的区块的哈希值并广泛地发布这个哈希值，就像在报纸或新闻组帖子里 [2-5]。时间戳能证明要得到这个哈希值，显然这些数据当时一定是存在的。每个时间戳的哈希值都纳入了上一个时间戳，形成一条链，后面的时间戳进一步增强前一个时间戳。<br>
<img src="http://cdn.yunminitools.cn/blog/0407Timestamp-zh.png" alt=" "></p>
<span id="more"></span>
<h2 id="4-工作量证明">4. 工作量证明</h2>
<ol start="4">
<li>Proof-of-Work<br>
To implement a distributed timestamp server on a peer-to-peer basis, we will need to use a proof-of-work system similar to Adam Back’s Hashcash [6], rather than newspaper or Usenet posts. The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits. The average work required is exponential in the number of zero bits required and can be verified by executing a single hash.<br>
For our timestamp network, we implement the proof-of-work by incrementing a nonce in the block until a value is found that gives the block’s hash the required zero bits. Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it.<br>
<img src="http://cdn.yunminitools.cn/blog/0407Proofofwork-en.png" alt=" "><br>
The proof-of-work also solves the problem of determining representation in majority decision<br>
making. If the majority were based on one-IP-address-one-vote, it could be subverted by anyone<br>
able to allocate many IPs. Proof-of-work is essentially one-CPU-one-vote. The majority<br>
decision is represented by the longest chain, which has the greatest proof-of-work effort invested<br>
in it. If a majority of CPU power is controlled by honest nodes, the honest chain will grow the<br>
fastest and outpace any competing chains. To modify a past block, an attacker would have to<br>
redo the proof-of-work of the block and all blocks after it and then catch up with and surpass the<br>
work of the honest nodes. We will show later that the probability of a slower attacker catching up<br>
diminishes exponentially as subsequent blocks are added.<br>
To compensate for increasing hardware speed and varying interest in running nodes over time,<br>
the proof-of-work difficulty is determined by a moving average targeting an average number of<br>
blocks per hour. If they’re generated too fast, the difficulty increases</li>
</ol>
<p>为了实现一个基于点对点的时间戳服务器，我们需要使用一个类似 Adam Back 提出的哈希货币 [6] 的工作量证明系统，而不是报纸或新闻组帖子那样。工作量证明采取搜索一个值，使得被哈希时（如使用 SHA-256）得到的哈希值以数个 0 比特开始。平均所需工作量将随所需 0 比 特呈指数级增长而验证却只需执行一次哈希。<br>
对于我们的时间戳网络。我们通过在区块中加入一个随机数，直到使得区块的哈希值满足所需 0 比特的数被找到的方式实现工作量证明。一旦消耗了 CPU 算力使区块满足了工作量证明，那么除非重做这个工作否则就无法更改区块。由于后面的区块是链接在这个区块后面的，改变这个区块将需要重做所有后面的区块。<br>
<img src="http://cdn.yunminitools.cn/blog/0407Proofofwork-zh.png" alt="  "><br>
工作量证明同时解决了在多数决定中确定投票方式的问题。如果多数是按 IP 地址投票来决定，那么它将可能被能分配大量 IP 地址的人破坏。工作量证明本质上是按 CPU 投票。最长的链代表了多数决定，因为有最大的计算工作量证明的算力投入到这条链上。如果多数的 CPU 算力被诚实节点控制，诚实的链就会增长得最快并超过其他的竞争链。要修改过去的某区块，攻击者必须重做这个区块以及其后的所有区块的工作量证明，从而赶上并超过诚实节点的工作。我们后面会证明随着后续的区块被添加一个更慢的攻击者赶上诚实节点的概率将呈指数级递减。<br>
为了抵消硬件运算速度的增加及平衡不同时期运行节点的利益，工作量证明的难度将由移动平均数法来确定每小时生成区块的平均数。如果区块生成得过快，那么生成的难度就会增加。</p>
<p>【关注点】：</p>
<ul>
<li>incrementing a nonce 翻译为 增加一个随机数</li>
<li>”<em>Adam Back 提出的哈希货币</em>“，看来比特币的POW也是参考了前人的成果的</li>
<li>“<em>工作量证明的难度将由移动平均数法来确定</em>” 这个如何实现，看看后面有没有说明。</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>论文学习</tag>
      </tags>
  </entry>
  <entry>
    <title>论文学习 - Bitcoin：A Peer-to-Peer Electronic Cash System（4）</title>
    <url>/2023/04/09/A-Peer-to-Peer-Electronic-Cash-System-4/</url>
    <content><![CDATA[<h1>比特币：一个点对点的电子货币系统</h1>
<h2 id="5-网络">5. 网络</h2>
<p>5 Network<br>
The steps to run the network are as follows:</p>
<ol>
<li>New transactions are broadcast to all nodes.</li>
<li>Each node collects new transactions into a block.</li>
<li>Each node works on finding a difficult proof-of-work for its block.</li>
<li>When a node finds a proof-of-work, it broadcasts the block to all nodes.</li>
<li>Nodes accept the block only if all transactions in it are valid and not already spent.</li>
<li>Nodes express their acceptance of the block by working on creating the next block in the<br>
chain, using the hash of the accepted block as the previous hash.</li>
</ol>
<p>Nodes always consider the longest chain to be the correct one and will keep working on extending it. If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first. In that case, they work on the first one they received, but save the other branch in case it becomes longer. The tie will be broken when the next proof-of-work is found and one branch becomes longer; the nodes that were working on the other branch will then switch to the longer one.</p>
<p>New transaction broadcasts do not necessarily need to reach all nodes. As long as they reach many nodes, they will get into a block before long. Block broadcasts are also tolerant of dropped messages. If a node does not receive a block, it will request it when it receives the next block and realizes it missed one.</p>
<p>运行网络的步骤如下：</p>
<ol>
<li>新交易向所有节点广播。</li>
<li>每个节点将新交易收集到一个区块。</li>
<li>每个节点为它的区块寻找工作量证明（困难）。</li>
<li>当一个节点找到了工作量证明，就向所有节点广播这个区块。</li>
<li>节点只有在区块内所有交易都是有效的且之前没有被支付的情况下接收这个区块。</li>
<li>节点通过使用这个区块的哈希值作为上一个哈希值，在链中创建下一个区块的方式表示对这个区块的接受。</li>
</ol>
<p>节点总是认为最长的链为正确的并持续致力于延长它。如果两个节点同时广播了不同的下一个区块，有些节点可能先收到其中一个而其他节点先收到另一个。这种情况，节点基于他们收到的第一个区块工作，但是也保存另一个分支以防它变为更长的链。当下一个工作量证明被找到后僵局就会被打破，从而其中一个分支变得更长；在<strong>另一个分支上工作的节点将切换到更长的链</strong>上来。</p>
<p>新交易的广播不必到达所有的节点。只要到达一些节点，<strong>不久就会进入到一个区块</strong>。区块广播也是能容忍消息丢失的。如果一个节点没有收到某个区块，它将在收到下一个区块时发现它丢失了一个区块然后去请求这个区块。</p>
<p>【关注点】：</p>
<ul>
<li>另一个分支上工作的节点将切换到更长的链，也就意味着有些交易会失效，对于这些失效的交易如何处理？</li>
<li>不久就会进入到一个区块，这个是指这笔交易会被保存到区块里。那一个区块会包含多少笔交易呢？</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>论文学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Uric组件2022文档</title>
    <url>/2023/03/01/uric2022/</url>
    <content><![CDATA[<h1>Uric组件2022文档</h1>
<p>预备知识点：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Python基础</span><br><span class="line">Mysql</span><br><span class="line">前端</span><br><span class="line">Django</span><br><span class="line">DRF组件+VUE3</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1>一 前端项目初始化</h1>
<h2 id="1-1-客户端项目创建">1.1 客户端项目创建</h2>
<p>我们使用的vue-cli脚手架作为我们前端开发使用的框架，下面看一下vue-cli的安装。</p>
<p>安装脚手架：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ yarn global add @vue/cli</span><br></pre></td></tr></table></figure>
<p>项目前端环境版本依赖</p>
<p><img src="assets/image-20220525%E4%B8%8A%E5%8D%88115212287-3450733.png" alt="image-20220525上午115212287"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">node的版本：v14.16.0以上</span><br><span class="line">vue-cli需要的安装和运行需要借助到node.js的环境(换句话说也是js代码的解释器)</span><br><span class="line">vue：3版本</span><br><span class="line">@vue/cli 4.5.13</span><br></pre></td></tr></table></figure>
<h3 id="1-1-1-Node-js的安装">1.1.1 Node.js的安装</h3>
<p>Node.js是一个服务端语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>
<p>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</p>
</li>
<li>
<p>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</p>
<p>我们一般安装LTS(长线支持版本)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/%E3%80%90%E4%B8%8A%E9%9D%A2%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85%E4%BA%86nvm%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E9%87%8C%E4%B8%8D%E7%94%A8%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E4%BA%86%E3%80%91">https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】</a></p>
<p>下载之后双击安装，一路点击下一步就可以了。</p>
</li>
</ul>
<p>node.js的版本有两大分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</span><br><span class="line">社区发布的node.js版本：xx.xx.x  就是社区开发的版本</span><br></pre></td></tr></table></figure>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v   #pip</span><br></pre></td></tr></table></figure>
<p>在安装node.js完成后，在node.js中会同时帮我们安装一个包管理器npm。我们可以借助npm命令来安装node.js的第三方包。这个工具相当于python的pip管理器，php的composer，go语言的go get，java的maven。</p>
<h3 id="1-1-2-npm">1.1.2 npm</h3>
<p>常用指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              # 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目跟母下.node_modules下保存</span><br><span class="line">npm list                        # 查看当前目录下已安装的node包</span><br><span class="line">npm view 包名 engines            # 查看包所依赖的Node的版本 </span><br><span class="line">npm outdated                    # 检查包是否已经过时，命令会列出所有已过时的包</span><br><span class="line">npm update 包名                  # 更新node包</span><br><span class="line">npm uninstall 包名               # 卸载node包</span><br><span class="line">npm 命令 -h                      # 查看指定命令的帮助文档</span><br></pre></td></tr></table></figure>
<p>如果npm大家觉得速度比较慢，可以安装cnpm来进行国内包源的下载</p>
<h4 id="cnpm介绍">cnpm介绍</h4>
<ol>
<li>说明：因为谷歌安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果谷歌的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事来自官网：“这是一个完整npmjs.org镜像，你可以用此代替官方版本（只读），同步频率目前为10分钟一次以保证尽量与官方服务同步“。</li>
<li>官方网址：<a href="http://npm.taobao.org/">http://npm.taobao.org</a></li>
<li>安装：命令提示符执行<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></li>
<li>注意：安装完后最好查看其版本cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//临时使用</span><br><span class="line">npm install jquery --registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">//可以把这个选型配置到文件中，这样不用每一次都很麻烦</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">//验证是否配置成功 </span><br><span class="line">npm config list 或者 npm config get registry</span><br><span class="line"></span><br><span class="line">//安装cnpm，在任意目录下都可执行,--global是全局安装，不可省略</span><br><span class="line">npm install --global cnpm 或者 npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">//安装后直接使用</span><br><span class="line">cnpm install jquery</span><br></pre></td></tr></table></figure>
<p>说明：NPM（节点包管理器）是的NodeJS的包管理器，用于节点插件管理（包括安装，卸载，管理依赖等）</p>
<blockquote>
<ol>
<li>使用NPM安装插件：命令提示符执行<code>npm install &lt;name&gt; [-g] [--save-dev]</code><br>
<code>&lt;name&gt;</code>：节点插件名称。<br>
例：<code>npm install gulp-less --save-dev</code></li>
<li><code>-g</code>：全局安装。 将会安装在C：\ Users \ Administrator \ AppData \ Roaming \ npm，并且写入系统环境变量;非全局安装：将会安装在当前定位目录;全局安装可以通过命令行任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过要求（）调用;</li>
<li><code>--save</code>：将保存至的package.json（的package.json是的NodeJS项目配置文件）</li>
<li><code>-dev</code>：保存至的package.json的devDependencies节点，不指定-dev将保存至依赖节点</li>
</ol>
</blockquote>
<p>为什么要保存至的的package.json？因为节点插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入的package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包）</p>
<h3 id="1-1-3-vue-cli创建项目">1.1.3  vue-cli创建项目</h3>
<h4 id="创建项目">创建项目</h4>
<pre><code>使用vue自动化工具可以快速搭建单页应用项目目录。

该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue create uric_web</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动开发服务器 ctrl+c 停止服务</span></span><br><span class="line">cd uric_web</span><br><span class="line">npm run serve           <span class="comment">// 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220525%E4%B8%8A%E5%8D%88115358990-3450841.png" alt="image-20220525上午115358990"></p>
<p><img src="assets/image-20220525%E4%B8%8A%E5%8D%88115430157-3450872.png" alt="image-20220525上午115430157"></p>
<p><img src="assets/image-20220525%E4%B8%8A%E5%8D%88115523518-3450924.png" alt="image-20220525上午115523518"></p>
<p><img src="assets/image-20220525%E4%B8%8A%E5%8D%88115622757-3450984.png" alt="image-20220525上午115622757"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 那么访问一下命令执行完成后提示出来的网址就可以看到网站了：http://localhost:8080/</span></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220525%E4%B8%8A%E5%8D%88115725344-3451046.png" alt="image-20220525上午115725344"></p>
<p>项目创建完成之后，我们会看到urilsweb项目其实是一个文件夹，我们进入到文件夹内部就会发现一些目录和文件，我们简单介绍一下它们都是干什么的</p>
<h4 id="项目目录结构介绍">项目目录结构介绍</h4>
<p>核心文件和目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">src/         主开发目录，要开发的客户端代码文件（单文件组件，样式、工具函数等等）全部在这个目录下</span><br><span class="line"></span><br><span class="line">static/      静态资源目录，项目中的静态资源(css，js，图片等文件)放在这个文件夹</span><br><span class="line"></span><br><span class="line">dist/        项目打包发布文件夹，目前没有这个文件夹，最后要上线单文件项目文件都在这个文件夹中	</span><br><span class="line">		    后面使用npm build 打包项目，让项目中的vue组件经过编译变成js 代码以后,dist就出现了</span><br><span class="line"></span><br><span class="line">node_modules/     node的包目录，项目运行的依赖包存储目录，</span><br><span class="line">                  package.json和package-lock.json文件中会自动记录了这个目录下所有的包以及包的版本信息，</span><br><span class="line">                  如果node_modules没有，但是有package.json，则可以在终端下，通过npm install进行恢复。</span><br><span class="line"></span><br><span class="line">config/      配置目录，是环境配置目录与项目无关。</span><br><span class="line"></span><br><span class="line">build/       项目打包时依赖的目录</span><br><span class="line"></span><br><span class="line">src/router/  路由，是我们创建项目的时候，如果选择安装vue-router，就自动会生成这个目录。</span><br><span class="line">src/assets/  静态资源存储目录，与static目录作用类似。</span><br><span class="line">src/components/  组件存储目录，就是浏览器中用户看到的页面的一部分内容。</span><br><span class="line">src/views/       组件存储目录，就是浏览器中用户看到的页面内容，views往往会加载并包含components中的组件进来</span><br></pre></td></tr></table></figure>
<p>目录结构详细介绍</p>
<p><img src="assets/image-20210907100137864-16309801001818.png" alt="image-20210907100137864"></p>
<h4 id="项目执行流程图">项目执行流程图</h4>
<p><img src="assets/1625305034687.png" alt="1625305034687"></p>
<h3 id="1-1-4-展示中心组件">1.1.4 展示中心组件</h3>
<p>src/main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>src/App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#nav</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#nav</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#nav</span> <span class="selector-tag">a</span><span class="selector-class">.router-link-exact-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#42b983</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>router/index.js，代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowCenter</span> <span class="keyword">from</span> <span class="string">&#x27;../views/ShowCenter.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ShowCenter&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ShowCenter</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>views/ShowCenter.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;showcenter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>show center<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;ShowCenter&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:8080">http://localhost:8080</a>  就看到了我们的展示中心页面。</p>
<h3 id="1-1-5-调整配置">1.1.5 调整配置</h3>
<p>为了方便开发，我们做一些配置调整</p>
<p>Vue.config.js是一个可选的配置文件，如果项目的根目录存在这个文件，那么它就会被 <code>@vue/cli-service</code> 自动加载。你也可以使用package.json中的vue字段，但要注意严格遵守JSON的格式来写。这里使用配置vue.config.js的方式进行处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;defineConfig&#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="comment">/* 本地ip地址 */</span></span><br><span class="line">        <span class="comment">//host: &quot;192.168.0.131&quot;,</span></span><br><span class="line">        <span class="comment">// host: &quot;www.uric.cn&quot;, //局域网和本地访问</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&quot;8000&quot;</span>,</span><br><span class="line">        <span class="comment">// hot: true,</span></span><br><span class="line">        <span class="comment">/* 自动打开浏览器 */</span></span><br><span class="line">        <span class="comment">// open: false,</span></span><br><span class="line">        <span class="comment">/*overlay: &#123;</span></span><br><span class="line"><span class="comment">            warning: false,</span></span><br><span class="line"><span class="comment">            error: true</span></span><br><span class="line"><span class="comment">        &#125;,*/</span></span><br><span class="line">        <span class="comment">/* 跨域代理 */</span></span><br><span class="line">        <span class="comment">/*proxy: &#123;</span></span><br><span class="line"><span class="comment">            &quot;/api&quot;: &#123;</span></span><br><span class="line"><span class="comment">                /!* 目标代理服务器地址 *!/</span></span><br><span class="line"><span class="comment">                target: &quot;http://xxxx.top&quot;, //</span></span><br><span class="line"><span class="comment">                /!* 允许跨域 *!/</span></span><br><span class="line"><span class="comment">                changeOrigin: true,</span></span><br><span class="line"><span class="comment">                ws: true,</span></span><br><span class="line"><span class="comment">                pathRewrite: &#123;</span></span><br><span class="line"><span class="comment">                    &quot;^/api&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我们现在为前端和后端分别设置两个不同的域名：</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>域名</th>
</tr>
</thead>
<tbody>
<tr>
<td>前端</td>
<td><code>www.uric.cn</code></td>
</tr>
<tr>
<td>后端</td>
<td><code>api.uric.cn</code></td>
</tr>
</tbody>
</table>
<p>Linux/mac系统下执行指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">windows下是C:/windows/system32/drivers/etc/hosts</span></span><br></pre></td></tr></table></figure>
<p>加上如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1   localhost</span><br><span class="line">127.0.0.1   api.uric.cn</span><br><span class="line">127.0.0.1   www.uric.cn</span><br></pre></td></tr></table></figure>
<p>部分使用windows开发的同学，如果hosts修改保存不了，可以复制这个文件到桌面，修改完成以后，在粘贴到对应目录下。</p>
<p><img src="assets/image-20220625103718596-6124639.png" alt="image-20220625103718596"></p>
<p>在开发过程中，我们可能经常会在前端项目的业务里面使用到某些变量，我们可以添加到配置文件中，比如我们在src目录下创建一个settings.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="comment">// 注意，对象要抛出后，其他文件中才能引入使用</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;http://api.urils.cn:8000&#x27;</span> <span class="comment">// 我们的后台项目将来就通过这个域名和端口来启动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便后面其他页面组件使用settings中的配置变量，我们在main.js文件中引入封装成vue对象的全局属性.</p>
<p>main.js，代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> settings <span class="keyword">from</span> <span class="string">&quot;@/settings&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$settings</span> = settings;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-6-安装axios">1.1.6 安装axios</h3>
<p>后面我们需要在前端来获取后端的数据，意味着要发送请求，我们使用axios模块来进行http请求的发送，</p>
<p>它的特点和ajax一样：异步请求。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">项目根目录下执行如下指令</span><br><span class="line">npm install -S axios --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><code>ShowCenter</code>组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;showcenter&quot;&gt;</span><br><span class="line">    &lt;h1&gt;show center&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ShowCenter&#x27;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$settings.host)</span><br><span class="line">    axios.get(&#x27;http://wthrcdn.etouch.cn/weather_mini?city=北京&#x27;)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">          console.log(&quot;response:::&quot;, response.data.data.forecast)</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220525%E4%B8%8B%E5%8D%8815735710-3458256.png" alt="image-20220525下午15735710"></p>
<p>接下来我们将展示中心页面写的好看一些。</p>
<p>我们当前前端项目使用的用于展示界面的前端插件是Ant Design，能够帮我们快速优雅的完成前端页面效果，下面介绍一下。</p>
<h2 id="1-2-ant-design插件">1.2 ant-design插件</h2>
<h3 id="介绍">介绍</h3>
<pre><code>Ant Design 是一个致力于提升『用户』和『设计者』使用体验的中台设计语言。它模糊了产品经理、交互设计师、视觉设计师、前端工程师、开发工程师等角色边界，将进行 UE 设计和 UI 设计人员统称为『设计者』，利用统一的规范进行设计赋能，全面提高中台产品体验和研发效率，是蚂蚁金服出品的开源框架。

Ant Design 官方介绍： &quot;在中台产品的研发过程中，会出现不同的设计规范和实现方式，但其中往往存在很多类似的页面和组件，给设计师和工程师带来很多困扰和重复建设，大大降低了产品的研发效率。&quot;

蚂蚁金服体验技术部经过大量的项目实践和总结，沉淀出设计语言 Ant Design，这可不单纯只是设计原则、控件规范和视觉尺寸，还配套有前端代码实现方案。也就是说采用Ant Design后，UI设计和前端界面研发可同步完成，效率大大提升。目前有阿里、美团、滴滴、简书采用。Ant Design有Web版和Moblie版。

如果前端这些插件都是我们通过js或者jquery手撸的话，工作量太重不说，效率还低。

Ant Design 则封装了一系列高质量的 React 组件，十分适用于在企业级的应用中，框架提供的 api 十分详尽，上手和使用相对简单，值得一提的是， Ant Design 使用 ES6 进行编写，因此使用过程中对 ES6 也是一次学习的机会。

我们现在学习的是vue框架和ant-desigin的兼容，那么已经有高手开源出了一套ant-design的vue实现，下面我们就来学习使用。
</code></pre>
<p>ant-desigin特点</p>
<ul>
<li>专为Web应用程序设计的企业级UI。</li>
<li>开箱即用的一组高质量React组件。</li>
<li>用具有可预测的静态类型的TypeScript编写。</li>
<li>整套设计资源和开发工具。</li>
<li>支持数十种语言的国际化。</li>
<li>强大的主题自定义细节。</li>
</ul>
<h3 id="常用网址">常用网址</h3>
<p>官网：<a href="https://ant.design/%EF%BC%8Cantdv%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%85%A8%E7%A7%B0">https://ant.design/，antdv工具的使用，全称</a> Ant Design of Vue。</p>
<p>官网地址：<a href="https://next.antdv.com/docs/vue/getting-started-cn">https://next.antdv.com/docs/vue/getting-started-cn</a></p>
<p>Ant Design of Vue的使用，我们在项目中学习。</p>
<h3 id="安装上手">安装上手</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i --save ant-design-vue@next</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：package.json中的<code>&quot;ant-design-vue&quot;: &quot;^3.2.7&quot;</code>,一定是3以上版本</p>
</blockquote>
<p>在main.js文件中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Antd</span> <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/antd.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./settings&#x27;</span></span><br><span class="line"><span class="keyword">import</span> settings <span class="keyword">from</span> <span class="string">&quot;@/settings&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title class_">Antd</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$settings</span> = settings;</span><br></pre></td></tr></table></figure>
<p>下面测试一下效果，我们在ShowCenter.vue组件中引入一个ant-design的button按钮，看看怎么样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;showcenter&quot;&gt;</span><br><span class="line">    &lt;h1&gt;show center&lt;/h1&gt;</span><br><span class="line">    &lt;a-button type=&quot;primary&quot;&gt;Primary&lt;/a-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ShowCenter&#x27;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$settings.host)</span><br><span class="line">    axios.get(&#x27;http://wthrcdn.etouch.cn/weather_mini?city=北京&#x27;)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">          console.log(&quot;response:::&quot;, response.data.data.forecast)</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>好，效果有了。</p>
<p><img src="assets/image-20220525%E4%B8%8B%E5%8D%8820217438.png" alt="image-20220525下午20217438"></p>
<h3 id="中文支持">中文支持</h3>
<p>ShowCenter.vue展示中文日历，没有配置之前：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;showcenter&quot;&gt;</span><br><span class="line">    &lt;h1&gt;show center&lt;/h1&gt;</span><br><span class="line">    &lt;a-button type=&quot;primary&quot;&gt;Primary&lt;/a-button&gt;</span><br><span class="line">    &lt;div :style=&quot;&#123; width: &#x27;300px&#x27;, border: &#x27;1px solid #d9d9d9&#x27;, borderRadius: &#x27;4px&#x27; &#125;&quot;&gt;</span><br><span class="line">      &lt;a-calendar v-model:value=&quot;value&quot; :fullscreen=&quot;false&quot; @panelChange=&quot;onPanelChange&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ShowCenter&#x27;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const value = ref();</span><br><span class="line"></span><br><span class="line">    const onPanelChange = (value, mode) =&gt; &#123;</span><br><span class="line">      console.log(value, mode);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      value,</span><br><span class="line">      onPanelChange,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$settings.host)</span><br><span class="line">    axios.get(&#x27;http://wthrcdn.etouch.cn/weather_mini?city=北京&#x27;)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">          console.log(&quot;response:::&quot;, response.data.data.forecast)</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>ant-design-vue</code> 目前的默认文案是英文。在使用某些插件(比如时间日期选择框等)的时候，需要我们来做中文支持，设置如下。</p>
<p>src/App.vue，代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-config-provider :locale=&quot;locale&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;showcenter&quot;&gt;</span><br><span class="line">      &lt;h1&gt;show center&lt;/h1&gt;</span><br><span class="line">      &lt;a-button type=&quot;primary&quot;&gt;Primary&lt;/a-button&gt;</span><br><span class="line">      &lt;div :style=&quot;&#123; width: &#x27;300px&#x27;, border: &#x27;1px solid #d9d9d9&#x27;, borderRadius: &#x27;4px&#x27; &#125;&quot;&gt;</span><br><span class="line">        &lt;a-calendar v-model:value=&quot;value&quot; :fullscreen=&quot;false&quot; @panelChange=&quot;onPanelChange&quot;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/a-config-provider&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">import zhCN from &#x27;ant-design-vue/es/locale/zh_CN&#x27;;</span><br><span class="line">import dayjs from &#x27;dayjs&#x27;;</span><br><span class="line">import &#x27;dayjs/locale/zh-cn&#x27;;</span><br><span class="line"></span><br><span class="line">dayjs.locale(&#x27;zh-cn&#x27;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ShowCenter&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      locale: zhCN,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const value = ref();</span><br><span class="line"></span><br><span class="line">    const onPanelChange = (value, mode) =&gt; &#123;</span><br><span class="line">      console.log(value, mode);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      value,</span><br><span class="line">      onPanelChange,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$settings.host)</span><br><span class="line">    axios.get(&#x27;http://wthrcdn.etouch.cn/weather_mini?city=北京&#x27;)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">          console.log(&quot;response:::&quot;, response.data.data.forecast)</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要安装一个包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install dayjs</span><br></pre></td></tr></table></figure>
<h3 id="echarts图表插件">echarts图表插件</h3>
<p>由于我们有很多的图表数据展示，而Ant-desigin中没有很优秀的图表插件，所以我们还需要借助其他开源插件，比如echarts和hcharts，我们本次采用的是百度开源的echarts，那么我们如何引入使用呢，看下面的步骤。</p>
<p><a href="https://echarts.apache.org/zh/index.html">Echarts官方</a></p>
<p>下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install echarts --save --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>为了方便后面组件的使用，我们在src/main.js中引入一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import echarts from &#x27;echarts&#x27;</span></span><br><span class="line"><span class="keyword">let</span> echarts = <span class="built_in">require</span>(<span class="string">&#x27;echarts&#x27;</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$echarts</span> = echarts</span><br></pre></td></tr></table></figure>
<p>在ShowCenter.vue组件中简单使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;show center&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;a-button type=&quot;primary&quot;&gt;Primary&lt;/a-button&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;a-config-provider :locale=&quot;locale&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;showcenter&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;calendar&quot; :style=&quot;&#123; width: &#x27;400px&#x27;, border: &#x27;1px solid #d9d9d9&#x27;, borderRadius: &#x27;4px&#x27;&#125;&quot;&gt;</span><br><span class="line">        &lt;a-calendar v-model:value=&quot;value&quot; :fullscreen=&quot;false&quot; @panelChange=&quot;onPanelChange&quot;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;chart&quot; ref=&quot;chart&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/a-config-provider&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">import zhCN from &#x27;ant-design-vue/es/locale/zh_CN&#x27;;</span><br><span class="line">import dayjs from &#x27;dayjs&#x27;;</span><br><span class="line">import &#x27;dayjs/locale/zh-cn&#x27;;</span><br><span class="line"></span><br><span class="line">dayjs.locale(&#x27;zh-cn&#x27;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ShowCenter&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      locale: zhCN,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    init_chart() &#123;</span><br><span class="line">      // 基于准备好的dom，初始化echarts实例</span><br><span class="line">      let myChart = this.$echarts.init(this.$refs.chart)</span><br><span class="line">      // 绘制图表</span><br><span class="line">      let option = &#123;</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          trigger: &#x27;axis&#x27;,</span><br><span class="line">          axisPointer: &#123;</span><br><span class="line">            // Use axis to trigger tooltip</span><br><span class="line">            type: &#x27;shadow&#x27; // &#x27;shadow&#x27; as default; can also be &#x27;line&#x27; or &#x27;shadow&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;&#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">          left: &#x27;3%&#x27;,</span><br><span class="line">          right: &#x27;4%&#x27;,</span><br><span class="line">          bottom: &#x27;3%&#x27;,</span><br><span class="line">          containLabel: true</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &#x27;value&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &#x27;category&#x27;,</span><br><span class="line">          data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#x27;Direct&#x27;,</span><br><span class="line">            type: &#x27;bar&#x27;,</span><br><span class="line">            stack: &#x27;total&#x27;,</span><br><span class="line">            label: &#123;</span><br><span class="line">              show: true</span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              focus: &#x27;series&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            data: [320, 302, 301, 334, 390, 330, 320]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#x27;Mail Ad&#x27;,</span><br><span class="line">            type: &#x27;bar&#x27;,</span><br><span class="line">            stack: &#x27;total&#x27;,</span><br><span class="line">            label: &#123;</span><br><span class="line">              show: true</span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              focus: &#x27;series&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#x27;Affiliate Ad&#x27;,</span><br><span class="line">            type: &#x27;bar&#x27;,</span><br><span class="line">            stack: &#x27;total&#x27;,</span><br><span class="line">            label: &#123;</span><br><span class="line">              show: true</span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              focus: &#x27;series&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#x27;Video Ad&#x27;,</span><br><span class="line">            type: &#x27;bar&#x27;,</span><br><span class="line">            stack: &#x27;total&#x27;,</span><br><span class="line">            label: &#123;</span><br><span class="line">              show: true</span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              focus: &#x27;series&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            data: [150, 212, 201, 154, 190, 330, 410]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#x27;Search Engine&#x27;,</span><br><span class="line">            type: &#x27;bar&#x27;,</span><br><span class="line">            stack: &#x27;total&#x27;,</span><br><span class="line">            label: &#123;</span><br><span class="line">              show: true</span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              focus: &#x27;series&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            data: [820, 832, 901, 934, 1290, 1330, 1320]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line">      myChart.setOption(option);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const value = ref();</span><br><span class="line"></span><br><span class="line">    const onPanelChange = (value, mode) =&gt; &#123;</span><br><span class="line">      console.log(value, mode);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      value,</span><br><span class="line">      onPanelChange,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(this.$settings.host)</span><br><span class="line">    axios.get(&#x27;http://wthrcdn.etouch.cn/weather_mini?city=北京&#x27;)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">          console.log(&quot;response:::&quot;, response.data.data.forecast)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    this.init_chart();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.calendar, .chart &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  float: left;</span><br><span class="line">  margin: 0 auto 0 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220525%E4%B8%8B%E5%8D%8821612483-3459375.png" alt="image-20220525下午21612483"></p>
<p>改进组合API：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;show center&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;a-button type=&quot;primary&quot;&gt;Primary&lt;/a-button&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;div class=&quot;chart&quot; ref=&quot;chart&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;chart2&quot; ref=&quot;chart2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123;onMounted, ref&#125; from &quot;vue&quot;;</span><br><span class="line">import zhCN from &#x27;ant-design-vue/es/locale/zh_CN&#x27;;</span><br><span class="line">import dayjs from &#x27;dayjs&#x27;;</span><br><span class="line">import &#x27;dayjs/locale/zh-cn&#x27;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line"></span><br><span class="line">dayjs.locale(&#x27;zh-cn&#x27;);</span><br><span class="line">const locale = zhCN</span><br><span class="line"></span><br><span class="line">// (1)</span><br><span class="line">const value = ref();</span><br><span class="line">const onPanelChange = (value, mode) =&gt; &#123;</span><br><span class="line">  console.log(value, mode);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// (2)</span><br><span class="line">let init_chart = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  var myChart = echarts.init(chart.value);</span><br><span class="line">  var option;</span><br><span class="line">  // 绘制图表</span><br><span class="line">  option = &#123;</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;axis&#x27;,</span><br><span class="line">      axisPointer: &#123;</span><br><span class="line">        // Use axis to trigger tooltip</span><br><span class="line">        type: &#x27;shadow&#x27; // &#x27;shadow&#x27; as default; can also be &#x27;line&#x27; or &#x27;shadow&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;&#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">      left: &#x27;3%&#x27;,</span><br><span class="line">      right: &#x27;4%&#x27;,</span><br><span class="line">      bottom: &#x27;3%&#x27;,</span><br><span class="line">      containLabel: true</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: &#x27;value&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: &#x27;category&#x27;,</span><br><span class="line">      data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;Direct&#x27;,</span><br><span class="line">        type: &#x27;bar&#x27;,</span><br><span class="line">        stack: &#x27;total&#x27;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: true</span><br><span class="line">        &#125;,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          focus: &#x27;series&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [320, 302, 301, 334, 390, 330, 320]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;Mail Ad&#x27;,</span><br><span class="line">        type: &#x27;bar&#x27;,</span><br><span class="line">        stack: &#x27;total&#x27;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: true</span><br><span class="line">        &#125;,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          focus: &#x27;series&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;Affiliate Ad&#x27;,</span><br><span class="line">        type: &#x27;bar&#x27;,</span><br><span class="line">        stack: &#x27;total&#x27;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: true</span><br><span class="line">        &#125;,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          focus: &#x27;series&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;Video Ad&#x27;,</span><br><span class="line">        type: &#x27;bar&#x27;,</span><br><span class="line">        stack: &#x27;total&#x27;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: true</span><br><span class="line">        &#125;,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          focus: &#x27;series&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [150, 212, 201, 154, 190, 330, 410]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;Search Engine&#x27;,</span><br><span class="line">        type: &#x27;bar&#x27;,</span><br><span class="line">        stack: &#x27;total&#x27;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: true</span><br><span class="line">        &#125;,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          focus: &#x27;series&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [820, 832, 901, 934, 1290, 1330, 1320]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  option &amp;&amp; myChart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const chart = ref();</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  init_chart()</span><br><span class="line">  init_chart2()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// (3)</span><br><span class="line"></span><br><span class="line">const chart2 = ref();</span><br><span class="line"></span><br><span class="line">let init_chart2 = () =&gt; &#123;</span><br><span class="line">  console.log(chart2.value)</span><br><span class="line">  var myChart = echarts.init(chart2.value);</span><br><span class="line">  var option;</span><br><span class="line">  option = &#123;</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;item&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">      top: &#x27;5%&#x27;,</span><br><span class="line">      left: &#x27;center&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;Access From&#x27;,</span><br><span class="line">        type: &#x27;pie&#x27;,</span><br><span class="line">        radius: [&#x27;40%&#x27;, &#x27;70%&#x27;],</span><br><span class="line">        avoidLabelOverlap: false,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          borderRadius: 10,</span><br><span class="line">          borderColor: &#x27;#fff&#x27;,</span><br><span class="line">          borderWidth: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: false,</span><br><span class="line">          position: &#x27;center&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        emphasis: &#123;</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: true,</span><br><span class="line">            fontSize: &#x27;40&#x27;,</span><br><span class="line">            fontWeight: &#x27;bold&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        labelLine: &#123;</span><br><span class="line">          show: false</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [</span><br><span class="line">          &#123;value: 1048, name: &#x27;Search Engine&#x27;&#125;,</span><br><span class="line">          &#123;value: 735, name: &#x27;Direct&#x27;&#125;,</span><br><span class="line">          &#123;value: 580, name: &#x27;Email&#x27;&#125;,</span><br><span class="line">          &#123;value: 484, name: &#x27;Union Ads&#x27;&#125;,</span><br><span class="line">          &#123;value: 300, name: &#x27;Video Ads&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  option &amp;&amp; myChart.setOption(option);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.chart, .chart2 &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  float: left;</span><br><span class="line">  margin: 0 auto 0 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="assets/%E6%88%AA%E5%B1%8F2022-06-21%2020.31.34.png" alt="截屏2022-06-21 20.31.34"></p>
<p>好，到此前端项目初始化完成。</p>
<h2 id="1-3-组件初始化">1.3 组件初始化</h2>
<h3 id="登录组件初始化">登录组件初始化</h3>
<p>views/Login.vue，代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login box&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;../assets/login.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;login&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;login-title&quot;&gt;</span><br><span class="line">        &lt;p class=&quot;hi&quot;&gt;Hello,Urils!&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;login_box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">          &lt;span&gt;登录&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;inp&quot;&gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;用户名&quot; class=&quot;user&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;password&quot; type=&quot;password&quot; class=&quot;pwd&quot; placeholder=&quot;密码&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">          &lt;div class=&quot;rember&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">              &lt;input type=&quot;checkbox&quot; class=&quot;no&quot; v-model=&quot;remember&quot;/&gt;</span><br><span class="line">              &lt;span&gt;记住密码&lt;/span&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;button class=&quot;login_btn&quot; @click=&quot;login&quot;&gt;登录&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Login&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &#x27;&#x27;,</span><br><span class="line">      password: &#x27;&#x27;,</span><br><span class="line">      remember: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login .hi&#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  font-family: &quot;Times New Roman&quot;;</span><br><span class="line">  font-style: italic;</span><br><span class="line">&#125;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  min-height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box .login &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 400px;</span><br><span class="line">  left: 0;</span><br><span class="line">  margin: auto;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  top: -338px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login .login-title &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-title img &#123;</span><br><span class="line">  width: 190px;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-title p &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  letter-spacing: .29px;</span><br><span class="line">  padding-top: 10px;</span><br><span class="line">  padding-bottom: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login_box &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  height: auto;</span><br><span class="line">  background: rgba(255, 255, 255, 0.3);</span><br><span class="line">  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, .5);</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding-bottom: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login_box .title &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  letter-spacing: .32px;</span><br><span class="line">  border-bottom: 1px solid #e6e6e6;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">  padding: 50px 60px 0 60px;</span><br><span class="line">  margin-bottom: 20px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login_box .title span:nth-of-type(1) &#123;</span><br><span class="line">  color: #4a4a4a;</span><br><span class="line">  border-bottom: 2px solid #396fcc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp &#123;</span><br><span class="line">  width: 350px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp input &#123;</span><br><span class="line">  outline: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 45px;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  border: 1px solid #d9d9d9;</span><br><span class="line">  text-indent: 20px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  background: #fff !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp input.user &#123;</span><br><span class="line">  margin-bottom: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp .rember &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp .rember p:first-of-type &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: #4a4a4a;</span><br><span class="line">  letter-spacing: .19px;</span><br><span class="line">  margin-left: 22px;</span><br><span class="line">  display: -ms-flexbox;</span><br><span class="line">  display: flex;</span><br><span class="line">  -ms-flex-align: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  /*position: relative;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp .rember p:nth-of-type(2) &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  letter-spacing: .19px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp .rember input &#123;</span><br><span class="line">  outline: 0;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 45px;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  border: 1px solid #d9d9d9;</span><br><span class="line">  text-indent: 20px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  background: #fff !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp .rember p span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  /*position: absolute;*/</span><br><span class="line">  /*left: 20px;*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#geetest &#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login_btn &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 45px;</span><br><span class="line">  background: #396fcc;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  letter-spacing: .26px;</span><br><span class="line">  margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp .go_login &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  letter-spacing: .26px;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inp .go_login span &#123;</span><br><span class="line">  color: #84cc39;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>src/router/index.js，代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowCenter</span> <span class="keyword">from</span> <span class="string">&#x27;../views/ShowCenter.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Login.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ShowCenter&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ShowCenter</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220525%E4%B8%8B%E5%8D%8861821365-3473903.png" alt="image-20220525下午61821365"></p>
<p>由于除了登录页面之外我们后面所有的组件都具备顶部导航栏和左侧菜单栏的效果，所以我直接将共有效果放到了一个Base.vue组件中。里面通过 ant design vue中的</p>
<p>布局组件：<a href="https://next.antdv.com/components/layout-cn">https://next.antdv.com/components/layout-cn</a></p>
<h3 id="Base组件初始化">Base组件初始化</h3>
<p>布局和导航菜单搭建App页面效果，简单如下</p>
<p>views/Base.vue，代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-layout style=&quot;min-height: 100vh&quot;&gt;</span><br><span class="line">    &lt;a-layout-sider v-model:collapsed=&quot;collapsed&quot; collapsible&gt;</span><br><span class="line">      &lt;div class=&quot;logo&quot; /&gt;</span><br><span class="line">      &lt;a-menu v-model:selectedKeys=&quot;selectedKeys&quot; theme=&quot;dark&quot; mode=&quot;inline&quot;&gt;</span><br><span class="line">        &lt;a-menu-item key=&quot;1&quot;&gt;</span><br><span class="line">          &lt;pie-chart-outlined /&gt;</span><br><span class="line">          &lt;span&gt;Option 1&lt;/span&gt;</span><br><span class="line">        &lt;/a-menu-item&gt;</span><br><span class="line">        &lt;a-menu-item key=&quot;2&quot;&gt;</span><br><span class="line">          &lt;desktop-outlined /&gt;</span><br><span class="line">          &lt;span&gt;Option 2&lt;/span&gt;</span><br><span class="line">        &lt;/a-menu-item&gt;</span><br><span class="line">        &lt;a-sub-menu key=&quot;sub1&quot;&gt;</span><br><span class="line">          &lt;template #title&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">              &lt;user-outlined /&gt;</span><br><span class="line">              &lt;span&gt;User&lt;/span&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;a-menu-item key=&quot;3&quot;&gt;Tom&lt;/a-menu-item&gt;</span><br><span class="line">          &lt;a-menu-item key=&quot;4&quot;&gt;Bill&lt;/a-menu-item&gt;</span><br><span class="line">          &lt;a-menu-item key=&quot;5&quot;&gt;Alex&lt;/a-menu-item&gt;</span><br><span class="line">        &lt;/a-sub-menu&gt;</span><br><span class="line">        &lt;a-sub-menu key=&quot;sub2&quot;&gt;</span><br><span class="line">          &lt;template #title&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">              &lt;team-outlined /&gt;</span><br><span class="line">              &lt;span&gt;Team&lt;/span&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;a-menu-item key=&quot;6&quot;&gt;Team 1&lt;/a-menu-item&gt;</span><br><span class="line">          &lt;a-menu-item key=&quot;8&quot;&gt;Team 2&lt;/a-menu-item&gt;</span><br><span class="line">        &lt;/a-sub-menu&gt;</span><br><span class="line">        &lt;a-menu-item key=&quot;9&quot;&gt;</span><br><span class="line">          &lt;file-outlined /&gt;</span><br><span class="line">          &lt;span&gt;File&lt;/span&gt;</span><br><span class="line">        &lt;/a-menu-item&gt;</span><br><span class="line">      &lt;/a-menu&gt;</span><br><span class="line">    &lt;/a-layout-sider&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header style=&quot;background: #fff; padding: 0&quot; /&gt;</span><br><span class="line">      &lt;a-layout-content style=&quot;margin: 0 16px&quot;&gt;</span><br><span class="line">        &lt;a-breadcrumb style=&quot;margin: 16px 0&quot;&gt;</span><br><span class="line">          &lt;a-breadcrumb-item&gt;User&lt;/a-breadcrumb-item&gt;</span><br><span class="line">          &lt;a-breadcrumb-item&gt;Bill&lt;/a-breadcrumb-item&gt;</span><br><span class="line">        &lt;/a-breadcrumb&gt;</span><br><span class="line">        &lt;div :style=&quot;&#123; padding: &#x27;24px&#x27;, background: &#x27;#fff&#x27;, minHeight: &#x27;360px&#x27; &#125;&quot;&gt;</span><br><span class="line">          Bill is a cat.</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;a-layout-footer style=&quot;text-align: center&quot;&gt;</span><br><span class="line">        Ant Design ©2018 Created by Ant UED</span><br><span class="line">      &lt;/a-layout-footer&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/a-layout&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; PieChartOutlined, DesktopOutlined, UserOutlined, TeamOutlined, FileOutlined &#125; from &#x27;@ant-design/icons-vue&#x27;;</span><br><span class="line">import &#123; defineComponent, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    PieChartOutlined,</span><br><span class="line">    DesktopOutlined,</span><br><span class="line">    UserOutlined,</span><br><span class="line">    TeamOutlined,</span><br><span class="line">    FileOutlined,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      collapsed: ref(false),</span><br><span class="line">      selectedKeys: ref([&#x27;1&#x27;]),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#components-layout-demo-side .logo &#123;</span><br><span class="line">  height: 32px;</span><br><span class="line">  margin: 16px;</span><br><span class="line">  background: rgba(255, 255, 255, 0.3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-layout .site-layout-background &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">&#125;</span><br><span class="line">[data-theme=&#x27;dark&#x27;] .site-layout .site-layout-background &#123;</span><br><span class="line">  background: #141414;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>设置路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;/base&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;Base&#x27;</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="title class_">Base</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220525%E4%B8%8B%E5%8D%8862557493-3474359.png" alt="image-20220525下午62557493"></p>
<h3 id="Base组件修改">Base组件修改</h3>
<p>Base.vue修改菜单中的标题信息，Base.vue，代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-layout</span> <span class="attr">style</span>=<span class="string">&quot;min-height: 100vh&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-layout-sider</span> <span class="attr">v-model:collapsed</span>=<span class="string">&quot;collapsed&quot;</span> <span class="attr">collapsible</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">style</span>=<span class="string">&quot;font-style: italic;text-align: center;font-size: 20px;color:#fff;margin: 10px 0;background-color: #333;line-height: 50px;font-family: &#x27;Times New Roman&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span> Urils<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-menu</span> <span class="attr">v-for</span>=<span class="string">&quot;menu in menu_list&quot;</span> <span class="attr">v-model:selectedKeys</span>=<span class="string">&quot;selectedKeys&quot;</span> <span class="attr">theme</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">v-if</span>=<span class="string">&quot;menu.children.length===0&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;menu.id&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;menu.menu_url&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">desktop-outlined</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; menu.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-sub-menu</span> <span class="attr">v-else</span> <span class="attr">:key</span>=<span class="string">&quot;menu.id&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">user-outlined</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; menu.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">v-for</span>=<span class="string">&quot;child_menu in menu.children&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;child_menu.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;child_menu.menu_url&quot;</span>&gt;</span>&#123;&#123; child_menu.title &#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-sub-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-layout-sider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-header</span> <span class="attr">style</span>=<span class="string">&quot;background: #369; padding: 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-content</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0 16px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-content</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-footer</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        Ant Design ©2018 Created by Ant UED</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">DesktopOutlined</span>, <span class="title class_">FileOutlined</span>, <span class="title class_">PieChartOutlined</span>, <span class="title class_">TeamOutlined</span>, <span class="title class_">UserOutlined</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">PieChartOutlined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">DesktopOutlined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">UserOutlined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">TeamOutlined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">FileOutlined</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">collapsed</span>: <span class="title function_">ref</span>(<span class="literal">false</span>),</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">selectedKeys</span>: <span class="title function_">ref</span>([<span class="string">&#x27;1&#x27;</span>]),</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">menu_list</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;展示中心&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/show_center&#x27;</span>, <span class="attr">children</span>: []</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;资产管理&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/host&#x27;</span>, <span class="attr">children</span>: []</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="attr">icon</span>: <span class="string">&#x27;bold&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;批量任务&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">10</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;执行任务&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/multi_exec&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">11</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;命令管理&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/template_manage&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">icon</span>: <span class="string">&#x27;highlight&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;代码发布&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">12</span>, <span class="attr">title</span>: <span class="string">&#x27;应用管理&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/release&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">13</span>, <span class="attr">title</span>: <span class="string">&#x27;发布申请&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/release&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;定时计划&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>, <span class="attr">children</span>: []&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;配置管理&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">14</span>, <span class="attr">title</span>: <span class="string">&#x27;环境管理&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/environment&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">15</span>, <span class="attr">title</span>: <span class="string">&#x27;服务配置&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">16</span>, <span class="attr">title</span>: <span class="string">&#x27;应用配置&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>: <span class="number">7</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;监控预警&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>, <span class="attr">children</span>: []&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;报警&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">17</span>, <span class="attr">title</span>: <span class="string">&#x27;报警历史&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">18</span>, <span class="attr">title</span>: <span class="string">&#x27;报警联系人&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">19</span>, <span class="attr">title</span>: <span class="string">&#x27;报警联系组&#x27;</span>, <span class="string">&#x27;menu_url&#x27;</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">icon</span>: <span class="string">&#x27;mail&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;用户管理&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">20</span>, <span class="attr">title</span>: <span class="string">&#x27;账户管理&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">21</span>, <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>: <span class="number">22</span>, <span class="attr">title</span>: <span class="string">&#x27;系统设置&#x27;</span>, <span class="attr">tube</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">menu_url</span>: <span class="string">&#x27;/urils/workbench&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#components-layout-demo-side</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.site-layout</span> <span class="selector-class">.site-layout-background</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.site-layout</span> <span class="selector-class">.site-layout-background</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#141414</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220525%E4%B8%8B%E5%8D%8870712053-3476834.png" alt="image-20220525下午70712053"></p>
<p>路由router/index.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Base</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Base&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;uric自动化运维平台&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/uric&#x27;</span>,</span><br><span class="line">        <span class="attr">alias</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 给当前路径起一个别名</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Base&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Base</span>, <span class="comment">// 快捷键：Alt+Enter快速导包</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;账户登陆&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Login</span> <span class="comment">// 快捷键：Alt+Enter快速导包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ShowCenter&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">ShowCenter</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>接着我们再创建一个测试路由的组件，Host.vue，代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;host&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>host页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Host&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="子路由配置">子路由配置</h3>
<p>由于我们使用了组件嵌套，所以我们要通过路由嵌套来进行控制</p>
<p>Router/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Base</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Base&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowCenter</span> <span class="keyword">from</span> <span class="string">&#x27;../views/ShowCenter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Host</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Host&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;uric自动化运维平台&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/uric&#x27;</span>,</span><br><span class="line">        <span class="attr">alias</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 给当前路径起一个别名</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Base&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Base</span>, <span class="comment">// 快捷键：Alt+Enter快速导包,</span></span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;show_center&#x27;</span>,</span><br><span class="line">                <span class="attr">alias</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 给当前路径起一个别名</span></span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;ShowCenter&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">ShowCenter</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;host&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;Host&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Host</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;账户登陆&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Login</span> <span class="comment">// 快捷键：Alt+Enter快速导包</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220323180353942-164802983572519.png" alt="image-20220323180353942"></p>
<h1>二 后端项目初始化</h1>
<h2 id="（1）虚拟环境">（1）虚拟环境</h2>
<p>Python创建虚拟环境<br>
创建虚拟环境是为了让项目运行在一个独立的局部的Python环境中，使得不同环境的项目互不干扰。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 安装虚拟环境的第三方包 virtualenv</span><br><span class="line">pip install virtualenv</span><br><span class="line">使用清华源安装：pip install virtualenv -i https://pypi.python.org/simple/</span><br><span class="line"></span><br><span class="line">2. 创建虚拟环境</span><br><span class="line"><span class="built_in">cd</span> 到存放虚拟环境光的地址</span><br><span class="line">virtualenv ENV 在当前目录下创建名为ENV的虚拟环境（如果第三方包virtualenv安装在python3下面，此时创建的虚拟环境就是基于python3的）</span><br><span class="line">virtualenv -p 指定python版本创建虚拟环境 参数 </span><br><span class="line">virtualenv -p /usr/local/bin/python3.6 虚拟环境名称 </span><br><span class="line">virtualenv --system-site-packages ENV 参数 --system-site-packages 指定创建虚拟环境时继承系统三方库</span><br><span class="line"></span><br><span class="line">3. 激活/退出虚拟环境</span><br><span class="line"><span class="built_in">cd</span> ~/ENV 跳转到虚拟环境的文件夹</span><br><span class="line"><span class="built_in">source</span> bin/activate 激活虚拟环境</span><br><span class="line">pip list 查看当前虚拟环境下所安装的第三方库</span><br><span class="line">deactivate 退出虚拟环境</span><br><span class="line"></span><br><span class="line">4. 删除虚拟环境</span><br><span class="line">直接删除虚拟环境所在目录即可</span><br></pre></td></tr></table></figure>
<blockquote>
<p>window系统没有bin文件夹，cd进入Scripts路径下运行：<code>activate.bat</code></p>
</blockquote>
<h2 id="（2）搭建项目">（2）搭建项目</h2>
<p>基于Pycharm创建Django项目时可以直接构建虚拟环境</p>
<p><img src="assets/image-20220610%E4%B8%8B%E5%8D%8862101239-4856464.png" alt="image-20220610下午62101239"></p>
<p>可以直接在pycharm中使用创建好的虚拟环境，安装和查看第三方库。也可以在终端中使用虚拟环境，转到pycharm中设定的<strong>虚拟环境的位置，一般在工程的根目录</strong>。这个虚拟环境和上述用命令创建的虚拟环境一样，采用上述<strong>激活/退出虚拟环境</strong>命令即可执行相应操作。</p>
<p>测试，安装requests模块</p>
<p><img src="assets/image-20220610%E4%B8%8B%E5%8D%8861820780-4856302.png" alt="image-20220610下午61820780"></p>
<p><img src="assets/image-20220610%E4%B8%8B%E5%8D%8861412150-4856054.png" alt="image-20220610下午61412150"></p>
<h2 id="（3）项目目录调整">（3）项目目录调整</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认结构</span></span><br><span class="line">└── uric_api</span><br><span class="line">    ├── manage.py</span><br><span class="line">    └── uric_api</span><br><span class="line">        ├── asgi.py</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        ├── settings.py</span><br><span class="line">        ├── urls.py</span><br><span class="line">        └── wsgi.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整结构</span></span><br><span class="line"></span><br><span class="line">└── uric_api         <span class="comment"># 后端项目目录</span></span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── logs         <span class="comment"># 项目运行时/开发时日志目录</span></span><br><span class="line">    ├── manage.py    <span class="comment"># 开发阶段的启动文件</span></span><br><span class="line">    ├── scripts      <span class="comment"># 保存项目运营时的脚本文件 bash</span></span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    └── uric_api     <span class="comment"># 项目主应用，开发时的代码保存</span></span><br><span class="line">        ├── apps     <span class="comment"># 开发者的代码保存目录，以模块[子应用]为目录保存（包）</span></span><br><span class="line">        │   └── __init__.py</span><br><span class="line">        ├── asgi.py</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        ├── libs              <span class="comment"># 第三方类库的保存目录[第三方组件、模块]（包）</span></span><br><span class="line">        │   └── __init__.py</span><br><span class="line">        ├── settings</span><br><span class="line">        │   ├── dev.py         <span class="comment"># 项目开发时的本地配置</span></span><br><span class="line">        │   ├── __init__.py</span><br><span class="line">        │   ├── prod.py        <span class="comment"># 项目上线时的运行配置</span></span><br><span class="line">        │   └── test.py        <span class="comment"># 测试人员使用的配置(咱们不需要)</span></span><br><span class="line">        ├── settings.py</span><br><span class="line">        ├── urls.py            <span class="comment"># 总路由（包） </span></span><br><span class="line">        ├── utils          <span class="comment"># 多个模块[子应用]的公共函数类库[自己开发的组件]</span></span><br><span class="line">        │   └── __init__.py</span><br><span class="line">        └── wsgi.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：创建文件夹的时候，是创建包(含<code>__init__.py</code>文件的)还是创建单纯的文件夹，看目录里面放的是什么，如果放的是py文件相关的代码，最好创建包，如果不是，那就创建单纯的文件夹。</p>
</blockquote>
<p>切换manage.py启动项目时使用的配置文件。<a href="http://mange.py">mange.py</a>，代码：</p>
<p><img src="assets/image-20220610%E4%B8%8B%E5%8D%8820536359-4841138.png" alt="image-20220610下午20536359"></p>
<h2 id="（4）注册DRF组件">（4）注册DRF组件</h2>
<p>下载：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>
<p><a href="http://settings.dev.py">settings.dev.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>调整子应用保存以后，创建并注册子应用需要调整如下，</p>
<p>例如：创建home子应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd uric_api/apps</span><br><span class="line">python ../../manage.py startapp home</span><br></pre></td></tr></table></figure>
<p>子应用的注册，<a href="http://settings.dev.py">settings.dev.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_DIR = Path(__file__).resolve().parent.parent</span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="built_in">str</span>(BASE_DIR / <span class="string">&#x27;apps&#x27;</span>))</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;home&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>创建了一个测试视图，提供给外界访问。<a href="http://home.views.py">home.views.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAPIView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello&quot;</span>&#125;,)</span><br></pre></td></tr></table></figure>
<p><a href="http://home.urls.py">home.urls.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;test&quot;</span>, views.TestAPIView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>总路由加载home子应用的路由信息，<code>uric_api.urls</code>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, include(<span class="string">&quot;home.urls&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220610%E4%B8%8B%E5%8D%8864210493-4857732.png" alt="image-20220610下午64210493"></p>
<h2 id="（5）日志配置">（5）日志配置</h2>
<p>参考django官方文档，网址：<a href="https://docs.djangoproject.com/zh-hans/3.2/topics/logging/">https://docs.djangoproject.com/zh-hans/3.2/topics/logging/</a></p>
<p>在settings/dev.py文件中追加如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="comment"># 使用的python内置的logging模块，那么python可能会对它进行升级，所以需要写一个版本号，目前就是1版本</span></span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment"># 是否去掉目前项目中其他地方中以及使用的日志功能，但是将来我们可能会引入第三方的模块，里面可能内置了日志功能，所以尽量不要关闭，肯定False</span></span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># 日志的处理格式</span></span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 详细格式，往往用于记录日志到文件/其他第三方存储设备</span></span><br><span class="line">        <span class="string">&#x27;verbose&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># levelname等级，asctime记录时间，module表示日志发生的文件名称，lineno行号，message错误信息</span></span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;&#123;levelname&#125; &#123;asctime&#125; &#123;module&#125;:&#123;lineno:d&#125; &#123;message&#125;&#x27;</span>,</span><br><span class="line">            <span class="comment"># 日志格式中的，变量分隔符</span></span><br><span class="line">            <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;  <span class="comment"># 简单格式，往往用于终端</span></span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;&#123;levelname&#125; &#123;module&#125;:&#123;lineno&#125; &#123;message&#125;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123; <span class="comment"># 日志的过滤设置，可以对日志进行输出时的过滤用的</span></span><br><span class="line">        <span class="comment"># 在debug=True下产生的一些日志信息，要不要记录日志，需要的话就在handlers中加上这个过滤器，不需要就不加</span></span><br><span class="line">        <span class="string">&#x27;require_debug_true&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;()&#x27;</span>: <span class="string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;  <span class="comment"># 日志的处理方式</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;  <span class="comment"># 终端下显示</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,  <span class="comment"># 日志的最低等级</span></span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>: [<span class="string">&#x27;require_debug_true&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>, <span class="comment"># 处理日志的核心类</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: &#123;  <span class="comment"># 文件中记录日志</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="comment"># 日志位置,日志文件名,日志保存目录必须手动创建</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: BASE_DIR.parent / <span class="string">&quot;logs/uric.log&quot;</span>,</span><br><span class="line">            <span class="comment"># 单个日志文件的最大值,这里我们设置300M</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">300</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="comment"># 备份日志文件的数量,设置最大日志数量为10</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="comment"># 日志格式:详细格式</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;verbose&#x27;</span>,</span><br><span class="line">            <span class="comment"># 设置默认编码，否则打印出来汉字乱码</span></span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 日志实例对象</span></span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django&#x27;</span>: &#123; <span class="comment"># 固定名称，将来django内部也会有异常的处理，只会调用django下标的日志对象</span></span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;file&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 是否让日志信息继续冒泡给其他的日志处理系统</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="string">&quot;DRF&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;file&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 是否让日志信息继续冒泡给其他的日志处理系统     </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例：构建中间件，记录每次请求信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        self.start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        cost_timer = time.time() - self.start</span><br><span class="line"></span><br><span class="line">        logger = logging.getLogger(<span class="string">&quot;django&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> cost_timer &gt; <span class="number">0.5</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;请求路径: <span class="subst">&#123;request.path&#125;</span> 耗时<span class="subst">&#123;cost_timer&#125;</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220612%E4%B8%8B%E5%8D%8843938550-5023180.png" alt="image-20220612下午43938550"></p>
<h2 id="（6）异常处理">（6）异常处理</h2>
<p>新建utils/exceptions.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> DatabaseError</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;django&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义异常处理</span></span><br><span class="line"><span class="string">    :param exc: 异常类实例对象</span></span><br><span class="line"><span class="string">    :param context: 抛出异常的执行上下文[context，是一个字典格式的数据，里面记录了异常发生时的环境信息]</span></span><br><span class="line"><span class="string">    :return: Response 响应对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先让drf内置的异常处理函数先解决掉它能识别的异常</span></span><br><span class="line">    response = exception_handler(exc, context)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;drf无法处理的异常&quot;&quot;&quot;</span></span><br><span class="line">        view = context[<span class="string">&quot;view&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(exc, DatabaseError):</span><br><span class="line">            logger.error(<span class="string">&#x27;[%s] %s&#x27;</span> % (view, exc))</span><br><span class="line">            response = Response(&#123;<span class="string">&quot;errmsg&quot;</span>:<span class="string">&quot;服务器内部存储错误&quot;</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p>settings/dev.py配置文件中添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 异常处理</span></span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;uric_api.utils.exceptions.custom_exception_handler&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 视图更改</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAPIView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">from</span> django.db <span class="keyword">import</span> DatabaseError</span><br><span class="line">        <span class="keyword">raise</span> DatabaseError(<span class="string">&quot;mysql连接失败&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="（7）连接数据库">（7）连接数据库</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database uric default charset=utf8mb4; -- utf8也会导致有些极少的中文出现乱码的问题，mysql5.5之后官方才进行处理，出来了utf8mb4，这个是真正的utf8，能够容纳所有的中文。</span><br></pre></td></tr></table></figure>
<p>为当前项目创建数据库用户[这个用户只能看到uric这个数据库]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mysql8.0版本以上执行</span><br><span class="line"># 创建用户：create user &#x27;用户名&#x27;@&#x27;主机地址&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line">create user &#x27;uricUser01&#x27;@&#x27;%&#x27; identified by &#x27;uric&#x27;;  # %表示任意主机都可以通过当前账户登录到mysql</span><br><span class="line"># 分配权限：grant 权限选项 on 数据库名.数据表 to &#x27;用户名&#x27;@&#x27;主机地址&#x27; with grant option;</span><br><span class="line">grant all privileges on uric.* to &#x27;uricUser&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line"></span><br><span class="line"># mysql8.0版本以下执行，创建数据库用户并设置数据库权限给当前新用户，并刷新内存中的权限记录</span><br><span class="line"># create user uric_user identified by &#x27;uric&#x27;;</span><br><span class="line"># grant all privileges on uric.* to &#x27;uric_user&#x27;@&#x27;%&#x27;;</span><br><span class="line"># flush privileges;</span><br></pre></td></tr></table></figure>
<p>配置数据库连接：打开settings/dev.py文件，并配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ENGINE&quot;</span>: <span class="string">&quot;django.db.backends.mysql&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: <span class="number">13306</span>,</span><br><span class="line">        <span class="string">&quot;USER&quot;</span>: <span class="string">&quot;uric_user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PASSWORD&quot;</span>: <span class="string">&quot;uric&quot;</span>,</span><br><span class="line">        <span class="string">&quot;NAME&quot;</span>: <span class="string">&quot;uric&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在项目主模块的 <code>__init__.py</code>中导入pymysql</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> install_as_MySQLdb</span><br><span class="line">install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意是主模块的初始化文件，不是项目根目录的初始化文件！</p>
</blockquote>
<p>初始化Django默认表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>初始化Django默认表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20210819134957978.png" alt="image-20210819134957978"></p>
<h2 id="（8）跨域设置">（8）跨域设置</h2>
<h4 id="cors解决跨域请求">cors解决跨域请求</h4>
<p>我们现在为前端和后端分别设置两个不同的域名：</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>域名</th>
</tr>
</thead>
<tbody>
<tr>
<td>客户端</td>
<td><code>www.uric.cn</code></td>
</tr>
<tr>
<td>服务端</td>
<td><code>api.uric.cn</code></td>
</tr>
</tbody>
</table>
<p>编辑<code>/etc/hosts</code>文件，可以设置本地域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>
<p>window中在<code>C:\Windows\System32\drivers\etc</code></p>
<p>在文件中增加两条信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1   localhost</span><br><span class="line">127.0.0.1   api.uric.cn</span><br><span class="line">127.0.0.1   www.uric.cn</span><br></pre></td></tr></table></figure>
<p>现在，前端与后端分处不同的域名，我们需要为后端添加跨域访问的支持，否则前端无法使用axios无法请求后端提供的api数据，开发中，我们使用CORS来解决后端对跨域访问的支持。CORS 即 Cross Origin Resource Sharing 跨域资源共享。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在 Response(headers=&#123;<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>:<span class="string">&#x27;客户端地址或*&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CorsMiddleWare</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        response[<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>] = <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="跨域复杂请求">跨域复杂请求</h4>
<p><strong>跨域请求分两种：简单请求、复杂请求.</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">简单请求</span><br><span class="line"></span><br><span class="line">简单请求必须满足下述条件.</span><br><span class="line"></span><br><span class="line">HTTP方法为这三种方法之一：HEAD、GET、POST</span><br><span class="line"></span><br><span class="line">HTTP头消息不超出以下字段：</span><br><span class="line"></span><br><span class="line">Accept、Accept-Language、Content-Language、Last-Event-ID</span><br><span class="line"></span><br><span class="line">且Content-Type只能为下列类型中的某一个：</span><br><span class="line"></span><br><span class="line">- application/x-www-from-urlencoded</span><br><span class="line">- multipart/form-data</span><br><span class="line">- text/plain.</span><br><span class="line"></span><br><span class="line">==任何不满足上述要求的请求，都会被认为是复杂请求.</span><br></pre></td></tr></table></figure>
<p>复杂请求会先发出一个预请求——预检，OPTIONS请求.==</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CorsMiddleWare</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">    <span class="comment"># 如下，等于&#x27;*&#x27;后，便可允许所有简单请求的跨域访问</span></span><br><span class="line">    response[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 判断是否为复杂请求</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;OPTIONS&#x27;</span>:</span><br><span class="line">      response[<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>] = <span class="string">&#x27;Content-Type&#x27;</span></span><br><span class="line">      response[<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>] = <span class="string">&#x27;PUT,PATCH,DELETE&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<h4 id="cors-headers组件">cors-headers组件</h4>
<p>文档：<a href="https://github.com/ottoyiu/django-cors-headers/">https://github.com/ottoyiu/django-cors-headers/</a></p>
<p>安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers -i https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure>
<p>添加应用，<a href="http://settings.dev.py">settings.dev.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>中间件设置【必须写在第一个位置】，<a href="http://settings.dev.py">settings.dev.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>, <span class="comment">#放在中间件的最上面，就是给响应头加上了一个响应头跨域</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>需要添加跨域白名单，确定一下哪些客户端可以跨域。<a href="http://settings.dev.py">settings.dev.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CORS组的配置信息</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="comment">#&#x27;www.uric.cn:8080&#x27;, # 如果这样写不行的话，就加上协议(http://www.uric.cn:8080，因为不同的corsheaders版本可能有不同的要求)</span></span><br><span class="line">    <span class="string">&#x27;http://www.uric.cn:8080&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">False</span>  <span class="comment"># 是否允许ajax跨域请求时携带cookie，False表示不用，我们后面也用不到cookie，所以关掉它就可以了，以防有人通过cookie来搞我们的网站</span></span><br></pre></td></tr></table></figure>
<p>允许客户端通过api.uric.cn访问Django项目，<a href="http://settings.dev.py">settings.dev.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">&quot;api.uric.cn&quot;</span>,]</span><br></pre></td></tr></table></figure>
<p>完成了上面的步骤，我们将来就可以通过后端提供数据给前端使用ajax访问了。前端使用 axios就可以访问到后端提供给的数据接口，但是如果要附带cookie信息，前端还要设置一下，这个等我们搭建客户端项目时再配置。</p>
<h2 id="（9）git设置">（9）git设置</h2>
<p>完成了上面的操作以后，服务端的初始化算基本完成了。我们现在已经写了那么多代码的话，肯定要对代码进行版本跟踪和管理，这时候，我们就要使用git通过gitee/github/gitlab进行创建代码版本。</p>
<p>码云：<a href="http://www.gitee.com">http://www.gitee.com</a></p>
<p>创建Git仓库：</p>
<p><img src="assets/image-20210819141635938.png" alt="image-20210819141635938"></p>
<p><img src="assets/image-20210819141742504.png" alt="image-20210819141742504"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Git 全局设置:</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Yuan先生&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;916852314@163.com&quot;</span></span><br><span class="line"><span class="comment"># 创建 git 仓库:</span></span><br><span class="line"><span class="built_in">mkdir</span> uric</span><br><span class="line"><span class="built_in">cd</span> uric</span><br><span class="line">git init</span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin https://gitee.com/pythonyuan/uric.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已有仓库</span></span><br><span class="line"><span class="built_in">cd</span> existing_git_repo</span><br><span class="line">git remote add origin https://gitee.com/pythonyuan/uric.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>接下来，在终端下设置当前开发者的身份。这里，我们把客户端和服务端的代码保存到一个代码仓库中。所以直接在uric目录下创建代码仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop/</span><br><span class="line"><span class="built_in">cd</span> uric/</span><br><span class="line">git init  <span class="comment"># 初始化git代码库</span></span><br><span class="line"><span class="comment"># 设置身份</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Yuan先生&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;916852314@163.com&quot;</span></span><br><span class="line"><span class="comment"># 设置远程仓库</span></span><br><span class="line">git remote add origin https://gitee.com/pythonyuan/uric.git</span><br><span class="line"><span class="comment"># 接下来，我们就可以把上面服务端初始化的代码保存一个版本</span></span><br><span class="line">git  add .</span><br><span class="line">git commit -m <span class="string">&quot;api服务端初始化完成&quot;</span></span><br><span class="line"><span class="comment"># 生成本地ssh密码，链接到服务端</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;916852314@qq.com&quot;</span></span><br><span class="line"><span class="comment"># 查看上面生成的ssh公钥，并复制到gitee码云上面</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub  <span class="comment"># ssh-rsa </span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDG/4nDPBNat3NgYdDM/ttxDTfRrlc5sH6KDgX+YXB8Zv8/YDJT7y2MPLPFTt/WXE4bxfFxn/5/87LELSbcOFz9VGzYSeZtysnX70rbxxP59/m6X6/oLiH4D++0zu5879gbHSOU5P5V0m1qofF4DD1so6R5FbO1aavFyIOt15IpKHLg9jkSIw3x6QSY3dojlnbR41Xu5XutdA1D1F3cjUjPQzGlMtnW3S79tocrLzHk2PDrqsDydvJGqQw//M9HCQqzZDUTAgMVldP8f0Pyzop4nnfrwPGf5uwWx0Pve6k4cpnGKwS0rnOcjU0fUqnbVq6Qaye5wR8IfFgoPMDBZCy4UAwMNtbP5YTx8nBVHr6b2N7ZNRYLZQXbPwra3ic8TmgLcUNyYsvNa98VTS56pLcSNKUBnSqY70OilbKAyysrPWN9Q5a69bbh4xwJRIf+7NEqvtBKpI2Beg7nXeWs2CS9pkJ5hwLIHtAzouwjrQZshVSjqg9n4R61AOOObwIpLLc= 916852314@qq.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  git remote remove origin</span></span><br><span class="line"><span class="comment">#  git remote add origin git@gitee.com:pythonyuan/uric.git</span></span><br></pre></td></tr></table></figure>
<p>访问个人中心的设置ssh公钥的地址：<a href="https://gitee.com/profile/sshkeys">https://gitee.com/profile/sshkeys</a></p>
<p><img src="assets/image-20210819145033188.png" alt="image-20210819145033188"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把git版本库历史记录同步到gitee码云上面</span></span><br><span class="line">git push -u origin master  <span class="comment"># 此时就不需要提交用户名密码了</span></span><br></pre></td></tr></table></figure>
<h1>三 登录认证</h1>
<h2 id="3-1、创建users应用">3.1、创建users应用</h2>
<p>创建用户模块的子应用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd uric_api/apps</span><br><span class="line">python ../../manage.py startapp users</span><br></pre></td></tr></table></figure>
<p>在settings/dev.py文件中注册子应用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">		...</span><br><span class="line">  	<span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>子路由，<a href="http://users.urls.py">users.urls.py</a>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>总路由注册users子路由，uric_api.urls.py，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, include(<span class="string">&quot;home.urls&quot;</span>)),</span><br><span class="line">    path(<span class="string">&quot;users/&quot;</span>, include(<span class="string">&quot;users.urls&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="3-2、创建自定义的用户模型类">3.2、创建自定义的用户模型类</h2>
<p>Django默认已经提供了认证系统Auth模块，我们认证的时候，会使用auth模块里面给我们提供的表。认证系统包含：</p>
<ul>
<li>用户管理</li>
<li>权限</li>
<li>用户组</li>
<li>密码哈希系统</li>
<li>用户登录或内容显示的表单和视图</li>
<li>一个可插拔的后台系统 admin</li>
</ul>
<p>我们可以在终端下通过命令创建一个管理员账号，并登陆到admin站点中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<p>Django默认用户的认证机制依赖Session机制，我们在项目中将引入JWT认证机制，将用户的身份凭据存放在Token中，然后对接Django的认证系统，帮助我们来实现：</p>
<ul>
<li>用户的数据模型</li>
<li>用户密码的加密与验证</li>
<li>用户的权限系统</li>
</ul>
<p>Django认证系统中提供的用户模型类及方法很方便，我们可以使用这个模型类，但是字段有些无法满足项目需求，如本项目中需要保存用户的手机号，需要给模型类添加额外的字段。</p>
<p>Django提供了<code>django.contrib.auth.models.AbstractUser</code>用户抽象模型类允许我们继承，扩展字段来使用Django认证系统的用户模型类。</p>
<p>我们可以在apps中创建Django应用users，并在配置文件中注册users应用。</p>
<p>在创建好的应用models.py中定义用户的用户模型类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">15</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;手机号码&#x27;</span>)</span><br><span class="line">    <span class="comment"># upload_to 表示上传文件的存储子路由，需要在settings配置中，配置上传文件的支持</span></span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">&#x27;avatar&#x27;</span>, verbose_name=<span class="string">&#x27;用户头像&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;uric_user&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;用户信息&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的3个表现不用创建，留着以后使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Menu</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    一级菜单表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line">    weight = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    icon = models.CharField(max_length=<span class="number">16</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;uric_menu&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;一级菜单表&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permission</span>(models.Model):</span><br><span class="line">    url = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    menus = models.ForeignKey(<span class="string">&#x27;Menu&#x27;</span>,on_delete=models.CASCADE , null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    parent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>,on_delete=models.CASCADE ,  null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    url_name = models.CharField(max_length=<span class="number">32</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;uric_permission&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;权限表&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line">    permissions = models.ManyToManyField(to=<span class="string">&#x27;Permission&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;uric_role&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;角色表&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建用户模型对象两种方式：</p>
<p>User.objects.create_superuser()</p>
<p>Python <a href="http://manage.py">manage.py</a> createsuperuser</p>
</blockquote>
<p>我们自定义的用户模型类还不能直接被Django的认证系统所识别，需要在配置文件中告知Django认证系统使用我们自定义的模型类。</p>
<p>在配置文件中进行设置,<code>settings.dev.py</code>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置Auth认证模块使用的用户模型为我们自己定义的用户模型</span></span><br><span class="line"><span class="comment"># 格式：“子应用目录名.模型类名”</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;users.User&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>AUTH_USER_MODEL</code> 参数的设置以<code>点.</code>来分隔，表示<code>应用名.模型类名</code>。</p>
<p><strong>注意：Django建议我们对于AUTH_USER_MODEL参数的设置一定要在第一次数据库迁移之前就设置好，否则后续使用可能出现未知错误。</strong></p>
<p>接下来，因为我们新建的用户模型需要同步到数据库中。所有需要数据迁移。同时当前用户模型中，我们声明了头像字段需要进行图片处理的。所以我们安装Pillow模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Pillow模块</span></span><br><span class="line">pip install pillow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据迁移</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>如果之前曾经进行了一次数据迁移，mysql中为原来的用户表与django其他的数据进行关联。此时我们再次数据迁移，因为修改了用户表，所以会出现外键关联报错。</p>
<p><img src="assets/1626509052126.png" alt="1626509052126"></p>
<p>解决方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 删除数据库中所有的数据表[如果数据表中有重要数据，必须先导出备份]</span><br><span class="line">2. 删除当前users子应用中的migrations目录下所有以数字开头的python文件</span><br><span class="line">3. 删除源码中django.contrib.auth和django.contrib.admin中的migrations目录下所有以数字开头的python文件</span><br><span class="line">4. 重新执行数据迁移</span><br><span class="line">   python manage.py makemigrations</span><br><span class="line">   python manage.py migrate</span><br><span class="line">5. 把上面备份的数据通过终端重新恢复</span><br></pre></td></tr></table></figure>
<h2 id="3-3、simpleui的安装和使用">3.3、simpleui的安装和使用</h2>
<p>simpleui是Django的第三方扩展，比使用Django的admin站点更强大也更方便，更好看。</p>
<p>文档：<a href="https://simpleui.72wo.com/docs/simpleui/">https://simpleui.72wo.com/docs/simpleui/</a></p>
<p>GitHub地址：<a href="https://github.com/happybeta/simpleui">https://github.com/happybeta/simpleui</a></p>
<p>通过如下命令安装simpleui的最新版，它文档里面的安装方法好久没有更新了，会导致你安装不成功，所以我们使用下面的网址进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django-simpleui -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>
<p>在配置文件中注册如下应用，<code>settings.dev</code>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;simpleui&#x27;</span>,  <span class="comment"># 必须写在django.contrib.admin之前</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改使用中文界面</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-Hans&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改时区</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-4、JWT">3.4、JWT</h2>
<h3 id="3-4-1、JWT介绍">3.4.1、JWT介绍</h3>
<p>在用户注册或登录后，我们想记录用户的登录状态，或者为用户创建身份认证的凭证。我们不再使用Session认证机制，而使用Json Web Token认证机制。</p>
<p>很多公司开发的一些移动端可能不支持cookie，并且我们通过cookie和session做接口登录认证的话，效率其实并不是很高，我们的接口可能提供给多个客户端，session数据保存在服务端，那么就需要每次都调用session数据进行验证，比较耗时，所以引入了token认证的概念，我们也可以通过token来完成，我们来看看jwt是怎么玩的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</span><br></pre></td></tr></table></figure>
<h4 id="JWT的构成">JWT的构成</h4>
<p>JWT就一段字符串，由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>
<p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p>
<h4 id="header">header</h4>
<p>jwt的头部承载两部分信息：</p>
<ul>
<li>声明类型，这里是jwt</li>
<li>声明加密的算法 通常直接使用 HMAC SHA256</li>
</ul>
<p>完整的头部就像下面这样的JSON：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x27;typ&#x27;: &#x27;JWT&#x27;,</span><br><span class="line">  &#x27;alg&#x27;: &#x27;HS256&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将头部进行base64.b64encode()编码，构成了第一部分.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure>
<p>python中base64加密解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,json</span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header = base64.b64encode(json.dumps(data).encode()).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各个语言中都有base64加密解密的功能，所以我们jwt为了安全，需要配合第三段加密</span></span><br></pre></td></tr></table></figure>
<h4 id="payload">payload</h4>
<p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息可以存放下面三个部分信息。</p>
<ul>
<li>标准声明</li>
<li>公共声明</li>
<li>私有声明</li>
</ul>
<p><strong>标准声明</strong> (建议但不强制使用) ：</p>
<ul>
<li>
<p><strong>iss</strong>: jwt签发者</p>
</li>
<li>
<p><strong>sub</strong>: jwt所面向的用户</p>
</li>
<li>
<p><strong>aud</strong>: 接收jwt的一方</p>
</li>
<li>
<p><strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</p>
</li>
<li>
<p><strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</p>
</li>
<li>
<p><strong>iat</strong>: jwt的签发时间</p>
</li>
<li>
<p><strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p>
<p>以上是JWT 规定的7个官方字段，供选用</p>
</li>
</ul>
<p><strong>公共声明</strong> ： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端直接可以查看.</p>
<p><strong>私有声明</strong> ： 私有声明是服务端和客户端所共同定义的声明，一般使用了ace算法进行对称加密和解密的，意味着该部分信息可以归类为明文信息。</p>
<p>定义一个payload，json格式的数据:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;exp&quot;: &quot;3422335555&quot;, #时间戳形式</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true,</span><br><span class="line">  &quot;info&quot;: &quot;232323ssdgerere3335dssss&quot;  # ACE算法加密</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将其进行base64.b64encode() 编码，得到JWT的第二部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,json</span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;3422335555&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">  <span class="string">&quot;info&quot;</span>: <span class="string">&quot;232323ssdgerere3335dssss&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preload = base64.b64encode(json.dumps(data).encode()).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各个语言中都有base64编码和解码，所以我们jwt为了安全，需要配合第三段签证来进行加密保证jwt不会被人篡改。</span></span><br></pre></td></tr></table></figure>
<h4 id="signature">signature</h4>
<p>JWT的第三部分是一个签证信息，这个签证信息由三部分组成：</p>
<ul>
<li>header (base64后的)</li>
<li>preload (base64后的)</li>
<li>secret 密钥</li>
</ul>
<p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p>
<p>python，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, json, hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 头部</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>, <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span>&#125;</span><br><span class="line">    header = base64.b64encode(json.dumps(data).encode()).decode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 载荷</span></span><br><span class="line">    data = &#123;<span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>, <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;3422335555&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;admin&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&quot;info&quot;</span>: <span class="string">&quot;232323ssdgerere3335dssss&quot;</span>&#125;</span><br><span class="line">    preload = base64.b64encode(json.dumps(data).encode()).decode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 签证</span></span><br><span class="line">    <span class="comment"># from django.conf import settings</span></span><br><span class="line">    <span class="comment"># secret = settings.SECRET_KEY</span></span><br><span class="line">    secret = <span class="string">&#x27;django-insecure-(_+qtd5edmhm%2rdsg+qc3wi@s_k*3cbk-+k2gpg3@qx)z6r+p&#x27;</span></span><br><span class="line">    sign = <span class="string">f&quot;<span class="subst">&#123;header&#125;</span>.<span class="subst">&#123;preload&#125;</span>.<span class="subst">&#123;secret&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    hs256 = hashlib.sha256()</span><br><span class="line">    hs256.update(sign.encode())</span><br><span class="line">    signature = hs256.hexdigest()</span><br><span class="line"></span><br><span class="line">    jwt = <span class="string">f&quot;f<span class="subst">&#123;header&#125;</span>.<span class="subst">&#123;preload&#125;</span>.<span class="subst">&#123;signature&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(jwt)</span><br></pre></td></tr></table></figure>
<p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feyJ0eXAiOiAiSldUIiwgImFsZyI6ICJIUzI1NiJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJleHAiOiAiMzQyMjMzNTU1NSIsICJuYW1lIjogIkpvaG4gRG9lIiwgImFkbWluIjogdHJ1ZSwgImluZm8iOiAiMjMyMzIzc3NkZ2VyZXJlMzMzNWRzc3NzIn0=.374b156a33e579c780eb1594a5738c580a13ea0f905487dc66c15856b6110ebf</span><br></pre></td></tr></table></figure>
<p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jwt的优点：</span><br><span class="line">1. 实现分布式的单点登陆非常方便</span><br><span class="line">2. 数据实际保存在客户端，所以我们可以分担服务端的存储压力</span><br><span class="line">3. JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。</span><br><span class="line"></span><br><span class="line">jwt的缺点：</span><br><span class="line">1. 数据保存在了客户端，我们服务端只认jwt，不识别客户端。</span><br><span class="line">2. jwt可以设置过期时间，但是因为数据保存在了客户端，所以对于过期时间不好调整。# secret_key轻易不要改，一改所有客户端都要重新登录</span><br></pre></td></tr></table></figure>
<p>认证流程图</p>
<p><img src="assets/1626513913826-5193877.png" alt="1626513913826"></p>
<p><strong>关于签发和核验JWT，我们可以使用Django REST framework JWT扩展来完成。</strong></p>
<p>文档网站 ; <a href="https://jpadilla.github.io/django-rest-framework-jwt/">https://jpadilla.github.io/django-rest-framework-jwt/</a></p>
<h3 id="3-4-2、JWT安装与配置">3.4.2、JWT安装与配置</h3>
<h4 id="（1）安装">（1）安装</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework-jwt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<p>配置(github网址：<a href="https://github.com/jpadilla/django-rest-framework-jwt">https://github.com/jpadilla/django-rest-framework-jwt</a>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 自定义异常处理</span></span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;uric_api.utils.exceptions.custom_exception_handler&#x27;</span>,</span><br><span class="line">    <span class="comment"># 自定义认证</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="comment"># jwt认证</span></span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,</span><br><span class="line">        <span class="comment"># session认证</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="comment"># jwt的有效时间</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(weeks=<span class="number">1</span>),</span><br><span class="line">    <span class="string">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们django创建项目的时候，在settings配置文件中直接就给生成了一个serect_key，我们直接可以使用它作为我们jwt的serect_kek，其实djangorestframework-jwt默认配置中就使用的它。</p>
<h4 id="（2）获取token内置函数">（2）获取token内置函数</h4>
<p>Django REST framework JWT提供了登录获取token的视图，可以直接给这视图指定url路由即可使用。</p>
<p>在users子应用路由urls.py中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在主路由中，引入当前子应用的路由文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">		...</span><br><span class="line">    path(<span class="string">&#x27;user/&#x27;</span>, include(<span class="string">&quot;users.urls&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>接下来，我们可以通过postman来测试下功能，但是jwt是通过username和password来进行登录认证处理的，所以我们要给真实数据，jwt会去我们配置的user表中去查询用户数据的。</p>
<p>添加测试用户命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser </span><br><span class="line">用户名：yuan </span><br><span class="line">密码：123</span><br></pre></td></tr></table></figure>
<p>启动项目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py runserver api.uric.cn:<span class="number">8000</span></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220614%E4%B8%8B%E5%8D%8843120557-5195481.png" alt="image-20220614下午43120557"></p>
<p>得到的载荷信息，我们可以通过js内置的base64编码函数来读取里面内容。举例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> token = <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6InJvb3QiLCJleHAiOjE2MjcxMTkzODQsImVtYWlsIjoiIn0.Xz_QJ5BPSOsjIB-EymwHaptgG-v1Ic8Aa0FhYhcEErE&quot;</span></span><br><span class="line"><span class="keyword">let</span> data = token.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> user_info = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">atob</span>(data[<span class="number">1</span>]))   </span><br><span class="line"></span><br><span class="line"><span class="comment">// atob()   // base64解码</span></span><br><span class="line"><span class="comment">// btoa()   // base64编码</span></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220614%E4%B8%8B%E5%8D%8843713425-5195834.png" alt="image-20220614下午43713425"></p>
<h4 id="（3）验证token的有效性">（3）验证token的有效性</h4>
<p>配置路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token,verify_jwt_token,refresh_jwt_token</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">    path(<span class="string">&#x27;verify/&#x27;</span>, verify_jwt_token),  <span class="comment"># 这是只是校验token有效性</span></span><br><span class="line">    path(<span class="string">r&#x27;refresh_jwt_token/&#x27;</span>, refresh_jwt_token),  <span class="comment"># 校验并生成新的token</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>刷新token除了配置上面的refresh_jwt_token之外，还需要在配置文件中加上如下配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="comment"># &#x27;JWT_SECRET_KEY&#x27;: settings.SECRET_KEY,</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(seconds=<span class="number">30</span>),</span><br><span class="line">    <span class="string">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 这个参数要改True，才能刷新token</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：必须在请求体中token键值对方式请求</p>
</blockquote>
<p>postman测试：</p>
<p>先获取token：</p>
<p><img src="assets/image-20220614%E4%B8%8B%E5%8D%8850719522-5197641.png" alt="image-20220614下午50719522"></p>
<p>验证token，有效期内通过：</p>
<p><img src="assets/image-20220614%E4%B8%8B%E5%8D%8850811708-5197695.png" alt="image-20220614下午50811708"></p>
<p>过了有效期：</p>
<p><img src="assets/image-20220614%E4%B8%8B%E5%8D%8850837025-5197718.png" alt="image-20220614下午50837025"></p>
<p>继续测试refresh_jwt_token的刷新token的功能：</p>
<p><img src="assets/image-20220614%E4%B8%8B%E5%8D%8852211646-5198533.png" alt="image-20220614下午52211646"></p>
<h2 id="3-5、登录认证客户端">3.5、登录认证客户端</h2>
<h3 id="3-5-1-本地存储token">3.5.1 本地存储token</h3>
<p><img src="assets/image-20220615%E4%B8%8A%E5%8D%8890119949-5254881.png" alt="image-20220615上午90119949"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;login box&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;../assets/login.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;login&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;login-title&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;hi&quot;&gt;Hello,Uric!&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;login_box&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                    &lt;span&gt;登录&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;inp&quot;&gt;</span><br><span class="line">                    &lt;a-input v-model:value=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;用户名&quot; class=&quot;user&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">                    &lt;a-input v-model:value=&quot;password&quot; type=&quot;password&quot; class=&quot;pwd&quot; placeholder=&quot;密码&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">                    &lt;div class=&quot;rember&quot;&gt;</span><br><span class="line">                        &lt;p&gt;</span><br><span class="line">                            &lt;a-checkbox v-model:checked=&quot;remember&quot;&gt;记住密码&lt;/a-checkbox&gt;</span><br><span class="line">                        &lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;button class=&quot;login_btn&quot; @click=&quot;login&quot;&gt;登录&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;Login&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                username: &#x27;&#x27;,</span><br><span class="line">                password: &#x27;&#x27;,</span><br><span class="line">                remember: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">            login() &#123;</span><br><span class="line">               </span><br><span class="line">                axios.post(this.$settings.host + `/users/login/`, &#123;</span><br><span class="line">                    username: this.username,</span><br><span class="line">                    password: this.password,</span><br><span class="line">                &#125;).then((response) =&gt; &#123;</span><br><span class="line">                    // locatStorage或者sessionStorage中存储token</span><br><span class="line">                    // 先清空原有的token</span><br><span class="line">                    localStorage.removeItem(&quot;token&quot;);</span><br><span class="line">                    sessionStorage.removeItem(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line">                    if (this.remember) &#123;</span><br><span class="line">                        // 记住登录</span><br><span class="line">                        localStorage.token = response.data.token;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        sessionStorage.token = response.data.token;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 跳转到首页</span><br><span class="line">                    let self = this;</span><br><span class="line">                    this.$success(&#123;</span><br><span class="line">                        title: &#x27;uric系统提示&#x27;,</span><br><span class="line">                        content: `登录成功！`,</span><br><span class="line">                        onOk() &#123;</span><br><span class="line">                            self.$router.push(&quot;/uric&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    // 下一个页面，首页加载时验证token有效性</span><br><span class="line">                &#125;).catch(error =&gt; &#123;</span><br><span class="line">                    this.$message.error(&#x27;用户名或者密码有误，请重新输入！&#x27;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .login .hi &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        font-family: &quot;Times New Roman&quot;;</span><br><span class="line">        font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: relative;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box img &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        min-height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box .login &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 400px;</span><br><span class="line">        left: 0;</span><br><span class="line">        margin: auto;</span><br><span class="line">        right: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        top: -338px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login .login-title &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login-title img &#123;</span><br><span class="line">        width: 190px;</span><br><span class="line">        height: auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login-title p &#123;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        letter-spacing: .29px;</span><br><span class="line">        padding-top: 10px;</span><br><span class="line">        padding-bottom: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_box &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: auto;</span><br><span class="line">        background: rgba(255, 255, 255, 0.3);</span><br><span class="line">        box-shadow: 0 2px 4px 0 rgba(0, 0, 0, .5);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        padding-bottom: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_box .title &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        letter-spacing: .32px;</span><br><span class="line">        border-bottom: 1px solid #e6e6e6;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        padding: 50px 60px 0 60px;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_box .title span:nth-of-type(1) &#123;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        border-bottom: 2px solid #396fcc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp &#123;</span><br><span class="line">        width: 350px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp input &#123;</span><br><span class="line">        outline: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 45px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        border: 1px solid #d9d9d9;</span><br><span class="line">        text-indent: 20px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        background: #fff !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp input.user &#123;</span><br><span class="line">        margin-bottom: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        align-items: center;</span><br><span class="line">        position: relative;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember p:first-of-type &#123;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        letter-spacing: .19px;</span><br><span class="line">        margin-left: 22px;</span><br><span class="line">        display: -ms-flexbox;</span><br><span class="line">        display: flex;</span><br><span class="line">        -ms-flex-align: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        /*position: relative;*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember p:nth-of-type(2) &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        letter-spacing: .19px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember input &#123;</span><br><span class="line">        outline: 0;</span><br><span class="line">        width: 30px;</span><br><span class="line">        height: 45px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        border: 1px solid #d9d9d9;</span><br><span class="line">        text-indent: 20px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        background: #fff !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember p span &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        width: 100px;</span><br><span class="line">        /*position: absolute;*/</span><br><span class="line">        /*left: 20px;*/</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #geetest &#123;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_btn &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 45px;</span><br><span class="line">        background: #396fcc;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        letter-spacing: .26px;</span><br><span class="line">        margin-top: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .go_login &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        letter-spacing: .26px;</span><br><span class="line">        padding-top: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .go_login span &#123;</span><br><span class="line">        color: #84cc39;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-2-基于vuex对本地数据持久化存储">3.5.2 基于vuex对本地数据持久化存储</h3>
<p>Vuex 是一个专门为 Vue.js 应用程序开发的状态管理模式，它采用集中式存储管理应用的所有组件状态，并以相应的规则保证状态以一种可预测的方式发生变化。可以理解为：将多个组件共享的变量全部存储在一个对象里面，然后将这个对象放在顶层的 Vue 实例中，让其他组件可以使用，它最大的特点是响应式。</p>
<p>一般情况下，我们会在 Vuex 中存放一些需要在多个界面中进行共享的信息。比如用户的登录状态、用户名称、头像、地理位置信息、商品的收藏、购物车中的物品等，这些状态信息，我们可以放在统一的地方，对它进行保存和管理。</p>
<p>安装依赖包:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex</span><br><span class="line">import createPersistedState from <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在src路径下创建store文件夹下创建index.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">remember</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">createPersistedState</span>(&#123; <span class="comment">// setState,getState自动触发,防止刷新vuex清空，所以存到本地</span></span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;vuex&#x27;</span>,</span><br><span class="line">        <span class="title function_">setState</span>(<span class="params">key, state</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.<span class="property">remember</span>) &#123;</span><br><span class="line">                <span class="variable language_">localStorage</span>[key] = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sessionStorage[key] = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getState</span>(<span class="params">key, state</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">localStorage</span>[key]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>[key])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sessionStorage[key])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)],</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">get_user_info</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> data = state.<span class="property">token</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">atob</span>(data[<span class="number">1</span>]))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">token</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">token</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">remember</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">remember</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;  <span class="comment">// 类似methods</span></span><br><span class="line">        <span class="title function_">setToken</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置本地保存token</span></span><br><span class="line">            state.<span class="property">token</span> = token</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">setRemember</span>(<span class="params">state, remember</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置记住登陆状态</span></span><br><span class="line">            <span class="comment">// localStorage.removeItem(&#x27;vuex&#x27;);</span></span><br><span class="line">            <span class="comment">// sessionStorage.removeItem(&#x27;vuex&#x27;);</span></span><br><span class="line">            state.<span class="property">remember</span> = remember</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在main.js中加入代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title class_">Antd</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>Login.vue代码更新为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;login box&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;../assets/login.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;login&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;login-title&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;hi&quot;&gt;Hello,Urils!&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;login_box&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                    &lt;span&gt;登录&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;inp&quot;&gt;</span><br><span class="line">                    &lt;a-input v-model:value=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;用户名&quot; class=&quot;user&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">                    &lt;a-input v-model:value=&quot;password&quot; type=&quot;password&quot; class=&quot;pwd&quot; placeholder=&quot;密码&quot;&gt;&lt;/a-input&gt;</span><br><span class="line">                    &lt;div class=&quot;rember&quot;&gt;</span><br><span class="line">                        &lt;p&gt;</span><br><span class="line">                            &lt;a-checkbox v-model:checked=&quot;remember&quot;&gt;记住密码&lt;/a-checkbox&gt;</span><br><span class="line">                        &lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;button class=&quot;login_btn&quot; @click=&quot;login&quot;&gt;登录&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;Login&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                username: &#x27;yuan&#x27;,</span><br><span class="line">                password: &#x27;123&#x27;,</span><br><span class="line">                remember: true // 记录登陆状态</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123; // 监听数据是否发生变化</span><br><span class="line">            remember() &#123;</span><br><span class="line">                this.$store.commit(&#x27;setRemember&#x27;, this.remember);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            // 默认用户没有记录登陆状态</span><br><span class="line">            this.remember = this.$store.state.remember;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            login() &#123;</span><br><span class="line">                axios.post(`$&#123;this.$settings.host&#125;/users/login/`, &#123;</span><br><span class="line">                    username: this.username,</span><br><span class="line">                    password: this.password</span><br><span class="line">                &#125;).then(response =&gt; &#123;</span><br><span class="line"></span><br><span class="line">                    // vuex存储token</span><br><span class="line">                    this.$store.commit(&#x27;setToken&#x27;, response.data.token);</span><br><span class="line"></span><br><span class="line">                    let self = this;</span><br><span class="line">                    this.$success(&#123;</span><br><span class="line">                        title: &#x27;Uric系统提示&#x27;,</span><br><span class="line">                        content: &#x27;登陆成功！欢迎回来！&#x27;,</span><br><span class="line">                        onOk() &#123;</span><br><span class="line">                            // 在这里，不能直接使用this，因为此处的this被重新赋值了，不再是原来的外界的vue对象了，而是一个antd-vue提供的对话框对象了</span><br><span class="line">                            self.$router.push(&#x27;/&#x27;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;).catch((res) =&gt; &#123;</span><br><span class="line">                    // 登陆失败！</span><br><span class="line">                    this.$message.error(&#x27;用户名或者密码有误，请重新输入！&#x27;);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .login .hi &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        font-family: &quot;Times New Roman&quot;;</span><br><span class="line">        font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: relative;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box img &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        min-height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box .login &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 400px;</span><br><span class="line">        left: 0;</span><br><span class="line">        margin: auto;</span><br><span class="line">        right: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        top: -338px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login .login-title &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login-title img &#123;</span><br><span class="line">        width: 190px;</span><br><span class="line">        height: auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login-title p &#123;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        letter-spacing: .29px;</span><br><span class="line">        padding-top: 10px;</span><br><span class="line">        padding-bottom: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_box &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: auto;</span><br><span class="line">        background: rgba(255, 255, 255, 0.3);</span><br><span class="line">        box-shadow: 0 2px 4px 0 rgba(0, 0, 0, .5);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        padding-bottom: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_box .title &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        letter-spacing: .32px;</span><br><span class="line">        border-bottom: 1px solid #e6e6e6;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        padding: 50px 60px 0 60px;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_box .title span:nth-of-type(1) &#123;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        border-bottom: 2px solid #396fcc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp &#123;</span><br><span class="line">        width: 350px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp input &#123;</span><br><span class="line">        outline: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 45px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        border: 1px solid #d9d9d9;</span><br><span class="line">        text-indent: 20px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        background: #fff !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp input.user &#123;</span><br><span class="line">        margin-bottom: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        align-items: center;</span><br><span class="line">        position: relative;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember p:first-of-type &#123;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        color: #4a4a4a;</span><br><span class="line">        letter-spacing: .19px;</span><br><span class="line">        margin-left: 22px;</span><br><span class="line">        display: -ms-flexbox;</span><br><span class="line">        display: flex;</span><br><span class="line">        -ms-flex-align: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        /*position: relative;*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember p:nth-of-type(2) &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        letter-spacing: .19px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember input &#123;</span><br><span class="line">        outline: 0;</span><br><span class="line">        width: 30px;</span><br><span class="line">        height: 45px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        border: 1px solid #d9d9d9;</span><br><span class="line">        text-indent: 20px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        background: #fff !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .rember p span &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        width: 100px;</span><br><span class="line">        /*position: absolute;*/</span><br><span class="line">        /*left: 20px;*/</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #geetest &#123;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .login_btn &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 45px;</span><br><span class="line">        background: #396fcc;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        letter-spacing: .26px;</span><br><span class="line">        margin-top: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .go_login &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #9b9b9b;</span><br><span class="line">        letter-spacing: .26px;</span><br><span class="line">        padding-top: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .inp .go_login span &#123;</span><br><span class="line">        color: #84cc39;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220615%E4%B8%8B%E5%8D%88121233037-5266354.png" alt="image-20220615下午121233037"></p>
<h3 id="3-5-3、后端token验证">3.5.3、后端token验证</h3>
<p>配置文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 自定义异常处理</span></span><br><span class="line">    <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;uric_api.utils.exceptions.custom_exception_handler&#x27;</span>,</span><br><span class="line">    <span class="comment"># 自定义认证</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="comment"># jwt认证</span></span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: (&#x27;rest_framework.permissions.IsAuthenticated&#x27;,)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>视图更新为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    permission_classes = [IsAuthenticated, ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, reqeust</span>):</span><br><span class="line">        data = [</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">                       <span class="string">&#x27;category_name&#x27;</span>: <span class="string">&#x27;数据库服务器&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;izbp13e05jqwodd605vm3gz&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;ip_addr&#x27;</span>: <span class="string">&#x27;47.58.131.12&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;port&#x27;</span>: <span class="number">22</span>,</span><br><span class="line">                       <span class="string">&#x27;remark&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                   &#125;,</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">                       <span class="string">&#x27;category_name&#x27;</span>: <span class="string">&#x27;数据库服务器&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;iZbp1a3jw4l12ho53ivhkkZ&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;ip_addr&#x27;</span>: <span class="string">&#x27;12.18.125.22&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;port&#x27;</span>: <span class="number">22</span>,</span><br><span class="line">                       <span class="string">&#x27;remark&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                   &#125;,</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">                       <span class="string">&#x27;category_name&#x27;</span>: <span class="string">&#x27;缓存服务器&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;iZbp1b1xqfqw257gs563k2iZ&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;ip_addr&#x27;</span>: <span class="string">&#x27;12.19.135.130&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;port&#x27;</span>: <span class="number">22</span>,</span><br><span class="line">                       <span class="string">&#x27;remark&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                   &#125;,</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="string">&#x27;id&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">                       <span class="string">&#x27;category_name&#x27;</span>: <span class="string">&#x27;缓存服务器&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;iZbp1b1jw4l01ho53muhkkZ&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;ip_addr&#x27;</span>: <span class="string">&#x27;47.98.101.89&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;port&#x27;</span>: <span class="number">22</span>,</span><br><span class="line">                       <span class="string">&#x27;remark&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                   &#125;</span><br><span class="line">               ],</span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220617%E4%B8%8B%E5%8D%8833536492-5451338.png" alt="image-20220617下午33536492"></p>
<p><img src="assets/image-20220617%E4%B8%8B%E5%8D%8833601994-5451363.png" alt="image-20220617下午33601994"></p>
<h3 id="3-5-4、路由守卫">3.5.4、路由守卫</h3>
<p><code>Host.vue</code>发送ajax请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;主机管理&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Host&quot;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    axios.get(this.$settings.host + &quot;/host&quot;, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;Authorization&quot;: &quot;jwt &quot; + this.$store.getters.token</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then((res) =&gt; &#123;</span><br><span class="line">      console.log(&quot;res:&quot;, res)</span><br><span class="line"></span><br><span class="line">    &#125;).catch((err) =&gt; &#123;</span><br><span class="line">      console.log(&quot;err:&quot;, err)</span><br><span class="line">      this.$router.push(&quot;/login&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>有些页面需要验证才能访问，可以通过路由守卫完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Base</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Base&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowCenter</span> <span class="keyword">from</span> <span class="string">&#x27;../views/ShowCenter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Host</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Host&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/uric&#x27;</span>,</span><br><span class="line">        <span class="attr">alias</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 给当前路径起一个别名</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Base&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Base</span>, <span class="comment">// 快捷键：Alt+Enter快速导包,</span></span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">meta</span>: &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;展示中心&#x27;</span>,</span><br><span class="line">                    <span class="attr">authenticate</span>: <span class="literal">false</span>,</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;show_center&#x27;</span>,</span><br><span class="line">                <span class="attr">alias</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 给当前路径起一个别名</span></span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;ShowCenter&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">ShowCenter</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">meta</span>: &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;主机管理&#x27;</span>,</span><br><span class="line">                    <span class="attr">authenticate</span>: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;host&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;Host&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Host</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;账户登陆&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Login</span> <span class="comment">// 快捷键：Alt+Enter快速导包</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由守卫，主要是编写一些在页面跳转过程中， 需要自动执行的代码。例如：修改页面头部标题，验证权限。</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;页面跳转&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;token:::&quot;</span>, store.<span class="property">getters</span>.<span class="property">token</span>);</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">authenticate</span> &amp;&amp; (store.<span class="property">getters</span>.<span class="property">token</span> === <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 如果访问需要登录的页面，但是没有token则默认跳转到login登陆页面</span></span><br><span class="line">        <span class="title function_">next</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-5-5、注销">3.5.5、注销</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-layout style=&quot;min-height: 100vh&quot;&gt;</span><br><span class="line">    &lt;a-layout-sider v-model:collapsed=&quot;collapsed&quot; collapsible&gt;</span><br><span class="line">      &lt;div class=&quot;logo&quot;</span><br><span class="line">           style=&quot;font-style: italic;text-align: center;font-size: 20px;color:#fff;margin: 10px 0;line-height: 50px;font-family: &#x27;Times New Roman&#x27;&quot;&gt;</span><br><span class="line">        &lt;span&gt;&lt;a-switch v-model:checked=&quot;checked&quot;/&gt; DevOps&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;logo&quot;/&gt;</span><br><span class="line">      &lt;a-menu v-for=&quot;menu in menu_list&quot; v-model:selectedKeys=&quot;selectedKeys&quot; theme=&quot;dark&quot; mode=&quot;inline&quot;&gt;</span><br><span class="line">        &lt;a-menu-item v-if=&quot;menu.children.length===0&quot; :key=&quot;menu.id&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;router-link :to=&quot;menu.menu_url&quot;&gt;</span><br><span class="line">            &lt;desktop-outlined/&gt;</span><br><span class="line">            &lt;span&gt; &#123;&#123; menu.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/router-link&gt;</span><br><span class="line">        &lt;/a-menu-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-sub-menu v-else :key=&quot;menu.id&quot;&gt;</span><br><span class="line">          &lt;template #title&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">              &lt;user-outlined/&gt;</span><br><span class="line">              &lt;span&gt;&#123;&#123; menu.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;a-menu-item v-for=&quot;child_menu in menu.children&quot; :key=&quot;child_menu.id&quot;&gt;</span><br><span class="line">            &lt;router-link :to=&quot;child_menu.menu_url&quot;&gt;&#123;&#123; child_menu.title &#125;&#125;&lt;/router-link&gt;</span><br><span class="line">          &lt;/a-menu-item&gt;</span><br><span class="line">        &lt;/a-sub-menu&gt;</span><br><span class="line">      &lt;/a-menu&gt;</span><br><span class="line">    &lt;/a-layout-sider&gt;</span><br><span class="line">    &lt;a-layout&gt;</span><br><span class="line">      &lt;a-layout-header style=&quot;background: #fff; padding: 20px&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;a-row type=&quot;flex&quot; justify=&quot;start&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a-col :span=&quot;6&quot;&gt;</span><br><span class="line">            &lt;a-breadcrumb&gt;</span><br><span class="line">              &lt;a-breadcrumb-item href=&quot;&quot;&gt;</span><br><span class="line">                &lt;home-outlined/&gt;</span><br><span class="line">              &lt;/a-breadcrumb-item&gt;</span><br><span class="line">              &lt;a-breadcrumb-item href=&quot;&quot;&gt;</span><br><span class="line">                &lt;user-outlined/&gt;</span><br><span class="line">                &lt;span&gt;Application List&lt;/span&gt;</span><br><span class="line">              &lt;/a-breadcrumb-item&gt;</span><br><span class="line">              &lt;a-breadcrumb-item&gt;Application&lt;/a-breadcrumb-item&gt;</span><br><span class="line">            &lt;/a-breadcrumb&gt;</span><br><span class="line">          &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a-col :span=&quot;1&quot; :offset=&quot;17&quot;&gt;</span><br><span class="line">            &lt;a-breadcrumb&gt;</span><br><span class="line">              &lt;a-button @click=&quot;logout&quot; type=&quot;primary&quot; class=&quot;logout&quot;&gt;</span><br><span class="line">                注销</span><br><span class="line">              &lt;/a-button&gt;</span><br><span class="line">            &lt;/a-breadcrumb&gt;</span><br><span class="line">          &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/a-row&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/a-layout-header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a-layout-content style=&quot;margin: 0 16px&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/a-layout-content&gt;</span><br><span class="line">      &lt;a-layout-footer style=&quot;text-align: center&quot;&gt;</span><br><span class="line">        Ant Design ©2018 Created by Ant UED</span><br><span class="line">      &lt;/a-layout-footer&gt;</span><br><span class="line">    &lt;/a-layout&gt;</span><br><span class="line">  &lt;/a-layout&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  DesktopOutlined,</span><br><span class="line">  FileOutlined,</span><br><span class="line">  PieChartOutlined,</span><br><span class="line">  TeamOutlined,</span><br><span class="line">  UserOutlined,</span><br><span class="line">  HomeOutlined</span><br><span class="line">&#125; from &#x27;@ant-design/icons-vue&#x27;;</span><br><span class="line">import &#123;defineComponent, ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const checked = ref(true);</span><br><span class="line">    return &#123;</span><br><span class="line">      checked,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    PieChartOutlined,</span><br><span class="line">    DesktopOutlined,</span><br><span class="line">    UserOutlined,</span><br><span class="line">    TeamOutlined,</span><br><span class="line">    FileOutlined,</span><br><span class="line">    HomeOutlined,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      collapsed: ref(false),</span><br><span class="line">      selectedKeys: ref([&#x27;1&#x27;]),</span><br><span class="line">      menu_list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1, icon: &#x27;mail&#x27;, title: &#x27;展示中心&#x27;, tube: &#x27;&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/show_center&#x27;, children: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2, icon: &#x27;mail&#x27;, title: &#x27;资产管理&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/host&#x27;, children: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;: 3, icon: &#x27;bold&#x27;, title: &#x27;批量任务&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;, children: [</span><br><span class="line">            &#123;id: 10, icon: &#x27;mail&#x27;, title: &#x27;执行任务&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/multi_exec&#x27;&#125;,</span><br><span class="line">            &#123;id: 11, icon: &#x27;mail&#x27;, title: &#x27;命令管理&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/template_manage&#x27;&#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 4, icon: &#x27;highlight&#x27;, title: &#x27;代码发布&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;, children: [</span><br><span class="line">            &#123;id: 12, title: &#x27;应用管理&#x27;, menu_url: &#x27;/uric/release&#x27;&#125;,</span><br><span class="line">            &#123;id: 13, title: &#x27;发布申请&#x27;, menu_url: &#x27;/uric/release&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;id: 5, icon: &#x27;mail&#x27;, title: &#x27;定时计划&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;, children: []&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 6, icon: &#x27;mail&#x27;, title: &#x27;配置管理&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;, children: [</span><br><span class="line">            &#123;id: 14, title: &#x27;环境管理&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/environment&#x27;&#125;,</span><br><span class="line">            &#123;id: 15, title: &#x27;服务配置&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/workbench&#x27;&#125;,</span><br><span class="line">            &#123;id: 16, title: &#x27;应用配置&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/workbench&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;id: 7, icon: &#x27;mail&#x27;, title: &#x27;监控预警&#x27;, tube: &#x27;&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/workbench&#x27;, children: []&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 8, icon: &#x27;mail&#x27;, title: &#x27;报警&#x27;, tube: &#x27;&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/workbench&#x27;, children: [</span><br><span class="line">            &#123;id: 17, title: &#x27;报警历史&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/workbench&#x27;&#125;,</span><br><span class="line">            &#123;id: 18, title: &#x27;报警联系人&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/workbench&#x27;&#125;,</span><br><span class="line">            &#123;id: 19, title: &#x27;报警联系组&#x27;, &#x27;menu_url&#x27;: &#x27;/uric/workbench&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 9, icon: &#x27;mail&#x27;, title: &#x27;用户管理&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;, children: [</span><br><span class="line">            &#123;id: 20, title: &#x27;账户管理&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;&#125;,</span><br><span class="line">            &#123;id: 21, title: &#x27;角色管理&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;&#125;,</span><br><span class="line">            &#123;id: 22, title: &#x27;系统设置&#x27;, tube: &#x27;&#x27;, menu_url: &#x27;/uric/workbench&#x27;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    logout() &#123;</span><br><span class="line">      let self = this;</span><br><span class="line">      this.$confirm(&#123;</span><br><span class="line">        title: &#x27;Uric系统提示&#x27;,</span><br><span class="line">        content: &#x27;您确认要注销登陆吗？&#x27;,</span><br><span class="line">        onOk() &#123;</span><br><span class="line">          self.$store.commit(&#x27;setToken&#x27;, &#x27;&#x27;)</span><br><span class="line">          self.$router.push(&#x27;/login&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#components-layout-demo-side .logo &#123;</span><br><span class="line">  height: 32px;</span><br><span class="line">  margin: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-layout .site-layout-background &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[data-theme=&#x27;dark&#x27;] .site-layout .site-layout-background &#123;</span><br><span class="line">  background: #141414;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logout &#123;</span><br><span class="line">  line-height: 1.5715;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220622165429932-5888071.png" alt="image-20220622165429932"></p>
<h1>四 主机管理</h1>
<h2 id="4-1、主机基本功能">4.1、主机基本功能</h2>
<h3 id="4-1-1、前端页面初始化">4.1.1、前端页面初始化</h3>
<p><img src="assets/image-20220623184312459-5980993.png" alt="image-20220623184312459"></p>
<p>Host.vue代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-row&gt;</span><br><span class="line">    &lt;a-col :span=&quot;6&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;add_host&quot; style=&quot;margin: 15px;&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-button @click=&quot;showHostModal&quot; type=&quot;primary&quot;&gt;</span><br><span class="line">          新建</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; style=&quot;margin-left: 20px;&quot;&gt;</span><br><span class="line">          批量导入</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/a-row&gt;</span><br><span class="line">  &lt;a-table bordered :dataSource=&quot;hostList.data&quot; :columns=&quot;hostFormColumns&quot;&gt;</span><br><span class="line">    &lt;template #bodyCell=&quot;&#123; column, text, record &#125;&quot;&gt;</span><br><span class="line">      &lt;template v-if=&quot;column.dataIndex === &#x27;action&#x27;&quot;&gt;</span><br><span class="line">        &lt;a-popconfirm</span><br><span class="line">            v-if=&quot;hostList.data.length&quot;</span><br><span class="line">            title=&quot;Sure to delete?&quot;</span><br><span class="line">            @confirm=&quot;deleteHost(record)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a&gt;Delete&lt;/a&gt;</span><br><span class="line">        &lt;/a-popconfirm&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/a-table&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a-modal v-model:visible=&quot;hostFormVisible&quot; title=&quot;添加主机&quot; @ok=&quot;onHostFormSubmit&quot; @cancel=&quot;resetForm()&quot; :width=&quot;800&quot;&gt;</span><br><span class="line">      &lt;a-form</span><br><span class="line">          ref=&quot;formRef&quot;</span><br><span class="line">          name=&quot;custom-validation&quot;</span><br><span class="line">          :model=&quot;hostForm.form&quot;</span><br><span class="line">          :rules=&quot;hostForm.rules&quot;</span><br><span class="line">          v-bind=&quot;layout&quot;</span><br><span class="line">          @finish=&quot;handleFinish&quot;</span><br><span class="line">          @validate=&quot;handleValidate&quot;</span><br><span class="line">          @finishFailed=&quot;handleFinishFailed&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;a-form-item label=&quot;主机类别&quot; prop=&quot;zone&quot; name=&quot;category&quot;&gt;</span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;12&quot;&gt;</span><br><span class="line">              &lt;a-select</span><br><span class="line">                  ref=&quot;select&quot;</span><br><span class="line">                  v-model:value=&quot;hostForm.form.category&quot;</span><br><span class="line">                  @change=&quot;handleCategorySelectChange&quot;</span><br><span class="line"></span><br><span class="line">              &gt;</span><br><span class="line">                &lt;a-select-option :value=&quot;category.id&quot; v-for=&quot;category in categoryList.data&quot; :key=&quot;category.id&quot;&gt;</span><br><span class="line">                  &#123;&#123; category.name &#125;&#125;</span><br><span class="line">                &lt;/a-select-option&gt;</span><br><span class="line">              &lt;/a-select&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;主机名称&quot; name=&quot;name&quot;&gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;hostForm.form.name&quot; type=&quot;text&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;连接地址&quot; name=&quot;username&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;用户名&quot; addon-before=&quot;ssh&quot; v-model:value=&quot;hostForm.form.username&quot; type=&quot;text&quot;</span><br><span class="line">                       autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;ip地址&quot; addon-before=&quot;@&quot; v-model:value=&quot;hostForm.form.ip_addr&quot; type=&quot;text&quot;</span><br><span class="line">                       autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;端口号&quot; addon-before=&quot;-p&quot; v-model:value=&quot;hostForm.form.port&quot; type=&quot;text&quot;</span><br><span class="line">                       autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;连接密码&quot; name=&quot;password&quot;&gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;hostForm.form.password&quot; type=&quot;password&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;备注信息&quot; name=&quot;remark&quot;&gt;</span><br><span class="line">          &lt;a-textarea placeholder=&quot;请输入主机备注信息&quot; v-model:value=&quot;hostForm.form.remark&quot; type=&quot;text&quot;</span><br><span class="line">                      :auto-size=&quot;&#123; minRows: 3, maxRows: 5 &#125;&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;a-form-item :wrapper-col=&quot;&#123; span: 14, offset: 4 &#125;&quot;&gt;</span><br><span class="line">          &lt;a-button @click=&quot;resetForm&quot;&gt;Reset&lt;/a-button&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line">      &lt;/a-form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/a-modal&gt;</span><br><span class="line">    &lt;a-modal</span><br><span class="line">        :width=&quot;600&quot;</span><br><span class="line">        title=&quot;新建主机类别&quot;</span><br><span class="line">        :visible=&quot;HostCategoryFromVisible&quot;</span><br><span class="line">        @cancel=&quot;hostCategoryFormCancel&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template #footer&gt;</span><br><span class="line">        &lt;a-button key=&quot;back&quot; @click=&quot;hostCategoryFormCancel&quot;&gt;取消&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button key=&quot;submit&quot; type=&quot;primary&quot; :loading=&quot;loading&quot; @click=&quot;onHostCategoryFromSubmit&quot;&gt;提交&lt;/a-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;a-form-model ref=&quot;hostCategoryRuleForm&quot; v-model:value=&quot;hostCategoryForm.form&quot; :rules=&quot;hostCategoryForm.rules&quot;</span><br><span class="line">                    :label-col=&quot;hostCategoryForm.labelCol&quot; :wrapper-col=&quot;hostCategoryForm.wrapperCol&quot;&gt;</span><br><span class="line">        &lt;a-form-model-item ref=&quot;name&quot; label=&quot;类别名称&quot; prop=&quot;name&quot;&gt;</span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;24&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;请输入主机类别名称&quot; v-model:value=&quot;hostCategoryForm.form.name&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line">        &lt;/a-form-model-item&gt;</span><br><span class="line">      &lt;/a-form-model&gt;</span><br><span class="line">    &lt;/a-modal&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;defineComponent, ref, reactive&#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import settings from &quot;@/settings&quot;;</span><br><span class="line">import store from &quot;@/store&quot;;</span><br><span class="line">import &#123;message&#125; from &#x27;ant-design-vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    const handleChange = value =&gt; &#123;</span><br><span class="line">      console.log(`selected $&#123;value&#125;`);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleCategorySelectChange = (value) =&gt; &#123;</span><br><span class="line">      // 切换主机类别的回调处理</span><br><span class="line">      console.log(value)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const formRef = ref();</span><br><span class="line">    const HostCategoryFromVisible = ref(false);</span><br><span class="line">    const hostList = reactive(&#123;</span><br><span class="line">      data: [</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 1,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;数据库服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;izbp13e05jqwodd605vm3gz&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;47.58.131.12&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 2,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;数据库服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;iZbp1a3jw4l12ho53ivhkkZ&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;12.18.125.22&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 3,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;缓存服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;iZbp1b1xqfqw257gs563k2iZ&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;12.19.135.130&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 4,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;缓存服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;iZbp1b1jw4l01ho53muhkkZ&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;47.98.101.89&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">    const categoryList = reactive(&#123;</span><br><span class="line">      data: [</span><br><span class="line">        &#123;&#x27;id&#x27;: 1, &#x27;name&#x27;: &#x27;数据库服务&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;id&#x27;: 2, &#x27;name&#x27;: &#x27;缓存服务&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;id&#x27;: 3, &#x27;name&#x27;: &#x27;web服务&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;id&#x27;: 4, &#x27;name&#x27;: &#x27;静态文件存储服务&#x27;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const hostForm = reactive(&#123;</span><br><span class="line">      labelCol: &#123;span: 6&#125;,</span><br><span class="line">      wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">      other: &#x27;&#x27;,</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: &#x27;&#x27;,</span><br><span class="line">        category: &quot;&quot;,</span><br><span class="line">        ip_addr: &#x27;&#x27;,</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        port: &#x27;&#x27;,</span><br><span class="line">        remark: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入主机名称&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入连接密码&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        category: [</span><br><span class="line">          &#123;required: true, message: &#x27;请选择类别&#x27;, trigger: &#x27;change&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        username: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        ip_addr: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入连接地址&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;max: 15, message: &#x27;长度最大15位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        port: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入端口号&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;max: 5, message: &#x27;长度最大5位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    let validateName = async (_rule, value) =&gt; &#123;</span><br><span class="line">      if (value === &#x27;&#x27;) &#123;</span><br><span class="line">        return Promise.reject(&#x27;请输入类别名称&#x27;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return Promise.resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    const hostCategoryForm = reactive(&#123;</span><br><span class="line">      labelCol: &#123;span: 6&#125;,</span><br><span class="line">      wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">      other: &#x27;&#x27;,</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [&#123;</span><br><span class="line">          required: true,</span><br><span class="line">          message: &#x27;请输入类别名称&#x27;,</span><br><span class="line">          validator: validateName,</span><br><span class="line">          trigger: &#x27;blur&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const layout = &#123;</span><br><span class="line">      labelCol: &#123;</span><br><span class="line">        span: 4,</span><br><span class="line">      &#125;,</span><br><span class="line">      wrapperCol: &#123;</span><br><span class="line">        span: 14,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleFinish = values =&gt; &#123;</span><br><span class="line">      console.log(values, hostForm);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleFinishFailed = errors =&gt; &#123;</span><br><span class="line">      console.log(errors);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const resetForm = () =&gt; &#123;</span><br><span class="line">      formRef.value.resetFields();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleValidate = (...args) =&gt; &#123;</span><br><span class="line">      console.log(args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const hostFormVisible = ref(false);</span><br><span class="line"></span><br><span class="line">    const showHostModal = () =&gt; &#123;</span><br><span class="line">      hostFormVisible.value = true;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const showHostCategoryFormModal = () =&gt; &#123;</span><br><span class="line">      // 显示添加主机类别的表单窗口</span><br><span class="line">      HostCategoryFromVisible.value = true</span><br><span class="line">    &#125;</span><br><span class="line">    const hostCategoryFormCancel = () =&gt; &#123;</span><br><span class="line">      // 添加主机类别的表单取消</span><br><span class="line">      hostCategoryForm.form.name = &quot;&quot;; // 清空表单内容</span><br><span class="line">      HostCategoryFromVisible.value = false // 关闭对话框</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const onHostCategoryFromSubmit = () =&gt; &#123;</span><br><span class="line">      // 添加主机类别的表单提交处理</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const onHostFormSubmit = () =&gt; &#123;</span><br><span class="line">      // 添加主机的表单提交处理</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const get_host_list = () =&gt; &#123;</span><br><span class="line">      // 获取主机类别列表</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    const get_category_list = () =&gt; &#123;</span><br><span class="line">      // 获取主机类别列表</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const deleteHost = record =&gt; &#123;</span><br><span class="line">      // 删除主机接口</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_host_list()</span><br><span class="line">    get_category_list()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      selectHostCategory: ref(&#x27;yuan&#x27;),</span><br><span class="line">      hostForm,</span><br><span class="line">      formRef,</span><br><span class="line">      layout,</span><br><span class="line">      HostCategoryFromVisible,</span><br><span class="line">      handleCategorySelectChange,</span><br><span class="line">      handleFinishFailed,</span><br><span class="line">      handleFinish,</span><br><span class="line">      resetForm,</span><br><span class="line">      handleValidate,</span><br><span class="line">      hostFormVisible,</span><br><span class="line">      showHostModal,</span><br><span class="line">      onHostFormSubmit,</span><br><span class="line">      deleteHost,</span><br><span class="line">      showHostCategoryFormModal,</span><br><span class="line">      hostCategoryForm,</span><br><span class="line">      hostCategoryFormCancel,</span><br><span class="line">      onHostCategoryFromSubmit,</span><br><span class="line">      hostFormColumns: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;类别&#x27;,</span><br><span class="line">          dataIndex: &#x27;category_name&#x27;,</span><br><span class="line">          key: &#x27;category_name&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;主机名称&#x27;,</span><br><span class="line">          dataIndex: &#x27;name&#x27;,</span><br><span class="line">          key: &#x27;name&#x27;,</span><br><span class="line">          sorter: true,</span><br><span class="line">          width: 230</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;连接地址&#x27;,</span><br><span class="line">          dataIndex: &#x27;ip_addr&#x27;,</span><br><span class="line">          key: &#x27;ip_addr&#x27;,</span><br><span class="line">          ellipsis: true,</span><br><span class="line">          sorter: true,</span><br><span class="line">          width: 150</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;端口&#x27;,</span><br><span class="line">          dataIndex: &#x27;port&#x27;,</span><br><span class="line">          key: &#x27;port&#x27;,</span><br><span class="line">          ellipsis: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;备注信息&#x27;,</span><br><span class="line">          dataIndex: &#x27;remark&#x27;,</span><br><span class="line">          key: &#x27;remark&#x27;,</span><br><span class="line">          ellipsis: true</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;操作&#x27;,</span><br><span class="line">          key: &#x27;action&#x27;,</span><br><span class="line">          width: 200,</span><br><span class="line">          dataIndex: &quot;action&quot;,</span><br><span class="line">          scopedSlots: &#123;customRender: &#x27;action&#x27;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      hostList,</span><br><span class="line">      categoryList,</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-1-2、主机类别与主机接口">4.1.2、主机类别与主机接口</h3>
<h4 id="（1）创建app">（1）创建app</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd uric_api/apps/</span><br><span class="line">python ../../manage.py startapp host</span><br></pre></td></tr></table></figure>
<h4 id="（2）注册">（2）注册</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="（3）构建路由">（3）构建路由</h4>
<p>总路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;host/&#x27;</span>, include(<span class="string">&#x27;host.urls&#x27;</span>)),</span><br></pre></td></tr></table></figure>
<p>在host应用中创建urls.py文件，写如下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> host <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">  	</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="（4）模型models">（4）模型models</h4>
<p><code>urci_api/utils/models.py</code>  基础模型类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;公共模型&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">500</span>,default=<span class="string">&quot;&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;名称/标题&#x27;</span>)</span><br><span class="line">    is_show = models.BooleanField(default=<span class="literal">True</span>, verbose_name=<span class="string">&quot;是否显示&quot;</span>)</span><br><span class="line">    orders = models.IntegerField(default=<span class="number">1</span>, verbose_name=<span class="string">&quot;排序&quot;</span>)</span><br><span class="line">    is_deleted = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&quot;是否删除&quot;</span>)</span><br><span class="line">    created_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&quot;添加时间&quot;</span>)</span><br><span class="line">    updated_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">&quot;修改时间&quot;</span>)</span><br><span class="line">    description = models.TextField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>, default=<span class="string">&quot;&quot;</span>, verbose_name=<span class="string">&quot;描述信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 数据库迁移时，设置了bstract = True的model类不会生成数据库表</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<p><code>host/models.py</code>的主机相关的模型代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> uric_api.utils.models <span class="keyword">import</span> BaseModel, models</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostCategory</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机类别&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;host_category&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;主机类别&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name  <span class="comment"># 取消提示文字中关于英文复数+s的情况</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Host</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="comment"># 真正在数据库中的字段实际上叫 category_id，而category则代表了关联的哪个分类模型对象</span></span><br><span class="line">    category = models.ForeignKey(<span class="string">&#x27;HostCategory&#x27;</span>, on_delete=models.DO_NOTHING, verbose_name=<span class="string">&#x27;主机类别&#x27;</span>, related_name=<span class="string">&#x27;hc&#x27;</span>,</span><br><span class="line">                                 null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    ip_addr = models.CharField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, max_length=<span class="number">500</span>, verbose_name=<span class="string">&#x27;连接地址&#x27;</span>)</span><br><span class="line">    port = models.IntegerField(verbose_name=<span class="string">&#x27;端口&#x27;</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;登录用户&#x27;</span>)</span><br><span class="line">    users = models.ManyToManyField(User)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;host&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;主机信息&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">&#x27;:&#x27;</span> + self.ip_addr</span><br></pre></td></tr></table></figure>
<h4 id="（5）序列化器">（5）序列化器</h4>
<p><code>host.serializers</code>代码：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostCategoryModelSeiralizer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机分类的序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.HostCategory</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostModelSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机信息的序列化器&quot;&quot;&quot;</span></span><br><span class="line">    category_name = serializers.CharField(source=<span class="string">&#x27;category.name&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    password = serializers.CharField(max_length=<span class="number">32</span>, write_only=<span class="literal">True</span>, label=<span class="string">&quot;登录密码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Host</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;category_name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ip_addr&#x27;</span>, <span class="string">&#x27;port&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;当用户添加、编辑主机信息会自动执行这个方法&quot;&quot;&quot;</span></span><br><span class="line">        ip_addr = attrs.get(<span class="string">&#x27;ip_addr&#x27;</span>)</span><br><span class="line">        port = attrs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">        username = attrs.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 验证主机信息是否正确</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加host记录，如果第一次添加host记录，那么需要我们生成全局的公钥和私钥</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;接受通过验证以后的数据字典:&#x27;</span>,validated_data)</span><br><span class="line">        ip_addr = validated_data.get(<span class="string">&#x27;ip_addr&#x27;</span>)</span><br><span class="line">        port = validated_data.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">        username = validated_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = validated_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 生成公私钥和管理主机的公私钥</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 剔除密码字段，保存host记录</span></span><br><span class="line">        password = validated_data.pop(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        instance = models.Host.objects.create(</span><br><span class="line">            **validated_data</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>
<p>（6）视图函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView,CreateAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> HostCategory,Host</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> HostCategoryModelSeiralizer,HostModelSerializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostCategoryListAPIView</span>(ListAPIView, CreateAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机类别&quot;&quot;&quot;</span></span><br><span class="line">    queryset = HostCategory.objects.<span class="built_in">filter</span>(is_show=<span class="literal">True</span>, is_deleted=<span class="literal">False</span>).order_by(<span class="string">&quot;orders&quot;</span>,<span class="string">&quot;-id&quot;</span>).<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = HostCategoryModelSeiralizer</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostModelViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机信息&quot;&quot;&quot;</span></span><br><span class="line">    queryset = Host.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = HostModelSerializers</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br></pre></td></tr></table></figure>
<p>路由，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> host <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.HostModelViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">&#x27;(?P&lt;pk&gt;\d+)&#x27;</span>, views.HostModelViewSet.as_view(&#123;<span class="string">&#x27;delete&#x27;</span>: <span class="string">&#x27;destroy&#x27;</span>&#125;)),</span><br><span class="line">    path(<span class="string">&#x27;category&#x27;</span>, views.HostCategoryListAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>测试主机类别接口：</p>
<p><img src="assets/image-20220622203649289-5901411.png" alt="image-20220622203649289"></p>
<p><img src="assets/image-20220622203838704-5901519.png" alt="image-20220622203838704"></p>
<p>测试主机接口：</p>
<p><img src="assets/image-20220623125408732-5960049.png" alt="image-20220623125408732"></p>
<p><img src="assets/image-20220623125445062-5960086.png" alt="image-20220623125445062"></p>
<h3 id="4-1-3、前端对接后端接口">4.1.3、前端对接后端接口</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-row&gt;</span><br><span class="line">    &lt;a-col :span=&quot;6&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;add_host&quot; style=&quot;margin: 15px;&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-button @click=&quot;showHostModal&quot; type=&quot;primary&quot;&gt;</span><br><span class="line">          新建</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; style=&quot;margin-left: 20px;&quot;&gt;</span><br><span class="line">          批量导入</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/a-row&gt;</span><br><span class="line">  &lt;a-table :dataSource=&quot;hostList.data&quot; :columns=&quot;hostFormColumns&quot;&gt;</span><br><span class="line">    &lt;template #bodyCell=&quot;&#123; column, text, record &#125;&quot;&gt;</span><br><span class="line">      &lt;template v-if=&quot;column.dataIndex === &#x27;action&#x27;&quot;&gt;</span><br><span class="line">        &lt;a-popconfirm</span><br><span class="line">            v-if=&quot;hostList.data.length&quot;</span><br><span class="line">            title=&quot;Sure to delete?&quot;</span><br><span class="line">            @confirm=&quot;deleteHost(record)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a&gt;Delete&lt;/a&gt;</span><br><span class="line">        &lt;/a-popconfirm&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/a-table&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a-modal v-model:visible=&quot;hostFormVisible&quot; title=&quot;添加主机&quot; @ok=&quot;onHostFormSubmit&quot; @cancel=&quot;resetForm()&quot; :width=&quot;800&quot;&gt;</span><br><span class="line">      &lt;a-form</span><br><span class="line">          ref=&quot;formRef&quot;</span><br><span class="line">          name=&quot;custom-validation&quot;</span><br><span class="line">          :model=&quot;hostForm.form&quot;</span><br><span class="line">          :rules=&quot;hostForm.rules&quot;</span><br><span class="line">          v-bind=&quot;layout&quot;</span><br><span class="line">          @finish=&quot;handleFinish&quot;</span><br><span class="line">          @validate=&quot;handleValidate&quot;</span><br><span class="line">          @finishFailed=&quot;handleFinishFailed&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;a-form-item label=&quot;主机类别&quot; prop=&quot;zone&quot; name=&quot;category&quot;&gt;</span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;12&quot;&gt;</span><br><span class="line">              &lt;a-select</span><br><span class="line">                  ref=&quot;select&quot;</span><br><span class="line">                  v-model:value=&quot;hostForm.form.category&quot;</span><br><span class="line">                  @change=&quot;handleCategorySelectChange&quot;</span><br><span class="line"></span><br><span class="line">              &gt;</span><br><span class="line">                &lt;a-select-option :value=&quot;category.id&quot; v-for=&quot;category in categoryList.data&quot; :key=&quot;category.id&quot;&gt;</span><br><span class="line">                  &#123;&#123; category.name &#125;&#125;</span><br><span class="line">                &lt;/a-select-option&gt;</span><br><span class="line">              &lt;/a-select&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;主机名称&quot; name=&quot;name&quot;&gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;hostForm.form.name&quot; type=&quot;text&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;连接地址&quot; name=&quot;username&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;用户名&quot; addon-before=&quot;ssh&quot; v-model:value=&quot;hostForm.form.username&quot; type=&quot;text&quot;</span><br><span class="line">                       autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;ip地址&quot; addon-before=&quot;@&quot; v-model:value=&quot;hostForm.form.ip_addr&quot; type=&quot;text&quot;</span><br><span class="line">                       autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;端口号&quot; addon-before=&quot;-p&quot; v-model:value=&quot;hostForm.form.port&quot; type=&quot;text&quot;</span><br><span class="line">                       autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;连接密码&quot; name=&quot;password&quot;&gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;hostForm.form.password&quot; type=&quot;password&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;备注信息&quot; name=&quot;remark&quot;&gt;</span><br><span class="line">          &lt;a-textarea placeholder=&quot;请输入主机备注信息&quot; v-model:value=&quot;hostForm.form.remark&quot; type=&quot;text&quot;</span><br><span class="line">                      :auto-size=&quot;&#123; minRows: 3, maxRows: 5 &#125;&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;a-form-item :wrapper-col=&quot;&#123; span: 14, offset: 4 &#125;&quot;&gt;</span><br><span class="line">          &lt;a-button @click=&quot;resetForm&quot;&gt;Reset&lt;/a-button&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line">      &lt;/a-form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/a-modal&gt;</span><br><span class="line">    &lt;a-modal</span><br><span class="line">        :width=&quot;600&quot;</span><br><span class="line">        title=&quot;新建主机类别&quot;</span><br><span class="line">        :visible=&quot;HostCategoryFromVisible&quot;</span><br><span class="line">        @cancel=&quot;hostCategoryFormCancel&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template #footer&gt;</span><br><span class="line">        &lt;a-button key=&quot;back&quot; @click=&quot;hostCategoryFormCancel&quot;&gt;取消&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button key=&quot;submit&quot; type=&quot;primary&quot; :loading=&quot;loading&quot; @click=&quot;onHostCategoryFromSubmit&quot;&gt;提交&lt;/a-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;a-form-model ref=&quot;hostCategoryRuleForm&quot; v-model:value=&quot;hostCategoryForm.form&quot; :rules=&quot;hostCategoryForm.rules&quot;</span><br><span class="line">                    :label-col=&quot;hostCategoryForm.labelCol&quot; :wrapper-col=&quot;hostCategoryForm.wrapperCol&quot;&gt;</span><br><span class="line">        &lt;a-form-model-item ref=&quot;name&quot; label=&quot;类别名称&quot; prop=&quot;name&quot;&gt;</span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;24&quot;&gt;</span><br><span class="line">              &lt;a-input placeholder=&quot;请输入主机类别名称&quot; v-model:value=&quot;hostCategoryForm.form.name&quot;/&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line">        &lt;/a-form-model-item&gt;</span><br><span class="line">      &lt;/a-form-model&gt;</span><br><span class="line">    &lt;/a-modal&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;defineComponent, ref, reactive&#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import settings from &quot;@/settings&quot;;</span><br><span class="line">import store from &quot;@/store&quot;;</span><br><span class="line">import &#123;message&#125; from &#x27;ant-design-vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    const handleChange = value =&gt; &#123;</span><br><span class="line">      console.log(`selected $&#123;value&#125;`);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleCategorySelectChange = (value) =&gt; &#123;</span><br><span class="line">      // 切换主机类别的回调处理</span><br><span class="line">      console.log(value)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const formRef = ref();</span><br><span class="line">    const HostCategoryFromVisible = ref(false);</span><br><span class="line">    const hostList = reactive(&#123;</span><br><span class="line">      data: [</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 1,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;数据库服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;izbp13e05jqwodd605vm3gz&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;47.58.131.12&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 2,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;数据库服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;iZbp1a3jw4l12ho53ivhkkZ&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;12.18.125.22&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 3,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;缓存服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;iZbp1b1xqfqw257gs563k2iZ&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;12.19.135.130&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;id&#x27;: 4,</span><br><span class="line">          &#x27;category_name&#x27;: &#x27;缓存服务器&#x27;,</span><br><span class="line">          &#x27;name&#x27;: &#x27;iZbp1b1jw4l01ho53muhkkZ&#x27;,</span><br><span class="line">          &#x27;ip_addr&#x27;: &#x27;47.98.101.89&#x27;,</span><br><span class="line">          &#x27;port&#x27;: 22,</span><br><span class="line">          &#x27;remark&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">    const categoryList = reactive(&#123;</span><br><span class="line">      data: [</span><br><span class="line">        &#123;&#x27;id&#x27;: 1, &#x27;name&#x27;: &#x27;数据库服务&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;id&#x27;: 2, &#x27;name&#x27;: &#x27;缓存服务&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;id&#x27;: 3, &#x27;name&#x27;: &#x27;web服务&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;id&#x27;: 4, &#x27;name&#x27;: &#x27;静态文件存储服务&#x27;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const hostForm = reactive(&#123;</span><br><span class="line">      labelCol: &#123;span: 6&#125;,</span><br><span class="line">      wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">      other: &#x27;&#x27;,</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: &#x27;&#x27;,</span><br><span class="line">        category: &quot;&quot;,</span><br><span class="line">        ip_addr: &#x27;&#x27;,</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        port: &#x27;&#x27;,</span><br><span class="line">        remark: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入主机名称&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入连接密码&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        category: [</span><br><span class="line">          &#123;required: true, message: &#x27;请选择类别&#x27;, trigger: &#x27;change&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        username: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        ip_addr: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入连接地址&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;max: 15, message: &#x27;长度最大15位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        port: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入端口号&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;max: 5, message: &#x27;长度最大5位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    let validateName = async (_rule, value) =&gt; &#123;</span><br><span class="line">      if (value === &#x27;&#x27;) &#123;</span><br><span class="line">        return Promise.reject(&#x27;请输入类别名称&#x27;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return Promise.resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    const hostCategoryForm = reactive(&#123;</span><br><span class="line">      labelCol: &#123;span: 6&#125;,</span><br><span class="line">      wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">      other: &#x27;&#x27;,</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [&#123;</span><br><span class="line">          required: true,</span><br><span class="line">          message: &#x27;请输入类别名称&#x27;,</span><br><span class="line">          validator: validateName,</span><br><span class="line">          trigger: &#x27;blur&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const layout = &#123;</span><br><span class="line">      labelCol: &#123;</span><br><span class="line">        span: 4,</span><br><span class="line">      &#125;,</span><br><span class="line">      wrapperCol: &#123;</span><br><span class="line">        span: 14,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleFinish = values =&gt; &#123;</span><br><span class="line">      console.log(values, hostForm);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleFinishFailed = errors =&gt; &#123;</span><br><span class="line">      console.log(errors);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const resetForm = () =&gt; &#123;</span><br><span class="line">      formRef.value.resetFields();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleValidate = (...args) =&gt; &#123;</span><br><span class="line">      console.log(args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const hostFormVisible = ref(false);</span><br><span class="line"></span><br><span class="line">    const showHostModal = () =&gt; &#123;</span><br><span class="line">      hostFormVisible.value = true;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const onHostFormSubmit = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      // 将数据提交到后台进行保存，但是先进行连接校验，验证没有问题，再保存</span><br><span class="line"></span><br><span class="line">      const formData = new FormData();</span><br><span class="line">      for (let attr in hostForm.form) &#123;</span><br><span class="line">        formData.append(attr, hostForm.form[attr])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      axios.post(`$&#123;settings.host&#125;/host/`, formData, &#123;</span><br><span class="line">            headers: &#123;</span><br><span class="line">              Authorization: store.getters.token,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ).then((response) =&gt; &#123;</span><br><span class="line">        console.log(&quot;response&gt;&gt;&gt;&quot;, response)</span><br><span class="line">        hostList.data.unshift(response.data)</span><br><span class="line"></span><br><span class="line">        // 清空</span><br><span class="line">        resetForm()</span><br><span class="line">        hostFormVisible.value = false; // 关闭对话框</span><br><span class="line">        message.success(&#x27;成功添加主机信息！&#x27;)</span><br><span class="line"></span><br><span class="line">      &#125;).catch((response) =&gt; &#123;</span><br><span class="line">        message.error(response.data)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const deleteHost = record =&gt; &#123;</span><br><span class="line">      console.log(record);</span><br><span class="line">      axios.delete(`$&#123;settings.host&#125;/host/$&#123;record.id&#125;`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        let index = hostList.data.indexOf(record)</span><br><span class="line">        hostList.data.splice(index, 1);</span><br><span class="line"></span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        message.error(&#x27;删除主机失败！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    const showHostCategoryFormModal = () =&gt; &#123;</span><br><span class="line">      // 显示添加主机类别的表单窗口</span><br><span class="line">      HostCategoryFromVisible.value = true</span><br><span class="line">    &#125;</span><br><span class="line">    const hostCategoryFormCancel = () =&gt; &#123;</span><br><span class="line">      // 添加主机类别的表单取消</span><br><span class="line">      hostCategoryForm.form.name = &quot;&quot;; // 清空表单内容</span><br><span class="line">      HostCategoryFromVisible.value = false // 关闭对话框</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const onHostCategoryFromSubmit = () =&gt; &#123;</span><br><span class="line">      // 添加主机类别的表单提交处理</span><br><span class="line">      // 将数据提交到后台进行保存，但是先进行连接校验，验证没有问题，再保存</span><br><span class="line">      axios.post(`$&#123;settings.host&#125;/host/category`, hostCategoryForm.form, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        message.success(&#123;</span><br><span class="line">          content: &quot;创建主机类别成功!&quot;,</span><br><span class="line">          duration: 1,</span><br><span class="line">        &#125;).then(() =&gt; &#123;</span><br><span class="line">          console.log(&quot;response:::&quot;, response)</span><br><span class="line">          categoryList.data.unshift(response.data)</span><br><span class="line">          hostCategoryFormCancel()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const get_host_list = () =&gt; &#123;</span><br><span class="line">      // 获取主机类别列表</span><br><span class="line"></span><br><span class="line">      axios.get(`$&#123;settings.host&#125;/host`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        hostList.data = response.data</span><br><span class="line"></span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        message.error(&#x27;无法获取主机类别列表信息！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    const get_category_list = () =&gt; &#123;</span><br><span class="line">      // 获取主机类别列表</span><br><span class="line">      axios.get(`$&#123;settings.host&#125;/host/category`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        categoryList.data = response.data</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        message.error(&#x27;无法获取主机类别列表信息！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取主机列表</span><br><span class="line">    get_host_list()</span><br><span class="line">    get_category_list()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      selectHostCategory: ref(&#x27;yuan&#x27;),</span><br><span class="line">      hostForm,</span><br><span class="line">      formRef,</span><br><span class="line">      layout,</span><br><span class="line">      HostCategoryFromVisible,</span><br><span class="line">      handleCategorySelectChange,</span><br><span class="line">      handleFinishFailed,</span><br><span class="line">      handleFinish,</span><br><span class="line">      resetForm,</span><br><span class="line">      handleValidate,</span><br><span class="line">      hostFormVisible,</span><br><span class="line">      showHostModal,</span><br><span class="line">      onHostFormSubmit,</span><br><span class="line">      deleteHost,</span><br><span class="line">      showHostCategoryFormModal,</span><br><span class="line">      hostCategoryForm,</span><br><span class="line">      hostCategoryFormCancel,</span><br><span class="line">      onHostCategoryFromSubmit,</span><br><span class="line">      hostFormColumns: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;类别&#x27;,</span><br><span class="line">          dataIndex: &#x27;category_name&#x27;,</span><br><span class="line">          key: &#x27;category_name&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;主机名称&#x27;,</span><br><span class="line">          dataIndex: &#x27;name&#x27;,</span><br><span class="line">          key: &#x27;name&#x27;,</span><br><span class="line">          sorter: true,</span><br><span class="line">          width: 230</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;连接地址&#x27;,</span><br><span class="line">          dataIndex: &#x27;ip_addr&#x27;,</span><br><span class="line">          key: &#x27;ip_addr&#x27;,</span><br><span class="line">          ellipsis: true,</span><br><span class="line">          sorter: true,</span><br><span class="line">          width: 150</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;端口&#x27;,</span><br><span class="line">          dataIndex: &#x27;port&#x27;,</span><br><span class="line">          key: &#x27;port&#x27;,</span><br><span class="line">          ellipsis: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;备注信息&#x27;,</span><br><span class="line">          dataIndex: &#x27;remark&#x27;,</span><br><span class="line">          key: &#x27;remark&#x27;,</span><br><span class="line">          ellipsis: true</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;操作&#x27;,</span><br><span class="line">          key: &#x27;action&#x27;,</span><br><span class="line">          width: 200,</span><br><span class="line">          dataIndex: &quot;action&quot;,</span><br><span class="line">          scopedSlots: &#123;customRender: &#x27;action&#x27;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      hostList,</span><br><span class="line">      categoryList,</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220623184711719-5981232.png" alt="image-20220623184711719"></p>
<p><img src="assets/image-20220623184853799-5981335.png" alt="image-20220623184853799"></p>
<h3 id="4-1-4、ssh与paramiko模块">4.1.4、ssh与paramiko模块</h3>
<h4 id="（1）ssh命令">（1）ssh命令</h4>
<p>ssh命令是openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器，实现对服务器的远程管理。</p>
<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p>
<p>SSH(远程连接工具)连接原理：ssh服务是一个守护进程(demon)，系统后台监听客户端的连接，ssh服务端的进程名为sshd,负责实时监听客户端的请求(IP 22端口)，包括公共秘钥等交换等信息。</p>
<p>ssh服务端由2部分组成： openssh(提供ssh服务) openssl(提供加密的程序)</p>
<blockquote>
<ol>
<li>检查主机上有没有安装SSH服务，使用命令：ssh 若提示命令未找到，则需要安装ssh服务；步骤如下：输入sudo apt-get update命令以实现更新Ubuntu系统–&gt;输入sudo apt-get install openssh-server命令以安装ssh 若输出ssh命令的使用说明，则代表已经安装了。</li>
<li>检查主机上有没有启动SSH服务，使用命令：service –status-all | grep ssh 若服务已经启动的话，可以看到[+] ssh 若服务还没启动的话，可以看到[-] ssh</li>
<li>启动ssh服务，使用命令sudo service sshd start</li>
</ol>
</blockquote>
<p>SSH远程登录之口令登录</p>
<blockquote>
<p><code>ssh 用户名@IP地址 -p 端口号 </code></p>
<p>SSH的默认端口是22</p>
</blockquote>
<p><img src="assets/image-20220413161739973-16498378612653.png" alt="image-20220413161739973"></p>
<p><img src="assets/image-20220413162104970-16498380659204.png" alt="image-20220413162104970"></p>
<h4 id="（2）paramiko模块">（2）paramiko模块</h4>
<p>Paramiko是SSHv2协议的Python（2.7，3.4+）实现，同时提供了客户端和服务器功能。尽管Paramiko利用Python C扩展进行了低级加密（<a href="https://cryptography.io/">Cryptography</a>），但它本身是围绕SSH网络概念的纯Python接口，通过paramiko我们可以完成远程主机连接，指令执行、上传下载文件等操作。下面学习具体用法</p>
<p>官方网址： <a href="http://www.paramiko.org/">http://www.paramiko.org/</a></p>
<p>详细api接口文档：<a href="http://docs.paramiko.org/en/stable/">http://docs.paramiko.org/en/stable/</a></p>
<blockquote>
<ul>
<li>SSHClient的作用类似于Linux的ssh命令，是对SSH会话的封装，该类封装了传输(Transport)，通道(Channel)及SFTPClient建立的方法(open_sftp)，通常用于执行远程命令。</li>
<li>SFTPClient的作用类似与Linux的sftp命令，是对SFTP客户端的封装，用以实现远程文件操作，如文件上传、下载、修改文件权限等操作。</li>
</ul>
</blockquote>
<p>ssh连接并执行指令，我们使用paramiko，paramiko依赖于pycrypto模块，所以我们先安装pycrypto</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pycrypto</span><br><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure>
<p>Paramiko中的几个概念：</p>
<ul>
<li>Client：ssh客户端短连接模式</li>
<li>Transport：可以建立ssh会话长连接模式
<ul>
<li>Channel：是一种类Socket，一种安全的SSH传输通道;</li>
<li>Transport：是一种加密的会话，使用时会同步创建了一个加密的Tunnels(通道)，这个Tunnels叫做Channel;需要open_session来完成长连接对话。</li>
<li>Session：是client与Server保持连接的对象，用connect()/start_client()/start_server()开始会话。</li>
</ul>
</li>
</ul>
<p>示例1： client模式，直接执行指令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> AuthenticationException</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 通过parammiko创建一个ssh短连接客户端实例对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 自动在本机第一次连接远程服务器时，记录主机指纹</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 直接密码远程连接的方式</span></span><br><span class="line">        ssh.connect(hostname=<span class="string">&#x27;&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;&#x27;</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 注意，如果你测试某个服务器的连接时，如果你本地已经配置了这个远程服务器的免密登录(公私钥模式)，那么就不能测试出密码是否正确了，因为首先会通过公私钥模式登录，不会使用你的密码的。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 使用秘钥免密登录的方式</span></span><br><span class="line">        <span class="comment"># pkey = PkeyModel.objects.get(name=&#x27;&#x27;).private</span></span><br><span class="line">        <span class="comment"># pkey = RSAKey.from_private_key(StringIO(pkey))</span></span><br><span class="line">        <span class="comment"># ssh.connect(hostname=&#x27;47.98.130.212&#x27;, port=22, username=&#x27;root&#x27;, pkey=pkey, timeout=10)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接成功以后，就可以发送操作指令</span></span><br><span class="line">        <span class="comment"># stdin 输入[本机发送给远程主机的信息]</span></span><br><span class="line">        <span class="comment"># stdout 输出[远程主机返回给本机的信息]</span></span><br><span class="line">        <span class="comment"># stderr 错误</span></span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;ls -la&#x27;</span>)</span><br><span class="line">        <span class="comment"># 读取stdout对象中返回的内容，返回结果bytes类型数据</span></span><br><span class="line">        result = stdout.read()</span><br><span class="line">        <span class="built_in">print</span>( result.decode() )</span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        ssh.close()</span><br><span class="line">    <span class="keyword">except</span> AuthenticationException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e.message)</span><br><span class="line">        <span class="built_in">print</span>(traceback.format_exc())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;连接参数有误，请检查连接信息是否正确！~&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>示例2： transport模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> AuthenticationException</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 通过parammiko创建一个ssh短连接客户端实例对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 自动在本机第一次连接远程服务器时，记录主机指纹</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 直接密码远程连接的方式</span></span><br><span class="line">        ssh.connect(hostname=<span class="string">&#x27;47.98.130.212&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123&#x27;</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 注意，如果你测试某个服务器的连接时，如果你本地已经配置了这个远程服务器的免密登录(公私钥模式)，那么就不能测试出密码是否正确了，因为首先会通过公私钥模式登录，不会使用你的密码的。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 使用秘钥免密登录的方式</span></span><br><span class="line">        <span class="comment"># pkey = PkeyModel.objects.get(name=&#x27;xxxxxxx&#x27;).private</span></span><br><span class="line">        <span class="comment"># pkey = RSAKey.from_private_key(StringIO(pkey))</span></span><br><span class="line">        <span class="comment"># ssh.connect(hostname=&#x27;47.98.130.212&#x27;, port=22, username=&#x27;root&#x27;, pkey=pkey, timeout=10)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 保存本次ssh的连接的回话状态</span></span><br><span class="line">            cli = ssh.get_transport().open_session()</span><br><span class="line">            <span class="comment"># 设置回话超时时间</span></span><br><span class="line">            cli.settimeout(<span class="number">120</span>)</span><br><span class="line">            command = <span class="built_in">input</span>(<span class="string">&quot;请输入您要发送的指令：&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> command == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 发送指令</span></span><br><span class="line">            cli.exec_command(command)</span><br><span class="line">            <span class="comment"># 接受操作指令以后，远程主机返回的结果</span></span><br><span class="line">            stdout = cli.makefile(<span class="string">&quot;rb&quot;</span>, -<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 读取结果并转换编码</span></span><br><span class="line">            content = stdout.read().decode()</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">            <span class="comment"># 关闭连接</span></span><br><span class="line">            ssh.close()</span><br><span class="line">    <span class="keyword">except</span> AuthenticationException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e.message)</span><br><span class="line">        <span class="built_in">print</span>(traceback.format_exc())</span><br></pre></td></tr></table></figure>
<p>远程执行命令<br>
该命令的输入与输出流为标准输入(stdin)、输出(stdout)、错误(stderr)的Python文件对像</p>
<p>命令执行完毕后，通道将关闭，不能再使用。如果您想执行另一个命令，您必须打开一个新频道。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exec_command(command, bufsize=-<span class="number">1</span>, timeout=<span class="literal">None</span>, get_pty=<span class="literal">False</span>, environment=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<blockquote>
<p>command(str类型)，执行的命令串；<br>
bufsize(int类型)，文件缓冲区大小，默认为-1(不限制)<br>
get_pty( term=‘vt100’ , width=80 , height=24 , width_pixels=0 , height_pixels=0 )</p>
</blockquote>
<p>在远程服务器上生成新的交互式shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">invoke_shell(term=<span class="string">&#x27;vt100&#x27;</span>, width=<span class="number">80</span>, height=<span class="number">24</span>, width_pixels=<span class="number">0</span>, height_pixels=<span class="number">0</span>, environment=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>在此频道上请求交互式 shell 会话。如果服务器允许，则通道将直接连接到 shell 的 stdin、stdout 和 stderr。</p>
<p>通常您会在此之前调用get_pyt，在这种情况下，shell 将通过 pty 进行操作，并且通道将连接到 pty 的 stdin 和 stdout。</p>
<p>当shell退出时，通道将被关闭并且不能被重用。如果您想打开另一个 shell，您必须打开一个新频道。</p>
<p>例如：在SSH server端创建一个交互式的shell，且可以按自己的需求配置伪终端，可以在invoke_shell()函数中添加参数配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chan = ssh.invoke_shell()</span><br><span class="line"></span><br><span class="line">chan.send(cmd) <span class="comment">#利用send函数发送cmd到SSH server，添加做回车来执行shell命令（cmd中需要有\n命令才能执行）。注意不同的情况，如果执行完telnet命令后，telnet的换行符是\r\n</span></span><br><span class="line"> chan.recv(bufsize)  <span class="comment">#通过recv函数获取回显</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>一般回显数据较多，需要通过while循环读取回显数据</p>
</blockquote>
<h4 id="（3）基于ssh的主机验证功能">（3）基于ssh的主机验证功能</h4>
<p>创建<code>utils.ssh.py</code>文件，集成ssh相关功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> paramiko.client <span class="keyword">import</span> SSHClient, AutoAddPolicy</span><br><span class="line"><span class="keyword">from</span> paramiko.rsakey <span class="keyword">import</span> RSAKey</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> AuthenticationException, SSHException</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> NoValidConnectionsError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SSHParamiko</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hostname, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, pkey=<span class="literal">None</span>, password=<span class="literal">None</span>, connect_timeout=<span class="number">2</span></span>):</span><br><span class="line">        <span class="keyword">if</span> pkey <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> password <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> SSHException(<span class="string">&#x27;私钥或者密码必须选择传入一个&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.client = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.params = &#123;</span><br><span class="line">            <span class="string">&#x27;hostname&#x27;</span>: hostname,</span><br><span class="line">            <span class="string">&#x27;port&#x27;</span>: port,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">            <span class="string">&#x27;pkey&#x27;</span>: RSAKey.from_private_key(StringIO(pkey)) <span class="keyword">if</span> <span class="built_in">isinstance</span>(pkey, <span class="built_in">str</span>) <span class="keyword">else</span> pkey,</span><br><span class="line">            <span class="string">&#x27;timeout&#x27;</span>: connect_timeout,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测连接并获取连接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_validated</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;self.client=<span class="subst">&#123;self.client&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.client <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 告知当前执行上下文，self.client已经实例化</span></span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;已经建立连接了！！！&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;正在ping通<span class="subst">&#123;self.client&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.client:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 创建客户端连接对象</span></span><br><span class="line">                self.client = SSHClient()</span><br><span class="line">                <span class="comment"># 在本机第一次连接远程主机时记录指纹信息</span></span><br><span class="line">                self.client.set_missing_host_key_policy(AutoAddPolicy)</span><br><span class="line">                <span class="comment"># 建立连接</span></span><br><span class="line">                self.client.connect(**self.params)</span><br><span class="line">            <span class="keyword">except</span> (TimeoutError, NoValidConnectionsError, AuthenticationException) <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在<code>host.serializers.py</code>中添加验证功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.ssh <span class="keyword">import</span> SSHParamiko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostCategoryModelSeiralizer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机分类的序列化器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.HostCategory</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostModelSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机信息的序列化器&quot;&quot;&quot;</span></span><br><span class="line">    password = serializers.CharField(max_length=<span class="number">32</span>, write_only=<span class="literal">True</span>, label=<span class="string">&quot;登录密码&quot;</span>)</span><br><span class="line">    category_name = serializers.CharField(source=<span class="string">&quot;category.name&quot;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Host</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&quot;category_name&quot;</span>, <span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ip_addr&#x27;</span>, <span class="string">&#x27;port&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;当用户添加、编辑主机信息会自动执行这个方法&quot;&quot;&quot;</span></span><br><span class="line">        ip_addr = attrs.get(<span class="string">&#x27;ip_addr&#x27;</span>)</span><br><span class="line">        port = attrs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">        username = attrs.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 基于ssh验证主机信息是否正确</span></span><br><span class="line">        cli = SSHParamiko(ip_addr, port, username, password=<span class="built_in">str</span>(password))</span><br><span class="line">        <span class="keyword">if</span> cli.is_validated():  <span class="comment"># 测试该链接是否能够使用</span></span><br><span class="line">            <span class="keyword">return</span> attrs</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;主机认证失败，用户或密码错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加host记录，如果第一次添加host记录，那么需要我们生成全局的公钥和私钥</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;接受通过验证以后的数据字典:&#x27;</span>, validated_data)</span><br><span class="line">        ip_addr = validated_data.get(<span class="string">&#x27;ip_addr&#x27;</span>)</span><br><span class="line">        port = validated_data.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">        username = validated_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = validated_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 生成公私钥和管理主机的公私钥</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 剔除密码字段，保存host记录</span></span><br><span class="line">        password = validated_data.pop(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        instance = models.Host.objects.create(</span><br><span class="line">            **validated_data</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-2、批量导入主机数据">4.2、批量导入主机数据</h2>
<h3 id="4-2-1、客户端发送excel文件">4.2.1、客户端发送excel文件</h3>
<p>Host.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-row&gt;</span><br><span class="line">    &lt;a-col :span=&quot;6&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;add_host&quot; style=&quot;margin: 15px;&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-button @click=&quot;showHostModal&quot; type=&quot;primary&quot;&gt;</span><br><span class="line">          新建</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; @click=&quot;showExcelModal&quot; style=&quot;margin-left: 20px;&quot;&gt;</span><br><span class="line">          批量导入</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/a-row&gt;</span><br><span class="line">  &lt;a-table :dataSource=&quot;hostList.data&quot; :columns=&quot;hostFormColumns&quot;&gt;</span><br><span class="line">    &lt;template #bodyCell=&quot;&#123; column, text, record &#125;&quot;&gt;</span><br><span class="line">      &lt;template v-if=&quot;column.dataIndex === &#x27;action&#x27;&quot;&gt;</span><br><span class="line">        &lt;a-popconfirm</span><br><span class="line">            v-if=&quot;hostList.data.length&quot;</span><br><span class="line">            title=&quot;Sure to delete?&quot;</span><br><span class="line">            @confirm=&quot;deleteHost(record)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a&gt;Delete&lt;/a&gt;</span><br><span class="line">        &lt;/a-popconfirm&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/a-table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;a-modal v-model:visible=&quot;hostFormVisible&quot; title=&quot;添加主机&quot; @ok=&quot;onHostFormSubmit&quot; @cancel=&quot;resetForm()&quot; :width=&quot;800&quot;&gt;</span><br><span class="line">    &lt;a-form</span><br><span class="line">        ref=&quot;formRef&quot;</span><br><span class="line">        name=&quot;custom-validation&quot;</span><br><span class="line">        :model=&quot;hostForm.form&quot;</span><br><span class="line">        :rules=&quot;hostForm.rules&quot;</span><br><span class="line">        v-bind=&quot;layout&quot;</span><br><span class="line">        @finish=&quot;handleFinish&quot;</span><br><span class="line">        @validate=&quot;handleValidate&quot;</span><br><span class="line">        @finishFailed=&quot;handleFinishFailed&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-form-item label=&quot;主机类别&quot; prop=&quot;zone&quot; name=&quot;category&quot;&gt;</span><br><span class="line">        &lt;a-row&gt;</span><br><span class="line">          &lt;a-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;a-select</span><br><span class="line">                ref=&quot;select&quot;</span><br><span class="line">                v-model:value=&quot;hostForm.form.category&quot;</span><br><span class="line">                @change=&quot;handleCategorySelectChange&quot;</span><br><span class="line"></span><br><span class="line">            &gt;</span><br><span class="line">              &lt;a-select-option :value=&quot;category.id&quot; v-for=&quot;category in categoryList.data&quot; :key=&quot;category.id&quot;&gt;</span><br><span class="line">                &#123;&#123; category.name &#125;&#125;</span><br><span class="line">              &lt;/a-select-option&gt;</span><br><span class="line">            &lt;/a-select&gt;</span><br><span class="line">          &lt;/a-col&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/a-row&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a-form-item has-feedback label=&quot;主机名称&quot; name=&quot;name&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;hostForm.form.name&quot; type=&quot;text&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;a-form-item has-feedback label=&quot;连接地址&quot; name=&quot;username&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-row&gt;</span><br><span class="line">          &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">            &lt;a-input placeholder=&quot;用户名&quot; addon-before=&quot;ssh&quot; v-model:value=&quot;hostForm.form.username&quot; type=&quot;text&quot;</span><br><span class="line">                     autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">          &lt;/a-col&gt;</span><br><span class="line">          &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">            &lt;a-input placeholder=&quot;ip地址&quot; addon-before=&quot;@&quot; v-model:value=&quot;hostForm.form.ip_addr&quot; type=&quot;text&quot;</span><br><span class="line">                     autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">          &lt;/a-col&gt;</span><br><span class="line">          &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">            &lt;a-input placeholder=&quot;端口号&quot; addon-before=&quot;-p&quot; v-model:value=&quot;hostForm.form.port&quot; type=&quot;text&quot;</span><br><span class="line">                     autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">          &lt;/a-col&gt;</span><br><span class="line">        &lt;/a-row&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a-form-item has-feedback label=&quot;连接密码&quot; name=&quot;password&quot;&gt;</span><br><span class="line">        &lt;a-input v-model:value=&quot;hostForm.form.password&quot; type=&quot;password&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a-form-item has-feedback label=&quot;备注信息&quot; name=&quot;remark&quot;&gt;</span><br><span class="line">        &lt;a-textarea placeholder=&quot;请输入主机备注信息&quot; v-model:value=&quot;hostForm.form.remark&quot; type=&quot;text&quot;</span><br><span class="line">                    :auto-size=&quot;&#123; minRows: 3, maxRows: 5 &#125;&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;a-form-item :wrapper-col=&quot;&#123; span: 14, offset: 4 &#125;&quot;&gt;</span><br><span class="line">        &lt;a-button @click=&quot;resetForm&quot;&gt;Reset&lt;/a-button&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line">    &lt;/a-form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/a-modal&gt;</span><br><span class="line">  &lt;a-modal</span><br><span class="line">      :width=&quot;600&quot;</span><br><span class="line">      title=&quot;新建主机类别&quot;</span><br><span class="line">      :visible=&quot;HostCategoryFromVisible&quot;</span><br><span class="line">      @cancel=&quot;hostCategoryFormCancel&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;template #footer&gt;</span><br><span class="line">      &lt;a-button key=&quot;back&quot; @click=&quot;hostCategoryFormCancel&quot;&gt;取消&lt;/a-button&gt;</span><br><span class="line">      &lt;a-button key=&quot;submit&quot; type=&quot;primary&quot; :loading=&quot;loading&quot; @click=&quot;onHostCategoryFromSubmit&quot;&gt;提交&lt;/a-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;a-form-model ref=&quot;hostCategoryRuleForm&quot; v-model:value=&quot;hostCategoryForm.form&quot; :rules=&quot;hostCategoryForm.rules&quot;</span><br><span class="line">                  :label-col=&quot;hostCategoryForm.labelCol&quot; :wrapper-col=&quot;hostCategoryForm.wrapperCol&quot;&gt;</span><br><span class="line">      &lt;a-form-model-item ref=&quot;name&quot; label=&quot;类别名称&quot; prop=&quot;name&quot;&gt;</span><br><span class="line">        &lt;a-row&gt;</span><br><span class="line">          &lt;a-col :span=&quot;24&quot;&gt;</span><br><span class="line">            &lt;a-input placeholder=&quot;请输入主机类别名称&quot; v-model:value=&quot;hostCategoryForm.form.name&quot;/&gt;</span><br><span class="line">          &lt;/a-col&gt;</span><br><span class="line">        &lt;/a-row&gt;</span><br><span class="line">      &lt;/a-form-model-item&gt;</span><br><span class="line">    &lt;/a-form-model&gt;</span><br><span class="line">  &lt;/a-modal&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 批量导入主机 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a-modal v-model:visible=&quot;excelVisible&quot; title=&quot;导入excel批量创建主机&quot; @ok=&quot;onExcelSubmit&quot; @cancel=&quot;excelFormCancel&quot;</span><br><span class="line">             :width=&quot;800&quot;&gt;</span><br><span class="line">      &lt;a-alert type=&quot;info&quot; message=&quot;导入或输入的密码仅作首次验证使用，并不会存储密码。&quot; banner closable/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;a-form-item has-feedback label=&quot;模板下载&quot; help=&quot;请下载使用该模板填充数据后导入&quot;&gt;</span><br><span class="line">          &lt;a download=&quot;主机导入模板.xls&quot;&gt;主机导入模板.xls&lt;/a&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;a-form-item label=&quot;默认密码&quot;</span><br><span class="line">                     help=&quot;如果Excel中密码为空则使用该密码&quot;&gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;default_password&quot; placeholder=&quot;请输入默认主机密码&quot; type=&quot;password&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;a-form-item label=&quot;导入数据&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;clearfix&quot;&gt;</span><br><span class="line">          &lt;a-upload</span><br><span class="line">              :file-list=&quot;fileList&quot;</span><br><span class="line">              name=&quot;file&quot;</span><br><span class="line">              :before-upload=&quot;beforeUpload&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;a-button&gt;</span><br><span class="line">              &lt;upload-outlined&gt;&lt;/upload-outlined&gt;</span><br><span class="line">              Click to Upload</span><br><span class="line">            &lt;/a-button&gt;</span><br><span class="line">          &lt;/a-upload&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/a-modal&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;defineComponent, ref, reactive&#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import settings from &quot;@/settings&quot;;</span><br><span class="line">import store from &quot;@/store&quot;;</span><br><span class="line">import &#123;message&#125; from &#x27;ant-design-vue&#x27;;</span><br><span class="line">import &#123;UploadOutlined&#125; from &#x27;@ant-design/icons-vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    UploadOutlined,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    const handleCategorySelectChange = (value) =&gt; &#123;</span><br><span class="line">      // 切换主机类别的回调处理</span><br><span class="line">      console.log(value)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const formRef = ref();</span><br><span class="line">    const HostCategoryFromVisible = ref(false);</span><br><span class="line">    const default_password = ref(&quot;&quot;);</span><br><span class="line">    const hostList = reactive(&#123;</span><br><span class="line">      data: []</span><br><span class="line">    &#125;)</span><br><span class="line">    const categoryList = reactive(&#123;</span><br><span class="line">      data: []</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const hostForm = reactive(&#123;</span><br><span class="line">      labelCol: &#123;span: 6&#125;,</span><br><span class="line">      wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">      other: &#x27;&#x27;,</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: &#x27;&#x27;,</span><br><span class="line">        category: &quot;&quot;,</span><br><span class="line">        ip_addr: &#x27;&#x27;,</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        port: &#x27;&#x27;,</span><br><span class="line">        remark: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入主机名称&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 30, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入连接密码&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 30, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        category: [</span><br><span class="line">          &#123;required: true, message: &#x27;请选择类别&#x27;, trigger: &#x27;change&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        username: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 30, message: &#x27;长度在3-10位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        ip_addr: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入连接地址&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;max: 30, message: &#x27;长度最大15位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        port: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入端口号&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;max: 5, message: &#x27;长度最大5位&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    let validateName = async (_rule, value) =&gt; &#123;</span><br><span class="line">      if (value === &#x27;&#x27;) &#123;</span><br><span class="line">        return Promise.reject(&#x27;请输入类别名称&#x27;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return Promise.resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    const hostCategoryForm = reactive(&#123;</span><br><span class="line">      labelCol: &#123;span: 6&#125;,</span><br><span class="line">      wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">      other: &#x27;&#x27;,</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        name: [&#123;</span><br><span class="line">          required: true,</span><br><span class="line">          message: &#x27;请输入类别名称&#x27;,</span><br><span class="line">          validator: validateName,</span><br><span class="line">          trigger: &#x27;blur&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在3-10位之间&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const layout = &#123;</span><br><span class="line">      labelCol: &#123;</span><br><span class="line">        span: 4,</span><br><span class="line">      &#125;,</span><br><span class="line">      wrapperCol: &#123;</span><br><span class="line">        span: 14,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleFinish = values =&gt; &#123;</span><br><span class="line">      console.log(values, hostForm);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleFinishFailed = errors =&gt; &#123;</span><br><span class="line">      console.log(errors);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const resetForm = () =&gt; &#123;</span><br><span class="line">      formRef.value.resetFields();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const handleValidate = (...args) =&gt; &#123;</span><br><span class="line">      console.log(args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const hostFormVisible = ref(false);</span><br><span class="line">    const excelVisible = ref(false);</span><br><span class="line"></span><br><span class="line">    const showHostModal = () =&gt; &#123;</span><br><span class="line">      hostFormVisible.value = true;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const onHostFormSubmit = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      // 将数据提交到后台进行保存，但是先进行连接校验，验证没有问题，再保存</span><br><span class="line"></span><br><span class="line">      const formData = new FormData();</span><br><span class="line">      for (let attr in hostForm.form) &#123;</span><br><span class="line">        formData.append(attr, hostForm.form[attr])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      axios.post(`$&#123;settings.host&#125;/host/`, formData, &#123;</span><br><span class="line">            headers: &#123;</span><br><span class="line">              Authorization: store.getters.token,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ).then((response) =&gt; &#123;</span><br><span class="line">        console.log(&quot;response&gt;&gt;&gt;&quot;, response)</span><br><span class="line">        hostList.data.unshift(response.data)</span><br><span class="line"></span><br><span class="line">        // 清空</span><br><span class="line">        resetForm()</span><br><span class="line">        hostFormVisible.value = false; // 关闭对话框</span><br><span class="line">        message.success(&#x27;成功添加主机信息！&#x27;)</span><br><span class="line"></span><br><span class="line">      &#125;).catch((err) =&gt; &#123;</span><br><span class="line">        message.error(&#x27;添加主机失败&#x27;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const deleteHost = record =&gt; &#123;</span><br><span class="line">      console.log(record);</span><br><span class="line">      axios.delete(`$&#123;settings.host&#125;/host/$&#123;record.id&#125;`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        let index = hostList.data.indexOf(record)</span><br><span class="line">        hostList.data.splice(index, 1);</span><br><span class="line"></span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        message.error(&#x27;删除主机失败！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    const showHostCategoryFormModal = () =&gt; &#123;</span><br><span class="line">      // 显示添加主机类别的表单窗口</span><br><span class="line">      HostCategoryFromVisible.value = true</span><br><span class="line">    &#125;</span><br><span class="line">    const hostCategoryFormCancel = () =&gt; &#123;</span><br><span class="line">      // 添加主机类别的表单取消</span><br><span class="line">      hostCategoryForm.form.name = &quot;&quot;; // 清空表单内容</span><br><span class="line">      HostCategoryFromVisible.value = false // 关闭对话框</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const excelFormCancel = () =&gt; &#123;</span><br><span class="line">      excelVisible.value = false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const onHostCategoryFromSubmit = () =&gt; &#123;</span><br><span class="line">      // 添加主机类别的表单提交处理</span><br><span class="line">      // 将数据提交到后台进行保存，但是先进行连接校验，验证没有问题，再保存</span><br><span class="line">      axios.post(`$&#123;settings.host&#125;/host/category`, hostCategoryForm.form, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        message.success(&#123;</span><br><span class="line">          content: &quot;创建主机类别成功!&quot;,</span><br><span class="line">          duration: 1,</span><br><span class="line">        &#125;).then(() =&gt; &#123;</span><br><span class="line">          console.log(&quot;response:::&quot;, response)</span><br><span class="line">          categoryList.data.unshift(response.data)</span><br><span class="line">          hostCategoryFormCancel()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const get_host_list = () =&gt; &#123;</span><br><span class="line">      // 获取主机类别列表</span><br><span class="line"></span><br><span class="line">      axios.get(`$&#123;settings.host&#125;/host`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        hostList.data = response.data</span><br><span class="line"></span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        message.error(&#x27;无法获取主机类别列表信息！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    const get_category_list = () =&gt; &#123;</span><br><span class="line">      // 获取主机类别列表</span><br><span class="line">      axios.get(`$&#123;settings.host&#125;/host/category`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        categoryList.data = response.data</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        message.error(&#x27;无法获取主机类别列表信息！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取主机列表</span><br><span class="line">    get_host_list()</span><br><span class="line">    get_category_list()</span><br><span class="line"></span><br><span class="line">    // 上传excel文件</span><br><span class="line">    const showExcelModal = () =&gt; &#123;</span><br><span class="line">      // 显示批量上传主机的窗口</span><br><span class="line">      excelVisible.value = true</span><br><span class="line">    &#125;</span><br><span class="line">    const handleChange = info =&gt; &#123;</span><br><span class="line">      if (info.file.status !== &#x27;uploading&#x27;) &#123;</span><br><span class="line">        console.log(info.file, info.fileList);</span><br><span class="line">      &#125;</span><br><span class="line">      if (info.file.status === &#x27;done&#x27;) &#123;</span><br><span class="line">        message.success(`$&#123;info.file.name&#125; file uploaded successfully`);</span><br><span class="line">      &#125; else if (info.file.status === &#x27;error&#x27;) &#123;</span><br><span class="line">        message.error(`$&#123;info.file.name&#125; file upload failed.`);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const fileList = ref([]);</span><br><span class="line">    const beforeUpload = (file) =&gt; &#123;</span><br><span class="line">      // 当用户选择上传文件以后，需要手动把当前文件添加到待上传文件列表this.excel_fileList中</span><br><span class="line">      fileList.value = [...fileList.value, file];</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    const onExcelSubmit = () =&gt; &#123;</span><br><span class="line">      // 将数据提交到后台进行保存，但是先进行连接校验，验证没有问题，再保存</span><br><span class="line">      const formData = new FormData();</span><br><span class="line">      console.log(&quot;fileList.value:&quot;, fileList.value)</span><br><span class="line">      fileList.value.forEach(file =&gt; &#123;</span><br><span class="line">        console.log(&quot;&gt;&gt;&gt;&quot;, file)</span><br><span class="line">        formData.append(&#x27;host_excel&#x27;, file);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      axios.post(`$&#123;settings.host&#125;/host/excel_host`, formData, &#123;</span><br><span class="line">            headers: &#123;</span><br><span class="line">              Authorization: store.getters.token,</span><br><span class="line">              &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;, // 上传文件必须设置请求头中的提交内容格式：multipart/form-data</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ).then((response) =&gt; &#123;</span><br><span class="line">        console.log(&quot;response:::&quot;, response)</span><br><span class="line">        console.log(&quot;hostList:::&quot;, hostList)</span><br><span class="line">        excelFormCancel()// 关闭对话框</span><br><span class="line">        fileList.value = []</span><br><span class="line">        hostList.data.push(...response.data.data)</span><br><span class="line">        message.success(&#x27;批量创建主机成功!！&#x27;)</span><br><span class="line"></span><br><span class="line">      &#125;).catch((response) =&gt; &#123;</span><br><span class="line">        message.error(response.data.message)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      beforeUpload,</span><br><span class="line">      onExcelSubmit,</span><br><span class="line">      selectHostCategory: ref(&#x27;yuan&#x27;),</span><br><span class="line">      hostForm,</span><br><span class="line">      formRef,</span><br><span class="line">      layout,</span><br><span class="line">      HostCategoryFromVisible,</span><br><span class="line">      handleCategorySelectChange,</span><br><span class="line">      handleFinishFailed,</span><br><span class="line">      handleFinish,</span><br><span class="line">      resetForm,</span><br><span class="line">      handleValidate,</span><br><span class="line">      hostFormVisible,</span><br><span class="line">      excelVisible,</span><br><span class="line">      showHostModal,</span><br><span class="line">      onHostFormSubmit,</span><br><span class="line">      deleteHost,</span><br><span class="line">      showHostCategoryFormModal,</span><br><span class="line">      hostCategoryForm,</span><br><span class="line">      hostCategoryFormCancel,</span><br><span class="line">      excelFormCancel,</span><br><span class="line">      onHostCategoryFromSubmit,</span><br><span class="line">      showExcelModal,</span><br><span class="line">      default_password,</span><br><span class="line">      fileList,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        authorization: &#x27;authorization-text&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      handleChange,</span><br><span class="line">      hostFormColumns: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;类别&#x27;,</span><br><span class="line">          dataIndex: &#x27;category_name&#x27;,</span><br><span class="line">          key: &#x27;category_name&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;主机名称&#x27;,</span><br><span class="line">          dataIndex: &#x27;name&#x27;,</span><br><span class="line">          key: &#x27;name&#x27;,</span><br><span class="line">          sorter: true,</span><br><span class="line">          width: 230</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;连接地址&#x27;,</span><br><span class="line">          dataIndex: &#x27;ip_addr&#x27;,</span><br><span class="line">          key: &#x27;ip_addr&#x27;,</span><br><span class="line">          ellipsis: true,</span><br><span class="line">          sorter: true,</span><br><span class="line">          width: 150</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;端口&#x27;,</span><br><span class="line">          dataIndex: &#x27;port&#x27;,</span><br><span class="line">          key: &#x27;port&#x27;,</span><br><span class="line">          ellipsis: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;备注信息&#x27;,</span><br><span class="line">          dataIndex: &#x27;remark&#x27;,</span><br><span class="line">          key: &#x27;remark&#x27;,</span><br><span class="line">          ellipsis: true</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;操作&#x27;,</span><br><span class="line">          key: &#x27;action&#x27;,</span><br><span class="line">          width: 200,</span><br><span class="line">          dataIndex: &quot;action&quot;,</span><br><span class="line">          scopedSlots: &#123;customRender: &#x27;action&#x27;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      hostList,</span><br><span class="line">      categoryList,</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220624192147465-6069708-6069777.png" alt="image-20220624192147465"></p>
<h3 id="4-2-2、基于excel批量创建主机">4.2.2、基于excel批量创建主机</h3>
<p><code>host.urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;excel_host&#x27;</span>, views.ExcelHostView.as_view()),</span><br></pre></td></tr></table></figure>
<p><code>host.views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_host_excel_data</span>(<span class="params">io_data, default_password=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从excel中读取主机列表信息</span></span><br><span class="line"><span class="string">    io_data: 主机列表的字节流</span></span><br><span class="line"><span class="string">    default_password: 主机的默认登录密码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载某一个excel文件</span></span><br><span class="line">    wb = load_workbook(io_data)</span><br><span class="line">    <span class="comment"># 获取worksheet对象的两种方式</span></span><br><span class="line">    worksheet = wb.worksheets[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># c1 = worksheet.cell(2, 1)  # 第二行第一列</span></span><br><span class="line">    <span class="comment"># print(&quot;c1 data:::&quot;, c1.value)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询出数据库现有的所有分类数据[ID，name]</span></span><br><span class="line">    <span class="comment"># 由于拿到的是分类名称，所以我们要找到对应名称的分类id，才能去数据库里面存储</span></span><br><span class="line">    category_list = HostCategory.objects.values_list(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主机列表</span></span><br><span class="line">    host_info_list = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> worksheet.iter_rows(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> row[<span class="number">0</span>].value: <span class="keyword">continue</span></span><br><span class="line">        one_row_dict = &#123;&#125;  <span class="comment"># 单个主机信息字典</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> category_data <span class="keyword">in</span> category_list:</span><br><span class="line">            <span class="comment"># print(category_data[1],type(category_data[1]),category,type(category))</span></span><br><span class="line">            <span class="keyword">if</span> category_data[<span class="number">1</span>].strip() == row[<span class="number">0</span>].value:</span><br><span class="line">                one_row_dict[<span class="string">&#x27;category&#x27;</span>] = category_data[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        one_row_dict[<span class="string">&quot;name&quot;</span>] = row[<span class="number">1</span>].value  <span class="comment"># 主机别名</span></span><br><span class="line">        one_row_dict[<span class="string">&#x27;ip_addr&#x27;</span>] = row[<span class="number">2</span>].value  <span class="comment"># 主机地址</span></span><br><span class="line">        one_row_dict[<span class="string">&#x27;port&#x27;</span>] = row[<span class="number">3</span>].value  <span class="comment"># 主机端口号</span></span><br><span class="line">        one_row_dict[<span class="string">&#x27;username&#x27;</span>] = row[<span class="number">4</span>].value  <span class="comment"># 登录账户名</span></span><br><span class="line"></span><br><span class="line">        excel_pwd = row[<span class="number">5</span>].value</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwd = <span class="built_in">str</span>(excel_pwd)  <span class="comment"># 这样强转容易报错，最好捕获一下异常，并记录单元格位置，给用户保存信息时，可以提示用户哪个单元格的数据有问题</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            pwd = default_password</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pwd.strip():</span><br><span class="line">            pwd = default_password</span><br><span class="line"></span><br><span class="line">        one_row_dict[<span class="string">&#x27;password&#x27;</span>] = pwd</span><br><span class="line">        one_row_dict[<span class="string">&#x27;description&#x27;</span>] = row[<span class="number">6</span>].value</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;one_row_dict&quot;</span>, one_row_dict)</span><br><span class="line"></span><br><span class="line">        host_info_list.append(one_row_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 校验主机数据</span></span><br><span class="line">    <span class="comment"># 将做好的主机信息字典数据通过我们添加主机时的序列化器进行校验</span></span><br><span class="line">    res_data = &#123;&#125;  <span class="comment"># 存放上传成功之后需要返回的主机数据和某些错误信息数据</span></span><br><span class="line">    serializers_host_res_data = []</span><br><span class="line">    res_error_data = []</span><br><span class="line">    <span class="keyword">for</span> k, host_data <span class="keyword">in</span> <span class="built_in">enumerate</span>(host_info_list):</span><br><span class="line">        <span class="comment"># 反序列化校验每一个主机信息</span></span><br><span class="line">        serailizer = HostModelSerializers(data=host_data)</span><br><span class="line">        <span class="keyword">if</span> serailizer.is_valid():</span><br><span class="line">            new_host_obj = serailizer.save()</span><br><span class="line">            serializers_host_res_data.append(new_host_obj)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 报错，并且错误信息中应该体验错误的数据位置</span></span><br><span class="line">            res_error_data.append(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">f&#x27;该<span class="subst">&#123;k + <span class="number">1</span>&#125;</span>行数据有误,其他没有问题的数据，已经添加成功了，请求失败数据改完之后，重新上传这个错误数据，成功的数据不需要上传了&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 再次调用序列化器进行数据的序列化，返回给客户端</span></span><br><span class="line">    serializer = HostModelSerializers(instance=serializers_host_res_data, many=<span class="literal">True</span>)</span><br><span class="line">    res_data[<span class="string">&#x27;data&#x27;</span>] = serializer.data</span><br><span class="line">    res_data[<span class="string">&#x27;error&#x27;</span>] = res_error_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExcelHostView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;批量导入主机列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 接受客户端上传的数据</span></span><br><span class="line">        host_excel = request.FILES.get(<span class="string">&quot;host_excel&quot;</span>)</span><br><span class="line">        default_password = request.data.get(<span class="string">&quot;default_password&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;host_excel:::&quot;</span>, host_excel, <span class="built_in">type</span>(host_excel))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;default_password:::&quot;</span>, default_password, <span class="built_in">type</span>(default_password))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 把上传文件全部写入到字节流，就不需要保存到服务端硬盘了。</span></span><br><span class="line">        io_data = BytesIO()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> host_excel:</span><br><span class="line">            io_data.write(line)</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        data = read_host_excel_data(io_data, default_password)</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-3、consoles功能">4.3、consoles功能</h2>
<h3 id="4-3-1、免密登陆">4.3.1、免密登陆</h3>
<p>前面我们已经完成了主机列表展示和添加了，我们实现添加主机时，新添加主机需要填写连接主机的用户名和密码，我们接下来就需要通过密码来进行主机连接验证，如果用户名和密码没有问题，那么添加到主机列表中，以后对这个主机的操作都能够完成免密操作，所以我们有两件事情要做：</p>
<p>1、在添加主机信息时连接一次远程主机</p>
<p>2、配置公私钥进行免密登录</p>
<p><img src="assets/image-20210116154703129-6570800-6570802.png" alt="image-20210116154703129"></p>
<p><code>host.models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> uric_api.utils.models <span class="keyword">import</span> BaseModel, models</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.ssh <span class="keyword">import</span> SSHParamiko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostCategory</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机类别&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;host_category&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;主机类别&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name  <span class="comment"># 取消提示文字中关于英文复数+s的情况</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Host</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="comment"># 真正在数据库中的字段实际上叫 category_id，而category则代表了关联的哪个分类模型对象</span></span><br><span class="line">    category = models.ForeignKey(<span class="string">&#x27;HostCategory&#x27;</span>, on_delete=models.DO_NOTHING, verbose_name=<span class="string">&#x27;主机类别&#x27;</span>, related_name=<span class="string">&#x27;hc&#x27;</span>,</span><br><span class="line">                                 null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    ip_addr = models.CharField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, max_length=<span class="number">500</span>, verbose_name=<span class="string">&#x27;连接地址&#x27;</span>)</span><br><span class="line">    port = models.IntegerField(verbose_name=<span class="string">&#x27;端口&#x27;</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;登录用户&#x27;</span>)</span><br><span class="line">    users = models.ManyToManyField(User)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;host&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;主机信息&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">&#x27;:&#x27;</span> + self.ip_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局密钥和共钥，所有用户都使用这个一对</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PkeyModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">500</span>, unique=<span class="literal">True</span>)  <span class="comment"># 名称</span></span><br><span class="line">    private = models.TextField(verbose_name=<span class="string">&quot;私钥&quot;</span>)</span><br><span class="line">    public = models.TextField(verbose_name=<span class="string">&quot;公钥&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Pkey <span class="subst">&#123;self.name&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>数据库迁移。</p>
<p>对PkeyModel的操作，我们简单封装2个方法用于存储和读取公私钥，方便后续操作</p>
<p>创建<code>uric/utils/key.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"><span class="keyword">from</span> host.models <span class="keyword">import</span> PkeyModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PkeyManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    keys = (<span class="string">&#x27;public_key&#x27;</span>, <span class="string">&#x27;private_key&#x27;</span>,)</span><br><span class="line">    <span class="comment"># 由于我们可能经常会执行这个get操作，所以我们使用了django的缓存机制，对方法的结果进行缓存，</span></span><br><span class="line">    <span class="comment"># 第二次调用 get()方法 时，并没有真正执行方法，而是直接返回缓存的结果，</span></span><br><span class="line">    <span class="comment"># 参数maxsize为最多缓存的次数，如果为None，则无限制，设置为2n时，性能最佳</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line"><span class="meta">    @lru_cache(<span class="params">maxsize=<span class="number">64</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">cls, name</span>):</span><br><span class="line">        info = PkeyModel.objects.<span class="built_in">filter</span>(name=name).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> info:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">f&#x27;没有这个 <span class="subst">&#123;name!r&#125;</span> 秘钥对&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 以元组格式，返回公私钥</span></span><br><span class="line">        <span class="keyword">return</span> (info.private, info.public)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">cls, name, private_key, public_key, description=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;保存公私钥&quot;&quot;&quot;</span></span><br><span class="line">        PkeyModel.objects.update_or_create(name=name, defaults=&#123;</span><br><span class="line">            <span class="string">&#x27;private&#x27;</span>: private_key,</span><br><span class="line">            <span class="string">&#x27;public&#x27;</span>: public_key,</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: description</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p><code>utils.ssh</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> paramiko.client <span class="keyword">import</span> SSHClient, AutoAddPolicy</span><br><span class="line"><span class="keyword">from</span> paramiko.rsakey <span class="keyword">import</span> RSAKey</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> AuthenticationException, SSHException</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> NoValidConnectionsError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SSHParamiko</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hostname, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, pkey=<span class="literal">None</span>, password=<span class="literal">None</span>, connect_timeout=<span class="number">3</span></span>):</span><br><span class="line">        <span class="keyword">if</span> pkey <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> password <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> SSHException(<span class="string">&#x27;私钥或者密码必须选择传入一个&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.client = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.params = &#123;</span><br><span class="line">            <span class="string">&#x27;hostname&#x27;</span>: hostname,</span><br><span class="line">            <span class="string">&#x27;port&#x27;</span>: port,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">            <span class="string">&#x27;pkey&#x27;</span>: RSAKey.from_private_key(StringIO(pkey)) <span class="keyword">if</span> <span class="built_in">isinstance</span>(pkey, <span class="built_in">str</span>) <span class="keyword">else</span> pkey,</span><br><span class="line">            <span class="string">&#x27;timeout&#x27;</span>: connect_timeout,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测连接并获取连接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_connected_client</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.client <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 告知当前执行上下文，self.client已经实例化</span></span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;已经建立连接了！！！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.client:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 创建客户端连接对象</span></span><br><span class="line">                self.client = SSHClient()</span><br><span class="line">                <span class="comment"># 在本机第一次连接远程主机时记录指纹信息</span></span><br><span class="line">                self.client.set_missing_host_key_policy(AutoAddPolicy)</span><br><span class="line">                <span class="comment"># 建立连接: 口令密码或者密钥</span></span><br><span class="line">                self.client.connect(**self.params)</span><br><span class="line">            <span class="keyword">except</span> (TimeoutError, NoValidConnectionsError, AuthenticationException) <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.client</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">        <span class="comment"># 生成公私钥键值对</span></span><br><span class="line">        iodata = StringIO()</span><br><span class="line">        key = RSAKey.generate(<span class="number">2048</span>)  <span class="comment"># 生成长度为2024的秘钥对</span></span><br><span class="line">        key.write_private_key(iodata)</span><br><span class="line">        <span class="comment"># 返回值是一个元祖，两个成员分别是私钥和公钥</span></span><br><span class="line">        <span class="keyword">return</span> iodata.getvalue(), <span class="string">&#x27;ssh-rsa &#x27;</span> + key.get_base64()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将公钥上传到对应主机</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload_key</span>(<span class="params">self, public_key</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;self.client:::&quot;</span>, self.client)</span><br><span class="line">        <span class="comment"># 700 是文档拥有可读可写可执行，同一组用户或者其他用户都不具有操作权限</span></span><br><span class="line">        <span class="comment"># 600 是文件拥有者可读可写，不可执行，同一组用户或者其他用户都不具有操作权限</span></span><br><span class="line">        cmd = <span class="string">f&#x27;mkdir -p -m 700 ~/.ssh &amp;&amp; \</span></span><br><span class="line"><span class="string">            echo <span class="subst">&#123;public_key!r&#125;</span> &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; \</span></span><br><span class="line"><span class="string">            chmod 600 ~/.ssh/authorized_keys&#x27;</span></span><br><span class="line">        code, out = self.execute_cmd(cmd)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;out&quot;</span>, out)</span><br><span class="line">        <span class="keyword">if</span> code != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">f&#x27;添加公钥失败: <span class="subst">&#123;out&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_cmd</span>(<span class="params">self, cmd, timeout=<span class="number">1800</span>, environment=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 设置执行指令过程，一旦遇到错误/异常，则直接退出操作，不再继续执行。</span></span><br><span class="line">        cmd = <span class="string">&#x27;set -e\n&#x27;</span> + cmd</span><br><span class="line">        channel = self.client.get_transport().open_session()</span><br><span class="line">        channel.settimeout(timeout)</span><br><span class="line">        channel.set_combine_stderr(<span class="literal">True</span>)  <span class="comment"># 正确和错误输出都在一个管道对象里面输出出来</span></span><br><span class="line">        channel.exec_command(cmd)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            out_data = channel.makefile(<span class="string">&quot;rb&quot;</span>, -<span class="number">1</span>).read().decode()</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            out_data = channel.makefile(<span class="string">&quot;rb&quot;</span>, -<span class="number">1</span>).read().decode(<span class="string">&quot;GBK&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> channel.recv_exit_status(), out_data</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>序列化器：<code>host.serializers</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.ssh <span class="keyword">import</span> SSHParamiko</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.key <span class="keyword">import</span> PkeyManager</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostCategoryModelSeiralizer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机分类的序列化器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.HostCategory</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostModelSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主机信息的序列化器&quot;&quot;&quot;</span></span><br><span class="line">    password = serializers.CharField(max_length=<span class="number">32</span>, write_only=<span class="literal">True</span>, label=<span class="string">&quot;登录密码&quot;</span>)</span><br><span class="line">    category_name = serializers.CharField(source=<span class="string">&quot;category.name&quot;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Host</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&quot;category_name&quot;</span>, <span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ip_addr&#x27;</span>, <span class="string">&#x27;port&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_public_key</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># todo 生成公私钥和管理主机的公私钥</span></span><br><span class="line">        <span class="comment"># 生成公私钥和管理主机的公私钥</span></span><br><span class="line">        <span class="comment"># 创建公私钥之前，我们先看看之前是否已经创建过公私钥了</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试从数据库中提取公私钥</span></span><br><span class="line">            private_key, public_key = PkeyManager.get(settings.DEFAULT_KEY_NAME)</span><br><span class="line">        <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 没有公私钥存储到数据库中，则生成公私钥</span></span><br><span class="line">            private_key, public_key = self.ssh.gen_key()</span><br><span class="line">            <span class="comment"># 将公钥和私钥保存到数据库中</span></span><br><span class="line">            PkeyManager.<span class="built_in">set</span>(settings.DEFAULT_KEY_NAME, private_key, public_key, <span class="string">&#x27;ssh全局秘钥对&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> public_key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;当用户添加、编辑主机信息会自动执行这个方法&quot;&quot;&quot;</span></span><br><span class="line">        ip_addr = attrs.get(<span class="string">&#x27;ip_addr&#x27;</span>)</span><br><span class="line">        port = attrs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">        username = attrs.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 基于ssh验证主机信息是否正确</span></span><br><span class="line">        self.ssh = SSHParamiko(ip_addr, port, username, password=<span class="built_in">str</span>(password))</span><br><span class="line">        self.client = self.ssh.get_connected_client()</span><br><span class="line">        <span class="keyword">if</span> self.client:  <span class="comment"># 测试该链接是否能够使用</span></span><br><span class="line">            public_key = self.get_public_key()</span><br><span class="line">            <span class="comment"># 上传公钥到服务器中</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;public_key&quot;</span>, public_key)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.ssh.upload_key(public_key)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;添加远程主机失败，请检查输入的主机信息!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> attrs</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;主机认证信息错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加host记录，如果第一次添加host记录，那么需要我们生成全局的公钥和私钥</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;接受通过验证以后的数据字典:&#x27;</span>, validated_data)</span><br><span class="line">        ip_addr = validated_data.get(<span class="string">&#x27;ip_addr&#x27;</span>)</span><br><span class="line">        port = validated_data.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">        username = validated_data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = validated_data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 剔除密码字段，保存host记录</span></span><br><span class="line">        password = validated_data.pop(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        instance = models.Host.objects.create(</span><br><span class="line">            **validated_data</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>settings.dev配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEFAULT_KEY_NAME = <span class="string">&quot;global&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>from django.conf import settings</li>
</ol>
</blockquote>
<p>测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@47.112.179.213</span><br><span class="line">vim ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220701142255065-6656576.png" alt="image-20220701142255065"></p>
<p>远程服务器的authorized_keys 目前为空。</p>
<p>此时Pkeymodel没有记录，添加主机成功后Pkeymodel中生成记录，远程服务器的authorized_keys中也有了记录。</p>
<p>接下来测试是否可以免密登陆</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> AuthenticationException</span><br><span class="line"><span class="keyword">from</span> paramiko.rsakey <span class="keyword">import</span> RSAKey</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 通过parammiko创建一个ssh短连接客户端实例对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 自动在本机第一次连接远程服务器时，记录主机指纹</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 直接密码远程连接的方式</span></span><br><span class="line">        <span class="comment"># ssh.connect(hostname=&#x27;47.112.179.213&#x27;, port=22, username=&#x27;root&#x27;, password=&#x27;Bazinga$yuan&#x27;, timeout=10)</span></span><br><span class="line">        <span class="comment"># 注意，如果你测试某个服务器的连接时，如果你本地已经配置了这个远程服务器的免密登录(公私钥模式)，那么就不能测试出密码是否正确了，因为首先会通过公私钥模式登录，不会使用你的密码的。</span></span><br><span class="line">        <span class="comment"># 2. 使用秘钥免密登录的方式</span></span><br><span class="line">        <span class="comment"># pkey = PkeyModel.objects.get(name=&#x27;&#x27;).private</span></span><br><span class="line">        private_key = <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">        pkey = RSAKey.from_private_key(StringIO(private_key))</span><br><span class="line">        ssh.connect(hostname=<span class="string">&#x27;47.112.179.213&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, pkey=pkey, timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接成功以后，就可以发送操作指令</span></span><br><span class="line">        <span class="comment"># stdin 输入[本机发送给远程主机的信息]</span></span><br><span class="line">        <span class="comment"># stdout 输出[远程主机返回给本机的信息]</span></span><br><span class="line">        <span class="comment"># stderr 错误</span></span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;ls -la&#x27;</span>)</span><br><span class="line">        <span class="comment"># 读取stdout对象中返回的内容，返回结果bytes类型数据</span></span><br><span class="line">        result = stdout.read()</span><br><span class="line">        <span class="built_in">print</span>(result.decode())</span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        ssh.close()</span><br><span class="line">    <span class="keyword">except</span> AuthenticationException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e.message)</span><br><span class="line">        <span class="built_in">print</span>(traceback.format_exc())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;连接参数有误，请检查连接信息是否正确！~&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2、websocket与django-channels">4.3.2、websocket与django-channels</h3>
<h4 id="（1）websocket协议">（1）websocket协议</h4>
<p>http请求的特点：</p>
<blockquote>
<p>基于TCP</p>
<p>基于请求响应</p>
<p>短链接</p>
<p>无状态保存</p>
</blockquote>
<p><code>WebSocket</code>是一种在单个<code>TCP</code>连接上进行全双工通讯的协议。<code>WebSocket</code>允许服务端主动向客户端推送数据。在<code>WebSocket</code>协议中，客户端浏览器和服务器只需要完成一次握手就可以创建持久性的连接，并在浏览器和服务器之间进行双向的数据传输。</p>
<p><img src="assets/ws-6725179.png" alt="ws"></p>
<p>在一个HTTP访问周期里，如果要执行一个长时间任务，为了避免浏览器等待，后台必须使用异步动作。与此同时也要满足实时需求，用户提交了任务后可以随时去访问任务详情页面，在这里用户能够实时地看到任务的执行进度。</p>
<p>针对异步任务处理，我们使用了Celery把任务放到后台执行。Celery 是一个基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理，Celery在处理一个任务的时候，会把这个任务的进度记录在数据库中。</p>
<p>实现任务的后台执行后，下一步就要解决实时地更新进度信息到网页的问题。从上一步可以知道，数据库中已经存在了任务的进度信息，网页直接访问数据库就可以拿到数据。但是数据库中的进度信息更新的速率不固定，如果使用间隔时间比较短的ajax轮询来访问数据库，会产生很多无用请求，造成资源浪费。综合考虑，我们决定使用WebSocket来实现推送任务进度信息的功能。网站是使用Django搭建的，原生的MTV(模型-模板-视图)设计模式只支持Http请求。幸好Django开发团队在过去的几年里也看到实时网络应用的蓬勃发展，发布了Channels，以插件的形式为Django带来了实时能力。下面两张图展示了原生Django与集成Channels的Django。</p>
<p><img src="assets/modb_20210205_6df9aa28-677b-11eb-bca4-5254001c05fe.png" alt="img"></p>
<p>原生Django</p>
<p>Django本身不支持WebSocket，但可以通过集成Channels框架来实现WebSocket</p>
<p>Channels是针对Django项目的一个增强框架，可以使Django不仅支持HTTP协议，还能支持WebSocket，MQTT等多种协议，同时Channels还整合了Django的auth以及session系统方便进行用户管理及认证。</p>
<p><img src="assets/modb_20210205_6e157488-677b-11eb-bca4-5254001c05fe.png" alt="img"></p>
<p>集成Channels的Django</p>
<p>对比两张图可以看出，Channels为Django带来了一些新特性，最明显的就是添加了对WebSocket的支持。Channels最重要的部分也可以看做是任务队列，消息被生产者推到通道，然后传递给监听通道的消费者之一。它与传统的任务队列的主要的区别在于Channels通过网络工作，使生产者和消费者透明地运行在多台机器上，这个网络层就叫做channel layer。Channels推荐使用redis作为它的channel layer backend，但也可以使用其它类型的工具，例如rabbitmq、内存或者IPC。关于Channels的一些基本概念，推荐阅读官方文档。</p>
<p>WebSocket的请求头中重要的字段：</p>
<blockquote>
<p>Connection和Upgrade：表示客户端发起的WebSocket请求</p>
<p>Sec-WebSocket-Version：客户端所使用的WebSocket协议版本号，服务端会确认是否支持该版本号</p>
<p>Sec-WebSocket-Key：一个Base64编码值，由浏览器随机生成，用于升级request WebSocket的响应头中重要的字段</p>
</blockquote>
<p>HTTP/1.1 101 Switching Protocols：切换协议，WebSocket协议通过HTTP协议来建立运输层的TCP连接</p>
<blockquote>
<p>Connection和Upgrade：表示服务端发起的WebSocket响应<br>
Sec-WebSocket-Accept：表示服务器接受了客户端的请求，由Sec-WebSocket-Key计算得来</p>
</blockquote>
<p>WebSocket协议的优点：</p>
<blockquote>
<p>支持双向通信，实时性更强<br>
数据格式比较轻量，性能开销小，通信高效<br>
支持扩展，用户可以扩展协议或者实现自定义的子协议(比如支持自定义压缩算法等)</p>
</blockquote>
<p>WebSocket协议的缺点：</p>
<blockquote>
<p>少部分浏览器不支持，浏览器支持的程度与方式有区别<br>
长连接对后端处理业务的代码稳定性要求更高，后端推送功能相对复杂<br>
成熟的HTTP生态下有大量的组件可以复用，WebSocket较少</p>
</blockquote>
<p>WebSocket的应用场景：</p>
<blockquote>
<p>即时聊天通信，网站消息通知<br>
在线协同编辑，如腾讯文档<br>
多玩家在线游戏，视频弹幕，股票基金实施报价</p>
</blockquote>
<h4 id="（2）channels语法">（2）channels语法</h4>
<p><img src="assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbndvdw==,size_16,color_FFFFFF,t_70-20211121090203572.png" alt="img"></p>
<p>继承<code>WebSocketConsumer</code>的连接。</p>
<p>AuthMiddlewareStack：用于WebSocket认证，继承了Cookie Middleware，SessionMiddleware，SessionMiddleware。django的channels封装了django的auth模块，使用这个配置我们就可以在consumer中通过下边的代码获取到用户的信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">    self.user = self.scope[<span class="string">&quot;user&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>self.scope类似于django中的request，包含了请求的type、path、header、cookie、session、user等等有用的信息</p>
<h4 id="（3）websocket案例">（3）websocket案例</h4>
<p>配置和使用</p>
<blockquote>
<p>channels==2.1.3</p>
<p>channels-redis==2.3.0</p>
<p>注意版本号</p>
</blockquote>
<p>启动 Redis 服务默认使用 6379 端口，Django 将使用该端口连接 Redis 服务。</p>
<p>更新项目配置文件 <a href="http://settings.py">settings.py</a> 中的 INSTALLED_APPS 项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.apps.App01Config&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;channels&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ASGI_APPLICATION = <span class="string">&quot;chat.routing.application&quot;</span></span><br><span class="line"><span class="comment"># WebSocket</span></span><br><span class="line">CHANNEL_LAYERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;channels_redis.core.RedisChannelLayer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CONFIG&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hosts&quot;</span>: [(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>)],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>wsgi.py</code> 同级目录新增文件 <code>routing.py</code>,其作用类型与 <code>urls.py</code> ,用于分发<code>webscoket</code>请求:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> AuthMiddlewareStack</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">from</span> table.consumers <span class="keyword">import</span> TableConsumer</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="comment"># Empty for now (http-&gt;django views is added by default)</span></span><br><span class="line">    <span class="string">&#x27;websocket&#x27;</span>: AuthMiddlewareStack(</span><br><span class="line">        URLRouter([</span><br><span class="line">            path(<span class="string">&#x27;ws/table/&lt;slug:table_id&gt;/&#x27;</span>, TableConsumer),</span><br><span class="line">        ])</span><br><span class="line">    ),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>routing.py</code>路由文件跟<code>django</code>的<code>url.py</code>功能类似，语法也一样，意思就是访问<code>ws/table/</code>都交给TableConsumer处理。</p>
</blockquote>
<p>新增 app 名为 <code>table</code>,在 <code>table</code> 目录下新增 <code>consumers.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> AsyncJsonWebsocketConsumer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoomConsumer</span>(<span class="title class_ inherited__">AsyncJsonWebsocketConsumer</span>):</span><br><span class="line">    room_id = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.room_id = <span class="string">&#x27;room_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.scope[<span class="string">&#x27;url_route&#x27;</span>][<span class="string">&#x27;kwargs&#x27;</span>][<span class="string">&#x27;room_id&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;room_id&quot;</span>, self.room_id)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;self.channel_name&quot;</span>, self.channel_name)</span><br><span class="line">        <span class="comment"># # Join room group</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;将<span class="subst">&#123;self.channel_name&#125;</span>客户端对象添加到组group<span class="subst">&#123;self.room_id&#125;</span>中&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> self.channel_layer.group_add(self.room_id, self.channel_name)</span><br><span class="line">        <span class="keyword">await</span> self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, close_code</span>):</span><br><span class="line">        <span class="comment"># # Leave room group</span></span><br><span class="line">        <span class="keyword">await</span> self.channel_layer.group_discard(self.room_id, self.channel_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Receive message from WebSocket</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">receive_json</span>(<span class="params">self, content, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;::::&quot;</span>, content, <span class="built_in">type</span>(content))</span><br><span class="line">        <span class="comment"># # Send message to room group</span></span><br><span class="line">        self.from_client = <span class="built_in">str</span>(self.scope[<span class="string">&quot;client&quot;</span>])</span><br><span class="line">        <span class="keyword">await</span> self.channel_layer.group_send(self.room_id,</span><br><span class="line">                                            &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>: content, <span class="string">&quot;from_client&quot;</span>: self.from_client&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Receive message from room group</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">message</span>(<span class="params">self, event</span>):</span><br><span class="line">        message = event[<span class="string">&#x27;msg&#x27;</span>]</span><br><span class="line">        <span class="comment"># print(&quot;self.scope&quot;, self.scope)</span></span><br><span class="line">        <span class="comment"># Send message to WebSocket</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;:::&quot;</span>, event[<span class="string">&quot;from_client&quot;</span>] + <span class="string">&quot;:&quot;</span> + message)</span><br><span class="line">        <span class="keyword">await</span> self.send_json(event[<span class="string">&quot;from_client&quot;</span>] + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + message)</span><br></pre></td></tr></table></figure>
<p><code>TableConsumer</code>类中的函数依次用于处理连接、断开连接、接收消息和处理对应类型的消息，其中<code>channel_layer.group_send(self.table, &#123;'type': 'message', 'message': content&#125;)</code>方法，<code>self.table</code> 参数为当前组的组id， <code>&#123;'type': 'message', 'message': content&#125;</code> 部分分为两部分，<code>type</code> 用于指定该消息的类型，根据消息类型调用不同的函数去处理消息，而 <code>message</code> 内为消息主体。</p>
<p>在 <code>table</code> 目录下的 <code>views.py</code> 中新增函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">table</span>(<span class="params">request, table_id</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;table.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;room_name_json&#x27;</span>: table_id</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> table.views <span class="keyword">import</span> table</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">&#x27;table/(\d+)&#x27;</span>, table),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>前端实现WebSocket：</p>
<p>WebSocket对象一个支持四个消息：onopen，onmessage，oncluse和onerror，我们这里用了两个onmessage和onclose</p>
<blockquote>
<p>onopen： 当浏览器和websocket服务端连接成功后会触发onopen消息</p>
<p>onerror： 如果连接失败，或者发送、接收数据失败，或者数据处理出错都会触发onerror消息</p>
<p>onmessage： 当浏览器接收到websocket服务器发送过来的数据时，就会触发onmessage消息，参数e包含了服务端发送过来的数据</p>
<p>onclose： 当浏览器接收到websocket服务器发送过来的关闭连接请求时，会触发onclose消息载请注明出处。</p>
</blockquote>
<p>在 <code>table</code> 的 <code>templates\table</code> 目录下新增 <code>table.html</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- chat/templates/chat/room.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Chat Room<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;chat-log&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;100&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;chat-message-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;100&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;chat-message-submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Send&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> roomName = &#123;&#123; room_name_json &#125;&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> chatSocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> + <span class="string">&#x27;/ws/table/&#x27;</span> + roomName + <span class="string">&#x27;/&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    chatSocket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chat-log&#x27;</span>).<span class="property">value</span> += (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data).<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">1</span>) + <span class="string">&#x27;\n&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    chatSocket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Chat socket closed unexpectedly&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chat-message-input&#x27;</span>).<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chat-message-input&#x27;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;  <span class="comment">// enter, return</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chat-message-submit&#x27;</span>).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chat-message-submit&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> messageInputDom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#chat-message-input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = messageInputDom.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        chatSocket.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        messageInputDom.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-3、consoles功能">4.3.3、consoles功能</h3>
<h4 id="（1）前端实现">（1）前端实现</h4>
<p>前端的终端效果我们使用xterm.js来完成。</p>
<p>Xterm.js的安装和使用：vue中使用xterm，要在客户端项目根目录下进行安装，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install xterm </span><br></pre></td></tr></table></figure>
<p>xterm.js初始化</p>
<p>在main.js文件中加上如下内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;xterm/css/xterm.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;xterm/lib/xterm&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在Host.vue中，主机列表后面的console对应的地址，实现参数跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;template v-if=&quot;column.dataIndex === &#x27;consoles&#x27;&quot;&gt;</span><br><span class="line">        &lt;router-link :to=&quot;`/uric/console/$&#123;record.id&#125;`&quot;&gt;Console&lt;/router-link&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>设置路由router：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Console</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Console&#x27;</span> </span><br><span class="line">&#123;</span><br><span class="line">                <span class="attr">meta</span>: &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;Console&#x27;</span>,</span><br><span class="line">                    <span class="attr">authenticate</span>: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;console/:host_id&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;Console&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Console</span></span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure>
<p>创建<code>Console.vue</code>组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;console&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;terminal&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;Terminal&#125; from &#x27;xterm&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Console&quot;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.show_terminal()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show_terminal() &#123;</span><br><span class="line">      // 初始化terminal窗口</span><br><span class="line">      let term = new Terminal(&#123;</span><br><span class="line">        rendererType: &quot;canvas&quot;, //渲染类型</span><br><span class="line">        // rows: 40, //行数</span><br><span class="line">        convertEol: true, // 启用时，光标将设置为下一行的开头</span><br><span class="line">        scrollback: 100,   // 终端中的回滚量</span><br><span class="line">        disableStdin: false, //是否应禁用输入。</span><br><span class="line">        cursorStyle: &#x27;underline&#x27;, //光标样式</span><br><span class="line">        cursorBlink: true, //光标闪烁</span><br><span class="line">        theme: &#123;</span><br><span class="line">          foreground: &#x27;#ffffff&#x27;, //字体</span><br><span class="line">          background: &#x27;#060101&#x27;, //背景色</span><br><span class="line">          cursor: &#x27;help&#x27;,//设置光标</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 建立websocket</span><br><span class="line">      let ws = new WebSocket(`ws://api.uric.cn:8000/ws/ssh/$&#123;this.$route.params.id&#125;/`);</span><br><span class="line">      let cmd = &#x27;&#x27;;  // 拼接用户输入的命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 监听接收来自服务端响应的数据</span><br><span class="line">      ws.onmessage = function (event) &#123;</span><br><span class="line">        if (!cmd) &#123;</span><br><span class="line">          //所要执行的操作</span><br><span class="line">          term.write(event.data);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(event.data.split(&#x27;\r\n&#x27;))</span><br><span class="line">          cmd = &#x27;&#x27;</span><br><span class="line">          let res = event.data.replace(event.data.split(&#x27;\r\n&#x27;, 1)[0] + &quot;\r\n&quot;, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">          term.write(&#x27;\r\n&#x27; + res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      term.prompt = () =&gt; &#123;</span><br><span class="line">        term.write(&#x27;\r\n&#x27;);</span><br><span class="line">        // term.write(&#x27;\r\n$ &#x27;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      term.onKey(e =&gt; &#123;</span><br><span class="line">        console.log(e.key)</span><br><span class="line">        const ev = e.domEvent</span><br><span class="line">        const printable = !ev.altKey &amp;&amp; !ev.altGraphKey &amp;&amp; !ev.ctrlKey &amp;&amp; !ev.metaKey</span><br><span class="line"></span><br><span class="line">        if (ev.key === &quot;Enter&quot;) &#123;</span><br><span class="line">          // 按下回车键进行指令的发送</span><br><span class="line">          ws.send(cmd);</span><br><span class="line"></span><br><span class="line">        &#125; else if (ev.key === &quot;BackSpace&quot;) &#123;</span><br><span class="line">          // Do not delete the prompt</span><br><span class="line">          if (term._core.buffer.x &gt; 2) &#123;</span><br><span class="line">            term.write(&#x27;\b \b&#x27;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else if (printable) &#123;</span><br><span class="line">          term.write(e.key);</span><br><span class="line">          cmd += e.key</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      term.open(document.getElementById(&#x27;terminal&#x27;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="assets/image-20220703093603883-6812165.png" alt="image-20220703093603883"></p>
<blockquote>
<p>top命令</p>
</blockquote>
<h4 id="（2）-后端实现">（2） 后端实现</h4>
<p>django没有原生支持的websocket模块，所以我们通过dwebsocket或者channels来完成。</p>
<p>安装channels</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install channels==<span class="number">2.3</span><span class="number">.1</span></span><br><span class="line">pip install channels-redis==<span class="number">2.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>配置channel</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">   ...</span><br><span class="line">   <span class="string">&#x27;channels&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置channel的通道层</span></span><br><span class="line">CHANNEL_LAYERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;channels_redis.core.RedisChannelLayer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CONFIG&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hosts&quot;</span>: [(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>)],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在host应用下面创建一个routing.py文件</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">&#x27;uric_api.routing.application&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>uric_api/uric_api/routing.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, ChannelNameRouter</span><br><span class="line"></span><br><span class="line"><span class="comment"># ProtocolTypeRouter 根据不同的请求协议，分发到不同的协议处理系统，如果是websocket协议，那么自动找routing.ws_router进行路由转发，如果是channel，那么通过executors.SSHExecutor路由进行转发，如果是http协议，那么还是按照之前的方式进行分发</span></span><br><span class="line"><span class="keyword">from</span> host <span class="keyword">import</span> ws_urls  <span class="comment"># 这里类似原来的http编写代码时的路由，只是当时的路由信息，填写在了urls,而接下来，我们要编写websocket的路由，则写在routing，模块下</span></span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="string">&#x27;websocket&#x27;</span>: ws_urls.ws_router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>host.ws_urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> URLRouter</span><br><span class="line"><span class="keyword">from</span> .consumer <span class="keyword">import</span> SSHCmdConsumer</span><br><span class="line"><span class="comment"># 由于我们可能会对websocket请求进行一些验证或者身份认证，所以我们在consumer应用下面在创建一个middleware文件，里面可以配置一些认证规则</span></span><br><span class="line">ws_router = URLRouter([</span><br><span class="line">        path(<span class="string">&#x27;ws/ssh/&lt;int:id&gt;/&#x27;</span>, SSHCmdConsumer),</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>
<p><code>host.consumer.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># websocket的视图类代码</span></span><br><span class="line"><span class="comment"># channels中所有的webscoetk视图类，都必须直接或间接继承于WebsocketConsumer</span></span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"><span class="keyword">from</span> host.models <span class="keyword">import</span> Host</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.key <span class="keyword">import</span> PkeyManager</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.ssh <span class="keyword">import</span> SSHParamiko</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SSHCmdConsumer</span>(<span class="title class_ inherited__">WebsocketConsumer</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.<span class="built_in">id</span> = self.scope[<span class="string">&#x27;url_route&#x27;</span>][<span class="string">&#x27;kwargs&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        <span class="comment"># websocket通讯的管道对象</span></span><br><span class="line">        self.ssh_chan = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 这就是基于paramiko连接远程服务器时的ssh操作对象</span></span><br><span class="line">        self.ssh = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_response</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.ssh_chan.recv(<span class="number">64</span> * <span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                self.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.send(data.decode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4 接收客户端发送过来的指令，并发送给主机执行指令</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">receive</span>(<span class="params">self, text_data=<span class="literal">None</span>, bytes_data=<span class="literal">None</span></span>):</span><br><span class="line">        data = text_data <span class="keyword">or</span> bytes_data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;receive:&#x27;</span>, data, <span class="built_in">type</span>(data))</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            self.ssh_chan.send(data + <span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, code</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;websocket断开连接以后，服务端这边也要和远程主机关闭ssh通信&quot;&quot;&quot;</span></span><br><span class="line">        self.ssh_chan.close()</span><br><span class="line">        self.ssh.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Connection close&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 请求来了自动触发父类connect方法，我们继承拓展父类的connect方法，因为我们和客户端建立连接的同时，就可以和客户端想要操作的主机建立一个ssh连接通道。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;connect连接来啦&#x27;</span>)</span><br><span class="line">        self.accept()  <span class="comment"># 建立websocket连接，进行连接的三次握手</span></span><br><span class="line">        self.send(<span class="string">&#x27;Connecting ...\r\n&#x27;</span>)</span><br><span class="line">        host = Host.objects.<span class="built_in">filter</span>(pk=self.<span class="built_in">id</span>).first()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            private_key, public_key = PkeyManager.get(settings.DEFAULT_KEY_NAME)</span><br><span class="line">            <span class="built_in">print</span>(private_key, public_key)</span><br><span class="line">            self.ssh = SSHParamiko(host.ip_addr, host.port, host.username, private_key)</span><br><span class="line">            self.client = self.ssh.get_connected_client()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.send(<span class="string">f&#x27;Exception: <span class="subst">&#123;e&#125;</span>\r\n&#x27;</span>)</span><br><span class="line">            self.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.ssh_chan = self.client.invoke_shell(</span><br><span class="line">            term=<span class="string">&#x27;xterm&#x27;</span>)  <span class="comment"># invoke_shell激活shell终端模式，也就是长连接模式，exec_command()函数是将服务器执行完的结果一次性返回给你；invoke_shell()函数类似shell终端，可以将执行结果分批次返回，所以我们接受数据时需要循环的取数据</span></span><br><span class="line">        self.ssh_chan.transport.set_keepalive(<span class="number">30</span>)  <span class="comment"># 连接中没有任何信息时，该连接能够维持30秒</span></span><br><span class="line">        <span class="comment"># 和主机的连接一旦建立，主机就会将连接信息返回给服务端和主机的连接通道中，并且以后我们还要在这个通道中进行指令发送和指令结果的读取，所以我们开启单独的线程，去连接中一直等待和获取指令执行结果的返回数据</span></span><br><span class="line">        t = Thread(target=self.read_response)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>
<h1>五、批量与定时任务</h1>
<h2 id="5-1、批量命令执行">5.1、批量命令执行</h2>
<h3 id="5-1-1、前端实现">5.1.1、前端实现</h3>
<p><img src="assets/image-20220703005121759-6780682.png" alt="image-20220703005121759"></p>
<p>Ace-editor编辑器:：文档地址： <a href="https://github.com/CarterLi/vue3-ace-editor">https://github.com/CarterLi/vue3-ace-editor</a></p>
<p>客户端根目录下，下载安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue3-ace-editor</span><br></pre></td></tr></table></figure>
<p>在需要引入编辑器插件的组件中先挂载插件，然后再使用，那么我们现在就需要在MultiExec.vue中注册插件。</p>
<p><code>MultiExec.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;multi_exec&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;执行主机：&lt;/h3&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;a-tag closable @close=&quot;close_host(info_index)&quot; v-for=&quot;(info,info_index) in show_host_info&quot; :key=&quot;info.id&quot;&gt;</span><br><span class="line">          &#123;&#123; `$&#123;info.name&#125;($&#123;info.ip_addr&#125;:$&#123;info.port&#125;)` &#125;&#125;</span><br><span class="line">        &lt;/a-tag&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;margin-top: 10px;&quot;&gt;</span><br><span class="line">      &lt;a-button @click=&quot;showModal&quot; icon=&quot;plus&quot;&gt;从主机列表中选择&lt;/a-button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;a-modal v-model:visible=&quot;MultiExecVisible&quot; title=&quot;&quot; @ok=&quot;onMultiExecSubmit&quot; @cancel=&quot;excelFormCancel&quot;</span><br><span class="line">                 :width=&quot;1000&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-form-item label=&quot;主机类别：&quot; :label-col=&quot;formItemLayout.labelCol&quot; :wrapper-col=&quot;formItemLayout.wrapperCol&quot;&gt;</span><br><span class="line">                &lt;a-select style=&quot;width: 160px;&quot; placeholder=&quot;请选择&quot; v-model=&quot;host_form.form.category&quot;</span><br><span class="line">                          @change=&quot;has_change_category&quot;&gt;</span><br><span class="line">                  &lt;a-select-option :value=&quot;value.id&quot; v-for=&quot;(value, index) in categorys&quot; :key=&quot;value.id&quot;&gt;</span><br><span class="line">                    &#123;&#123; value.name &#125;&#125;</span><br><span class="line">                  &lt;/a-select-option&gt;</span><br><span class="line">                &lt;/a-select&gt;</span><br><span class="line">              &lt;/a-form-item&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-form-item :label-col=&quot;formItemLayout.labelCol&quot; :wrapper-col=&quot;formItemLayout.wrapperCol&quot; label=&quot;主机别名：&quot;&gt;</span><br><span class="line">                &lt;a-input placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">              &lt;/a-form-item&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">              &lt;a-form-item :label-col=&quot;formItemLayout.labelCol&quot; :wrapper-col=&quot;formItemLayout.wrapperCol&quot; label=&quot;已选：&quot;&gt;</span><br><span class="line">                &lt;span style=&quot;margin-left: 8px&quot;&gt;</span><br><span class="line">                  &lt;template v-if=&quot;hasSelected&quot;&gt;</span><br><span class="line">                    &#123;&#123; `$&#123;selectedRowKeys.length&#125;` &#125;&#125;</span><br><span class="line">                  &lt;/template&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">              &lt;/a-form-item&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">              &lt;a-button type=&quot;primary&quot; icon=&quot;sync&quot; style=&quot;margin-top: 3px;&quot; @click=&quot;refresh_data&quot;&gt;刷新&lt;/a-button&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;a-table</span><br><span class="line">                :columns=&quot;columns&quot;</span><br><span class="line">                :data-source=&quot;data&quot;</span><br><span class="line">                :pagination=&quot;false&quot;</span><br><span class="line">                :rowKey=&quot;record =&gt; record.id&quot;</span><br><span class="line">                :row-selection=&quot;&#123; selectedRowKeys: selectedRowKeys, onChange: onSelectChange &#125;&quot;</span><br><span class="line">            &gt;&lt;/a-table&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/a-modal&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;v-ace-editor</span><br><span class="line">        v-model:value=&quot;content&quot;</span><br><span class="line">        @init=&quot;editorInit&quot;</span><br><span class="line">        lang=&quot;html&quot;</span><br><span class="line">        theme=&quot;chrome&quot;</span><br><span class="line">        style=&quot;height: 200px&quot;/&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;a-button type=&quot;primary&quot; icon=&quot;thunderbolt&quot; @click=&quot;execute_cmd&quot;&gt;开始执行&lt;/a-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;VAceEditor&#125; from &#x27;vue3-ace-editor&#x27;;</span><br><span class="line">import &#x27;ace-builds/src-noconflict/mode-html&#x27;;</span><br><span class="line">import &#x27;ace-builds/src-noconflict/theme-chrome&#x27;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import store from &quot;@/store&quot;;</span><br><span class="line">import &#123;message&#125; from &#x27;ant-design-vue&#x27;;</span><br><span class="line"></span><br><span class="line">const formItemLayout = &#123;</span><br><span class="line">  labelCol: &#123;span: 8&#125;,</span><br><span class="line">  wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">const columns = [</span><br><span class="line">  &#123;</span><br><span class="line">    // slots: &#123;title: &#x27;customTitle&#x27;&#125;,</span><br><span class="line">    scopedSlots: &#123;customRender: &#x27;action&#x27;&#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;类别&#x27;,</span><br><span class="line">    dataIndex: &#x27;category_name&#x27;,</span><br><span class="line">    key: &#x27;category_name&#x27;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;主机名称&#x27;,</span><br><span class="line">    dataIndex: &#x27;name&#x27;,</span><br><span class="line">    key: &#x27;name&#x27;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;连接地址&#x27;,</span><br><span class="line">    dataIndex: &#x27;ip_addr&#x27;,</span><br><span class="line">    key: &#x27;ip_addr&#x27;,</span><br><span class="line">    width: 200,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;端口&#x27;,</span><br><span class="line">    dataIndex: &#x27;port&#x27;,</span><br><span class="line">    key: &#x27;port&#x27;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;备注信息&#x27;,</span><br><span class="line">    dataIndex: &#x27;description&#x27;,</span><br><span class="line">    key: &#x27;description&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;MultiExec&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      formItemLayout,        // 弹窗的首行表单配置信息</span><br><span class="line">      columns,               // 弹窗的表格的每一列数据的配置信息</span><br><span class="line">      show_host_info: [],    // 显示选中的所有主机内容</span><br><span class="line">      MultiExecVisible: false,        // 是否显示主机列表的弹窗</span><br><span class="line">      host_form: &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          category: undefined,// 当前选择的主机分类ID</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      data: [],              // 当前显示表格中的主机列表数据</span><br><span class="line">      categorys: [],         // 主机分类列表</span><br><span class="line">      selectedRowKeys: [],   // 已经勾选的主机ID列表</span><br><span class="line">      selected_host_ids: [], // 选中的主机id列表</span><br><span class="line">      content: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    hasSelected() &#123;</span><br><span class="line">      return this.selectedRowKeys.length &gt; 0;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.get_host_category_list()</span><br><span class="line">    this.get_host_list()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showModal() &#123;</span><br><span class="line">      this.MultiExecVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 选中主机时触发的，selectedRowKeys被选中的主机id列表</span><br><span class="line">    onSelectChange(selectedRowKeys) &#123;</span><br><span class="line">      this.selectedRowKeys = selectedRowKeys;</span><br><span class="line">    &#125;,</span><br><span class="line">    onMultiExecSubmit() &#123;</span><br><span class="line">      this.data.forEach((v, k) =&gt; &#123;</span><br><span class="line">        if (this.selectedRowKeys.includes(v.id)) &#123; // 判断某元素是否在数组中用includes比较合适，不能用in</span><br><span class="line">          this.show_host_info.push(&#123;</span><br><span class="line">            id: v.id,</span><br><span class="line">            name: v.name,</span><br><span class="line">            ip_addr: v.ip_addr,</span><br><span class="line">            port: v.port,</span><br><span class="line">          &#125;)</span><br><span class="line">          this.selected_host_ids.push(v.id);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 关闭弹窗</span><br><span class="line">      this.MultiExecVisible = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    get_host_category_list() &#123;</span><br><span class="line">      // 获取主机类别</span><br><span class="line">      // let token = sessionStorage.token || localStorage.token;</span><br><span class="line">      axios.get(`$&#123;this.$settings.host&#125;/host/category`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then((response) =&gt; &#123;</span><br><span class="line">        this.categorys = response.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    get_host_list(category = null) &#123;</span><br><span class="line">      // 获取主机列表</span><br><span class="line">      let params = &#123;&#125;</span><br><span class="line">      if (category !== null) &#123;</span><br><span class="line">        params.category = category</span><br><span class="line">      &#125;</span><br><span class="line">      // let token = sessionStorage.token || localStorage.token;</span><br><span class="line">      axios.get(`$&#123;this.$settings.host&#125;/host/`, &#123;</span><br><span class="line">        params: params,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then((response) =&gt; &#123;</span><br><span class="line">        this.data = response.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    has_change_category(category) &#123;</span><br><span class="line">      // 切换主机分类时，重新获取主机列表</span><br><span class="line">      this.get_host_list(category)</span><br><span class="line">    &#125;,</span><br><span class="line">    refresh_data() &#123;</span><br><span class="line">      // 刷新数据</span><br><span class="line">      this.host_form.form.category = undefined</span><br><span class="line">      this.get_host_list();</span><br><span class="line">    &#125;,</span><br><span class="line">    close_host(info_index) &#123;</span><br><span class="line">      // 移除已经勾选的主机信息</span><br><span class="line">      this.show_host_info.splice(info_index, 1);</span><br><span class="line">      let ids_list = this.selected_host_ids.splice(info_index, 1);</span><br><span class="line">      let id_index = this.selectedRowKeys.indexOf(ids_list[0]);</span><br><span class="line">      this.selectedRowKeys.splice(id_index, 1);</span><br><span class="line">    &#125;,</span><br><span class="line">    execute_cmd() &#123;</span><br><span class="line">      // let token = sessionStorage.token || localStorage.token;</span><br><span class="line">      axios.post(`$&#123;this.$settings.host&#125;/mtask/cmd_exec`, &#123;</span><br><span class="line">        host_ids: this.selected_host_ids,</span><br><span class="line">        cmd: this.content,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then((res) =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        message.success(&#x27;批量任务执行成功！&#x27;)</span><br><span class="line"></span><br><span class="line">      &#125;).catch((err) =&gt; &#123;</span><br><span class="line">        message.error(&#x27;批量任务执行失败！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    VAceEditor,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>路由代码，<code>src/router/index.js</code>，代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;multi_exec&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;MultiExec&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">MultiExec</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-1-2、后端实现">5.1.2、后端实现</h3>
<h4 id="（1）创建批量任务应用">（1）创建批量任务应用</h4>
<p>关于批量任务，我们是一个单独的模块，所以我们也创建一个单独的应用来完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python ../../manage.py startapp mtask</span><br></pre></td></tr></table></figure>
<p>配置应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;mtask&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>mtask/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>总路由，<code>uric_api.urls</code>，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;mtask/&#x27;</span>, include(<span class="string">&#x27;mtask.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="（2）获取所有主机信息">（2）获取所有主机信息</h4>
<p>服务端提供主机列表数据</p>
<p>在原来的主机管理的视图集的基础上，增加一个按分类显示数据即可。</p>
<p><code>host/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HostModelViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    serializer_class = HostModelSerializers</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 重写qureyset方法，补充过滤主机列表参数，获取主机列表</span></span><br><span class="line">        category_id = self.request.query_params.get(<span class="string">&quot;category&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        queryset = Host.objects</span><br><span class="line">        <span class="keyword">if</span> category_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            queryset = queryset.<span class="built_in">filter</span>(category_id=category_id)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queryset.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>
<h4 id="（3）执行指令操作">（3）执行指令操作</h4>
<p>后端实现执行指令的api接口</p>
<p><code>mtask/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;cmd_exec&#x27;</span>, views.CmdExecView.as_view()),</span><br></pre></td></tr></table></figure>
<p><code>mtask/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> host.models <span class="keyword">import</span> Host</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.key <span class="keyword">import</span> PkeyManager</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.ssh <span class="keyword">import</span> SSHParamiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CmdExecView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        host_ids = request.data.get(<span class="string">&#x27;host_ids&#x27;</span>)</span><br><span class="line">        cmd = request.data.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;host_ids&quot;</span>, host_ids)</span><br><span class="line">        <span class="keyword">if</span> host_ids <span class="keyword">and</span> cmd:</span><br><span class="line">            exec_host_list = Host.objects.<span class="built_in">filter</span>(id__in=host_ids)</span><br><span class="line">            pkey, _ = PkeyManager.get(settings.DEFAULT_KEY_NAME)  <span class="comment"># 获取ssh秘钥</span></span><br><span class="line">            response_list = []</span><br><span class="line">            <span class="keyword">for</span> host <span class="keyword">in</span> exec_host_list:</span><br><span class="line">                ssh = SSHParamiko(host.ip_addr, host.port, host.username, pkey)</span><br><span class="line">                ssh.get_connected_client()</span><br><span class="line">                <span class="comment"># ssh 远程执行指令</span></span><br><span class="line">                res_code, res_data = ssh.execute_cmd(cmd)</span><br><span class="line">                <span class="comment"># res_code为0表示ok，不为0说明指令执行有问题</span></span><br><span class="line">                response_list.append(&#123;</span><br><span class="line">                    <span class="string">&#x27;host_info&#x27;</span>: &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: host.<span class="built_in">id</span>,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: host.name,</span><br><span class="line">                        <span class="string">&#x27;ip_addr&#x27;</span>: host.ip_addr,</span><br><span class="line">                        <span class="string">&#x27;port&#x27;</span>: host.port,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;res_code&#x27;</span>: res_code,</span><br><span class="line">                    <span class="string">&#x27;res_data&#x27;</span>: res_data,</span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="keyword">return</span> Response(response_list)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;没有该主机或者没有输入指令&#x27;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-2、指令模板">5.2、指令模板</h2>
<h3 id="5-2-1、前端实现">5.2.1、前端实现</h3>
<p><img src="assets/image-20220703151226691-6832348.png" alt="image-20220703151226691"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;multi_exec&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;执行主机：&lt;/h3&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;a-tag closable @close=&quot;close_host(info_index)&quot; v-for=&quot;(info,info_index) in show_host_info&quot; :key=&quot;info.id&quot;&gt;</span><br><span class="line">          &#123;&#123; `$&#123;info.name&#125;($&#123;info.ip_addr&#125;:$&#123;info.port&#125;)` &#125;&#125;</span><br><span class="line">        &lt;/a-tag&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;margin-top: 10px;&quot;&gt;</span><br><span class="line">      &lt;a-button @click=&quot;showModal&quot; icon=&quot;plus&quot;&gt;从主机列表中选择&lt;/a-button&gt;</span><br><span class="line">      &lt;a-button @click=&quot;showModal2&quot;&gt;从执行模板中选择&lt;/a-button&gt;</span><br><span class="line">      &lt;div style=&quot;margin: 20px;&quot;&gt;</span><br><span class="line">        &lt;a-modal v-model:visible=&quot;visible2&quot; title=&quot;选择执行模板&quot; @ok=&quot;handleOk2&quot; width=&quot;960px&quot;&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;a-row&gt;</span><br><span class="line">              &lt;a-col :span=&quot;10&quot;&gt;</span><br><span class="line">                &lt;a-form-item label=&quot;模板类别：&quot; :label-col=&quot;formItemLayout.labelCol&quot;</span><br><span class="line">                             :wrapper-col=&quot;formItemLayout.wrapperCol&quot;&gt;</span><br><span class="line">                  &lt;a-select style=&quot;width: 160px;&quot; placeholder=&quot;请选择&quot; @change=&quot;&quot;&gt;</span><br><span class="line">                  &lt;/a-select&gt;</span><br><span class="line">                &lt;/a-form-item&gt;</span><br><span class="line">              &lt;/a-col&gt;</span><br><span class="line">              &lt;a-col :span=&quot;10&quot;&gt;</span><br><span class="line">                &lt;a-form-item :label-col=&quot;formItemLayout.labelCol&quot; :wrapper-col=&quot;formItemLayout.wrapperCol&quot;</span><br><span class="line">                             label=&quot;模板名称：&quot;&gt;</span><br><span class="line">                  &lt;a-input placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">                &lt;/a-form-item&gt;</span><br><span class="line">              &lt;/a-col&gt;</span><br><span class="line">              &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">                &lt;a-button type=&quot;primary&quot; icon=&quot;sync&quot; style=&quot;margin-top: 3px;&quot; @click=&quot;&quot;&gt;刷新&lt;/a-button&gt;</span><br><span class="line">              &lt;/a-col&gt;</span><br><span class="line">            &lt;/a-row&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;a-table :columns=&quot;tem_columns&quot; :data-source=&quot;tem_data&quot; :rowKey=&quot;record =&gt; record.id&quot;</span><br><span class="line">                     :row-selection=&quot;&#123; radioselectedRow: radioselectedRow, onChange: onSelectChange2,type: &#x27;radio&#x27; &#125;&quot;&gt;</span><br><span class="line">            &lt;/a-table&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/a-modal&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;a-modal v-model:visible=&quot;MultiExecVisible&quot; title=&quot;&quot; @ok=&quot;onMultiExecSubmit&quot; @cancel=&quot;excelFormCancel&quot;</span><br><span class="line">                 :width=&quot;1000&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a-row&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-form-item label=&quot;主机类别：&quot; :label-col=&quot;formItemLayout.labelCol&quot; :wrapper-col=&quot;formItemLayout.wrapperCol&quot;&gt;</span><br><span class="line">                &lt;a-select style=&quot;width: 160px;&quot; placeholder=&quot;请选择&quot; v-model=&quot;host_form.form.category&quot;</span><br><span class="line">                          @change=&quot;has_change_category&quot;&gt;</span><br><span class="line">                  &lt;a-select-option :value=&quot;value.id&quot; v-for=&quot;(value, index) in categorys&quot; :key=&quot;value.id&quot;&gt;</span><br><span class="line">                    &#123;&#123; value.name &#125;&#125;</span><br><span class="line">                  &lt;/a-select-option&gt;</span><br><span class="line">                &lt;/a-select&gt;</span><br><span class="line">              &lt;/a-form-item&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;8&quot;&gt;</span><br><span class="line">              &lt;a-form-item :label-col=&quot;formItemLayout.labelCol&quot; :wrapper-col=&quot;formItemLayout.wrapperCol&quot; label=&quot;主机别名：&quot;&gt;</span><br><span class="line">                &lt;a-input placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">              &lt;/a-form-item&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">              &lt;a-form-item :label-col=&quot;formItemLayout.labelCol&quot; :wrapper-col=&quot;formItemLayout.wrapperCol&quot; label=&quot;已选：&quot;&gt;</span><br><span class="line">                &lt;span style=&quot;margin-left: 8px&quot;&gt;</span><br><span class="line">                  &lt;template v-if=&quot;hasSelected&quot;&gt;</span><br><span class="line">                    &#123;&#123; `$&#123;selectedRowKeys.length&#125;` &#125;&#125;</span><br><span class="line">                  &lt;/template&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">              &lt;/a-form-item&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">            &lt;a-col :span=&quot;4&quot;&gt;</span><br><span class="line">              &lt;a-button type=&quot;primary&quot; icon=&quot;sync&quot; style=&quot;margin-top: 3px;&quot; @click=&quot;refresh_data&quot;&gt;刷新&lt;/a-button&gt;</span><br><span class="line">            &lt;/a-col&gt;</span><br><span class="line">          &lt;/a-row&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;a-table</span><br><span class="line">                :columns=&quot;columns&quot;</span><br><span class="line">                :data-source=&quot;data&quot;</span><br><span class="line">                :pagination=&quot;false&quot;</span><br><span class="line">                :rowKey=&quot;record =&gt; record.id&quot;</span><br><span class="line">                :row-selection=&quot;&#123; selectedRowKeys: selectedRowKeys, onChange: onSelectChange &#125;&quot;</span><br><span class="line">            &gt;&lt;/a-table&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/a-modal&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;v-ace-editor</span><br><span class="line">        v-model:value=&quot;content&quot;</span><br><span class="line">        @init=&quot;editorInit&quot;</span><br><span class="line">        lang=&quot;html&quot;</span><br><span class="line">        theme=&quot;chrome&quot;</span><br><span class="line">        style=&quot;height: 200px&quot;/&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;a-button type=&quot;primary&quot; icon=&quot;thunderbolt&quot; @click=&quot;execute_cmd&quot;&gt;开始执行&lt;/a-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;VAceEditor&#125; from &#x27;vue3-ace-editor&#x27;;</span><br><span class="line">import &#x27;ace-builds/src-noconflict/mode-html&#x27;;</span><br><span class="line">import &#x27;ace-builds/src-noconflict/theme-chrome&#x27;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import store from &quot;@/store&quot;;</span><br><span class="line">import &#123;message&#125; from &#x27;ant-design-vue&#x27;;</span><br><span class="line"></span><br><span class="line">const formItemLayout = &#123;</span><br><span class="line">  labelCol: &#123;span: 8&#125;,</span><br><span class="line">  wrapperCol: &#123;span: 14&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">const columns = [</span><br><span class="line">  &#123;</span><br><span class="line">    // slots: &#123;title: &#x27;customTitle&#x27;&#125;,</span><br><span class="line">    scopedSlots: &#123;customRender: &#x27;action&#x27;&#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;类别&#x27;,</span><br><span class="line">    dataIndex: &#x27;category_name&#x27;,</span><br><span class="line">    key: &#x27;category_name&#x27;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;主机名称&#x27;,</span><br><span class="line">    dataIndex: &#x27;name&#x27;,</span><br><span class="line">    key: &#x27;name&#x27;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;连接地址&#x27;,</span><br><span class="line">    dataIndex: &#x27;ip_addr&#x27;,</span><br><span class="line">    key: &#x27;ip_addr&#x27;,</span><br><span class="line">    width: 200,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;端口&#x27;,</span><br><span class="line">    dataIndex: &#x27;port&#x27;,</span><br><span class="line">    key: &#x27;port&#x27;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: &#x27;备注信息&#x27;,</span><br><span class="line">    dataIndex: &#x27;description&#x27;,</span><br><span class="line">    key: &#x27;description&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const tem_columns = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;模板名称&#x27;,</span><br><span class="line">    dataIndex: &#x27;name&#x27;,</span><br><span class="line">    key: &#x27;name&#x27;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;模板类型&#x27;,</span><br><span class="line">    dataIndex: &#x27;category_name&#x27;,</span><br><span class="line">    key: &#x27;category_name&#x27;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;模板内容&#x27;,</span><br><span class="line">    dataIndex: &#x27;cmd&#x27;,</span><br><span class="line">    key: &#x27;cmd&#x27;,</span><br><span class="line">    width: 200,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;描述信息&#x27;,</span><br><span class="line">    dataIndex: &#x27;description&#x27;,</span><br><span class="line">    key: &#x27;description&#x27;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;MultiExec&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      formItemLayout,        // 弹窗的首行表单配置信息</span><br><span class="line">      columns,               // 弹窗的表格的每一列数据的配置信息</span><br><span class="line">      show_host_info: [],    // 显示选中的所有主机内容</span><br><span class="line">      MultiExecVisible: false,        // 是否显示主机列表的弹窗</span><br><span class="line">      host_form: &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          category: undefined,// 当前选择的主机分类ID</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      data: [],              // 当前显示表格中的主机列表数据</span><br><span class="line">      categorys: [],         // 主机分类列表</span><br><span class="line">      selectedRowKeys: [],   // 已经勾选的主机ID列表</span><br><span class="line">      selected_host_ids: [], // 选中的主机id列表</span><br><span class="line">      visible2: false,</span><br><span class="line">      template_form: &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          category: undefined,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      tem_categorys: [],    // 指令模板分类列表</span><br><span class="line">      tem_data: [],         // 指令模板列表</span><br><span class="line">      radioselectedRow: [], //</span><br><span class="line">      content: &quot;&quot;,</span><br><span class="line">      tem_columns,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">// 计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    hasSelected() &#123;</span><br><span class="line">      return this.selectedRowKeys.length &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.get_host_category_list()</span><br><span class="line">    /this.get_host_list()</span><br><span class="line">    // this.get_templates_category_list()</span><br><span class="line">    // this.get_templates_list()</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showModal() &#123;</span><br><span class="line">      this.MultiExecVisible = true;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    // 选中主机时触发的，selectedRowKeys被选中的主机id列表</span><br><span class="line">    onSelectChange(selectedRowKeys) &#123;</span><br><span class="line">      this.selectedRowKeys = selectedRowKeys;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    onMultiExecSubmit() &#123;</span><br><span class="line">      this.data.forEach((v, k) =&gt; &#123;</span><br><span class="line">        if (this.selectedRowKeys.includes(v.id)) &#123; // 判断某元素是否在数组中用includes比较合适，不能用in</span><br><span class="line">          this.show_host_info.push(&#123;</span><br><span class="line">            id: v.id,</span><br><span class="line">            name: v.name,</span><br><span class="line">            ip_addr: v.ip_addr,</span><br><span class="line">            port: v.port,</span><br><span class="line">          &#125;)</span><br><span class="line">          this.selected_host_ids.push(v.id);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 关闭弹窗</span><br><span class="line">      this.MultiExecVisible = false;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    get_host_category_list() &#123;</span><br><span class="line">      // 获取主机类别</span><br><span class="line">      // let token = sessionStorage.token || localStorage.token;</span><br><span class="line">      axios.get(`$&#123;this.$settings.host&#125;/host/category`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then((response) =&gt; &#123;</span><br><span class="line">        this.categorys = response.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    get_host_list(category = null) &#123;</span><br><span class="line">      // 获取主机列表</span><br><span class="line">      let params = &#123;&#125;</span><br><span class="line">      if (category !== null) &#123;</span><br><span class="line">        params.category = category</span><br><span class="line">      &#125;</span><br><span class="line">      // let token = sessionStorage.token || localStorage.token;</span><br><span class="line">      axios.get(`$&#123;this.$settings.host&#125;/host/`, &#123;</span><br><span class="line">        params: params,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then((response) =&gt; &#123;</span><br><span class="line">        this.data = response.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    has_change_category(category) &#123;</span><br><span class="line">      // 切换主机分类时，重新获取主机列表</span><br><span class="line">      this.get_host_list(category)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    refresh_data() &#123;</span><br><span class="line">      // 刷新数据</span><br><span class="line">      this.host_form.form.category = undefined</span><br><span class="line">      this.get_host_list();</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    close_host(info_index) &#123;</span><br><span class="line">      // 移除已经勾选的主机信息</span><br><span class="line">      this.show_host_info.splice(info_index, 1);</span><br><span class="line">      let ids_list = this.selected_host_ids.splice(info_index, 1);</span><br><span class="line">      let id_index = this.selectedRowKeys.indexOf(ids_list[0]);</span><br><span class="line">      this.selectedRowKeys.splice(id_index, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    execute_cmd() &#123;</span><br><span class="line">      // let token = sessionStorage.token || localStorage.token;</span><br><span class="line">      axios.post(`$&#123;this.$settings.host&#125;/mtask/cmd_exec`, &#123;</span><br><span class="line">        host_ids: this.selected_host_ids,</span><br><span class="line">        cmd: this.content,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then((res) =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        message.success(&#x27;批量任务执行成功！&#x27;)</span><br><span class="line"></span><br><span class="line">      &#125;).catch((err) =&gt; &#123;</span><br><span class="line">        message.error(&#x27;批量任务执行失败！&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    showModal2() &#123;</span><br><span class="line">      this.visible2 = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleOk2(e) &#123;</span><br><span class="line">      let tid = this.radioselectedRow[0]; //选中的模板id值</span><br><span class="line">      // 通过模板id值，找到该模板记录中的cmd值，并赋值给content属性</span><br><span class="line">      this.tem_data.forEach((v, k) =&gt; &#123;</span><br><span class="line">        if (v.id === tid) &#123;</span><br><span class="line">          this.content = v.cmd;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      this.visible2 = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    onSelectChange2(radioselectedRow) &#123;</span><br><span class="line">      // [6, 7, 8, 9]</span><br><span class="line">      console.log(&#x27;&gt;&gt;&gt;&gt;&gt; &#x27;, radioselectedRow);</span><br><span class="line">      this.radioselectedRow = radioselectedRow;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSelectChange2(value) &#123;</span><br><span class="line">      // 切换模板分类</span><br><span class="line">      this.get_templates_list(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    refresh_data2() &#123;</span><br><span class="line">      this.get_templates_list();</span><br><span class="line">    &#125;,</span><br><span class="line">    get_templates_list(category = null) &#123;</span><br><span class="line">      let params = &#123;&#125;</span><br><span class="line">      if (category !== null) &#123;</span><br><span class="line">        params.category = category</span><br><span class="line">      &#125;</span><br><span class="line">      axios.get(`$&#123;this.$settings.host&#125;/mtask/templates`, &#123;</span><br><span class="line">        params: params,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        this.tem_data = response.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    get_templates_category_list() &#123;</span><br><span class="line">      axios.get(`$&#123;this.$settings.host&#125;/mtask/templates/categorys`, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Authorization: &quot;jwt &quot; + store.getters.token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">          .then(response =&gt; &#123;</span><br><span class="line">            this.tem_categorys = response.data;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  components: &#123;</span><br><span class="line">    VAceEditor,</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-2、后端实现">5.2.2、后端实现</h3>
<p>mtask/models.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> uric_api.utils.models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CmdTemplateCategory</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;cmd_template_category&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;模板分类&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CmdTemplate</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    category = models.ForeignKey(<span class="string">&#x27;CmdTemplateCategory&#x27;</span>, on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;模板类别&#x27;</span>)</span><br><span class="line">    cmd = models.TextField(verbose_name=<span class="string">&#x27;模板内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;cmd_template&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;指令模板&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>
<p>数据迁移，终端下在服务端项目根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>添加测试数据，mysql中执行以下SQL语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> uric.cmd_template_category (id, name, is_show, orders, is_deleted, created_time, updated_time, description) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;文件操作&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2021-08-07 20:52:55&#x27;</span>, <span class="string">&#x27;2021-08-07 20:52:55&#x27;</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> uric.cmd_template_category (id, name, is_show, orders, is_deleted, created_time, updated_time, description) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;文件夹操作&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2021-08-07 20:52:55&#x27;</span>, <span class="string">&#x27;2021-08-07 20:52:55&#x27;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> uric.cmd_template (id, name, is_show, orders, is_deleted, created_time, updated_time, description, cmd, category_id) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;列出当前目录下所有文件&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2021-08-07 20:55:45&#x27;</span>, <span class="string">&#x27;2021-08-07 20:55:45&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> uric.cmd_template (id, name, is_show, orders, is_deleted, created_time, updated_time, description, cmd, category_id) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;创建文件&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2021-08-07 20:55:45&#x27;</span>, <span class="string">&#x27;2021-08-07 20:55:45&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;touch index.html&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> uric.cmd_template (id, name, is_show, orders, is_deleted, created_time, updated_time, description, cmd, category_id) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;家目录下创建文件夹&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2021-08-07 20:55:45&#x27;</span>, <span class="string">&#x27;2021-08-07 20:55:45&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;cd /home</span></span><br><span class="line"><span class="string">mkdir uric&#x27;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>mtask/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;cmd_exec&#x27;</span>, views.CmdExecView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;templates&#x27;</span>, views.TemplateView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;templates/categorys&#x27;</span>, views.TemplateCategoryView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>mtask/views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView, CreateAPIView</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CmdTemplate, CmdTemplateCategory</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> CmdTemplateModelSerialzer, CmdTemplateCategoryModelSerialzer</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TemplateView</span>(ListAPIView, CreateAPIView):</span><br><span class="line">    <span class="comment"># 获取所有执行模板</span></span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    queryset = CmdTemplate.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CmdTemplateModelSerialzer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TemplateCategoryView</span>(ListAPIView, CreateAPIView):</span><br><span class="line">    <span class="comment"># 获取执行模板类别</span></span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    queryset = CmdTemplateCategory.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CmdTemplateCategoryModelSerialzer</span><br></pre></td></tr></table></figure>
<p>mtask.serializers，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CmdTemplateCategory, CmdTemplate</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CmdTemplateModelSerialzer</span>(serializers.ModelSerializer):</span><br><span class="line">    category_name = serializers.CharField(source=<span class="string">&quot;category.name&quot;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = CmdTemplate</span><br><span class="line">        fields = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;description&quot;</span>, <span class="string">&quot;category_name&quot;</span>, <span class="string">&quot;category&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CmdTemplateCategoryModelSerialzer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = CmdTemplateCategory</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>编程技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>论文学习 - Bitcoin：A Peer-to-Peer Electronic Cash System（5）</title>
    <url>/2023/04/10/A-Peer-to-Peer-Electronic-Cash-System-5/</url>
    <content><![CDATA[<h1>比特币：一个点对点的电子货币系统</h1>
<h2 id="6-激励">6. 激励</h2>
<p>6 Incentive<br>
By convention, the first transaction in a block is a special transaction that starts a new coin owned by the creator of the block. This adds an incentive for nodes to support the network, and provides a way to initially distribute coins into circulation, since there is no central authority to issue them.<br>
The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation. In our case, it is CPU time and electricity that is expended. The incentive can also be funded with transaction fees. If the output value of a transaction is less than its input value, the difference is a transaction fee that is added to the incentive value of the block containing the transaction. Once a predetermined number of coins have entered circulation, the incentive can transition entirely to transaction fees and be completely inflation free.<br>
The incentive may help encourage nodes to stay honest. If a greedy attacker is able to assemble more CPU power than all the honest nodes, he would have to choose between using it to defraud people by stealing back his payments, or using it to generate new coins. He ought to find it more profitable to play by the rules, such rules that favour him with more new coins than everyone else combined, than to undermine the system and the validity of his own wealth.</p>
<p>我们约定，区块中的第一笔交易是区块创建者开创一枚属于他的新货币的特殊的交易。这就加入了对支持网络的节点的激励，并提供了一种初始分发货币到流通领域的方法，因为这里没有中央机构来发行货币。新货币按固定量稳定地增加就像金矿矿工消耗资源并增加黄金到流通领域一样。对我们而言，消耗的是 CPU 时间和电力激励也可以由交易费充当。如果交易的输出值小于其输入值，差价就作为交易费被加到包含此交易的区块的激励中。一旦预定量的货币进入了流通领域，激励将变为只含有交易费，这样可以完全避免通货膨胀。<br>
激励会有助于鼓励节点保持诚实。如果一个贪心的攻击者有能力聚集比所有诚实节点更多的 CPU 算力，他将面临是以骗回已付款的方式欺诈别人还是使用这些算力生成新货币的抉择。他将发现遵守规则比破坏系统和他自己财产的有效性更有利，因为这些规则准许他获得比所有其他人都多的新货币。</p>
<h2 id="7-回收磁盘空间">7. 回收磁盘空间</h2>
<ol start="7">
<li>Reclaiming Disk Space<br>
Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space. To facilitate this without breaking the block’s hash, transactions are hashed in a Merkle Tree [7][2][5], with only the root included in the block’s hash. Old blocks can then be compacted by stubbing off branches of the tree. The interior hashes do not need to be stored.<br>
<img src="http://cdn.yunminitools.cn/blog/0409Merkle-Tree-en.png" alt=" "><br>
A block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, 80 bytes * 6 * 24 * 365 = 4.2MB per year. With computer systems typically selling with 2GB of RAM as of 2008, and Moore’s Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory.</li>
</ol>
<p>一旦某个货币的最新交易已经被足够多的区块覆盖，这之前的支付交易就可以被丢弃以节省磁盘空间。为便于此而又不破坏区块的哈希值，交易将被哈希进默克尔树 [7][2][5]，只有根节点被纳入到区块的哈希值。老的区块可通过剪除树枝的方式被压缩。树枝内部的哈希不需要被保存。<br>
<img src="http://cdn.yunminitools.cn/blog/0409Merkle-Tree-zh.png" alt=" "><br>
每个不包含交易的区块头大约是 80 bytes。如果每 10 分钟生成一个区块，每年生成80 bytes * 6 * 24 * 365 = 4.2 MB，2008 年在售的典型计算机有 2 GB 内存，并且摩尔定律预测目前每年内存增加 1.2 GB，所以就算区块头一定要存在内存里，存储也不是问题。</p>
<p>【关注点】：</p>
<ul>
<li>If the output value of a transaction is less than its input value，这句话不是太理解，什么情况下会出现？</li>
<li>favour him with more new coins，翻译为 有利于他 获得更多的新币。问题是当到后期新币越来越少的时候，做这个事情是否是就有利可图了？</li>
<li>enough blocks ，多少算足够？</li>
<li>transactions are hashed in a Merkle Tree，为什么这样就可以不改变Hash值？</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>论文学习</tag>
      </tags>
  </entry>
  <entry>
    <title>论文学习 - Bitcoin：A Peer-to-Peer Electronic Cash System（6）</title>
    <url>/2023/04/11/A-Peer-to-Peer-Electronic-Cash-System-6/</url>
    <content><![CDATA[<h1>比特币：一个点对点的电子货币系统</h1>
<h2 id="8-简化的支付验证">8.简化的支付验证</h2>
<p>8.Simplified Payment Verification<br>
It is possible to verify payments without running a full network node. A user only needs to keep a copy of the block headers of the longest proof-of-work chain, which he can get by querying network nodes until he’s convinced he has the longest chain, and obtain the Merkle branch linking the transaction to the block it’s timestamped in. He can’t check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it.<br>
<img src="http://cdn.yunminitools.cn/blog/0410Longest-Proof-of-Work-Chain-En.png" alt=" "><br>
As such, the verification is reliable as long as honest nodes control the network, but is more vulnerable if the network is overpowered by an attacker. While network nodes can verify transactions for themselves, the simplified method can be fooled by an attacker’s fabricated transactions for as long as the attacker can continue to overpower the network. One strategy to protect against this would be to accept alerts from network nodes when they detect an invalid block, prompting the user’s software to download the full block and alerted transactions to<br>
confirm the inconsistency. Businesses that receive frequent payments will probably still want to run their own nodes for more independent security and quicker verification.</p>
<p>不运行一个完整的网络节点也是可以进行支付验证的。用户只需拥有一个最长工作量证明链的区块头副本，他可以通过向其他网络节点查询以确认他拥有了最长的链，并获取链接交易到给交易打时间戳区块的默克尔分支。虽然他自己不能核实这个交易，但如果交易已经链接到链中的某个位置，就说明一个网络节点已经接受了此交易，而其后追加的区块进一步确认网络已经接受了它。<br>
<img src="http://cdn.yunminitools.cn/blog/0410Longest-Proof-of-Work-Chain-Zh.png" alt=" "><br>
同样地，只要诚实节点控制着网络，这种简化验证就是可靠的；如果网络被攻击者控制，简化验证会变得比较脆弱。虽然网络节点可以验证他们自己的交易，但只要攻击者持续控制网络，那么这种简化的方法就可能被攻击者的伪造交易欺骗。一种对策是接受其他网络节点发现一个无效区块时发出的警告，提醒用户软件下载整个区块和被警告的交易来检查一致性。为了更加独立的安全性以及更快的支付确认，收款频繁的公司可能仍需运行他们自己的节点。</p>
<p>【关注点】：</p>
<ul>
<li>向其他网络节点查询以确认他拥有了最长的链, 如何做到？</li>
<li>仍需运行他们自己的节点，是指要运行全节点吗？</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>论文学习</tag>
      </tags>
  </entry>
  <entry>
    <title>一个有趣的AI对话网站</title>
    <url>/2023/04/12/app-myshell-ai/</url>
    <content><![CDATA[<p>分享一个有趣的AI对话网站：<a href="https://app.myshell.ai/">https://app.myshell.ai/</a>，目前可以免费注册，国内访问也无压力，目前有4个角色都可以尝试。<br>
<img src="http://cdn.yunminitools.cn/blog/0412myshellai.png" alt=" "></p>
]]></content>
      <categories>
        <category>有趣资源</category>
      </categories>
      <tags>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title>论文学习 - Bitcoin：A Peer-to-Peer Electronic Cash System（7）</title>
    <url>/2023/04/13/A-Peer-to-Peer-Electronic-Cash-System-7/</url>
    <content><![CDATA[<h1>比特币：一个点对点的电子货币系统</h1>
<h2 id="9-合并和分割货币">9 合并和分割货币</h2>
<p>9 Combining and Splitting Value<br>
Although it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer. To allow value to be split and combined, transactions contain multiple inputs and outputs. Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender.<br>
<img src="http://cdn.yunminitools.cn/blog/0413Transaction-En.png" alt=" "><br>
It should be noted that fan-out, where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction’s history.</p>
<p>尽管单独处理每个货币是可能的，但将一次转账按每一分拆成多次交易太<strong>笨拙</strong>。为允许交易额被分割和合并，交易将包含多个输入值和输出值。通常是一个从之前交易而得的较大输入值或多个较小输入值的组合，以及最多两个输出值：一个作为支付，另一个作为找零，如果有的话，退还给支付发送方。<br>
<img src="http://cdn.yunminitools.cn/blog/0413Transaction-Zh.png" alt=" "><br>
需要注意的是，这里的扇出(fan-out)，即一笔交易依赖数笔交易，这数笔交易又依赖更多的交易，形成了一个树状结构。在比特币系统中，这种情况不会成为问题，因为不需要获取一笔交易历史的完整独立副本。</p>
<p>【关注点】：</p>
<ul>
<li>扇出(fan-out), 是一个比较形象的说法，后面直接给出了定义。</li>
<li>不需要获取一笔交易历史的完整独立副本，并没有解释原因，为什么呢？</li>
</ul>
]]></content>
      <categories>
        <category>当日所学</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>论文学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 箭头函数</title>
    <url>/2023/04/14/javascript-arrow-function/</url>
    <content><![CDATA[<p><strong>Javascript 箭头函数</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span> item&gt;<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p>其等价形式为：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> item&gt;<span class="number">30</span></span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure>
<p>在 vue 中常常可以看到箭头函数的使用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// give each todo a unique id</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">newTodo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">todos</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn HTML&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">push</span>(&#123;<span class="attr">id</span>:id++,<span class="attr">text</span>:<span class="variable language_">this</span>.<span class="property">newTodo</span>&#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">newTodo</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">removeTodo</span>(<span class="params">todo</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>)=&gt;</span>t!=todo)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123; todo.text &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>其中的 this.todos = this.todos.filter ((t)=&gt;t!=todo) 就是箭头函数。 可以实现列表的删除效果。<br>
原理就是把不等于todo的元素筛选出来，也就是去除了todo。</p>
]]></content>
      <categories>
        <category>日常练习</category>
      </categories>
      <tags>
        <tag>编程技巧</tag>
        <tag>前端技术</tag>
      </tags>
  </entry>
</search>
